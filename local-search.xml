<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>汇编语言.001</title>
    <link href="/2020/05/18/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80.001/"/>
    <url>/2020/05/18/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80.001/</url>
    
    <content type="html"><![CDATA[<p>基础知识：汇编语言第三版-王爽<br><br>汇编指令：机器码的助记符，有对应的机器码；<br><br>伪指令：无对应的机器码，由编译器执行；<br><br>其他符号：如+、-、*、/,由编译器识别，无对应机器码；<br></p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p><strong>通用寄存器</strong>：AX,BX,CX(循环计数寄存器),DX<br><a href="\images\2019\4\18\ax.png"></a></p><p><strong>段寄存器</strong><br>CS(代码段寄存器)：IP(指令指针寄存器) - 提供CPU执行指令的地址<br><br>DS(数据段寄存器)：偏移地址 - 提供数据的存储地址<br><br>SS(栈顶段寄存器)：SP（栈顶指针寄存器）- 提供栈顶元素的存储地址<br><br>ES(附加段寄存器)<br></p><h1 id="Start-hello-world"><a href="#Start-hello-world" class="headerlink" title="Start hello world"></a>Start hello world</h1><pre><code class="lang-asm">DSEG    SEGMENTMESS    DB   &#39;Hello,World!&#39; ,0DH,0AH,24HDSEG    ENDSSSEG    SEGMENT PARA STACK         DW  256 DUP(?)SSEG    ENDSCSEG    SEGMENT        ASSUME  CS:CSEG,DS:DSEGBEGIN:  MOV AX,DSEG        MOV DS,AX        MOV DX,OFFSET MESS        MOV AH,9        INT 21H        MOV AH,4CH         INT 21HCSEG    ENDS        END  BEGIN</code></pre><p><strong>编译-链接-执行</strong><br><a href="\images\2019\4\18\1.png"></a><br><a href="\images\2019\4\18\2.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-Java</title>
    <link href="/2020/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Java/"/>
    <url>/2020/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Java/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul><li>饿汉式</li></ul><pre><code class="hljs java">#1class Singleton&#123;    private final static Singleton instance = new Singleton();    public static Singleton getInstance()&#123;        return instance;    &#125;&#125;#2public class Singleton&#123;    private static Singleton instance;    static &#123;        instance = new Singleton();    &#125;    public static Singleton getInstance()&#123;        return instance;    &#125;&#125;</code></pre><ul><li>懒汉式</li></ul><pre><code class="hljs java">#1 线程不安全public class Singleton&#123;    private static Singleton instance;    public static Singleton getInstance()&#123;        if(instance == null)            instance = new Singleton();        return instance;    &#125;&#125;#2 线程安全 效率低public class Singleton&#123;    private static Singleton instance;    public static synchronized Singleton getInstance()&#123;        if(instance == null)            instance = new Singleton();        return instance;    &#125;&#125;#3 双重检测public class Singleton&#123;    private static volatile Singleton instance;    public static synchronized Singleton getInstance()&#123;        if(instance == null)&#123;            synchronized (Singleton.class)&#123;                if(instance == null)&#123;                    instance = new Singleton();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;#4 静态内部类class Singleton&#123;   private static class SingletonInstance&#123;        private static final Singleton instance = new Singleton();    &#125;    public static synchronized Singleton getInstance()&#123;        return SingletonInstance.instance;    &#125;&#125;</code></pre><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><pre><code class="hljs java">#简单工厂模式public interface Shape &#123;   void draw();&#125;public class Rectangle implements Shape &#123;   @Override   public void draw() &#123;      System.out.println("Inside Rectangle::draw() method.");   &#125;&#125;public class Circle implements Shape &#123;   @Override   public void draw() &#123;      System.out.println("Inside Circle::draw() method.");   &#125;&#125;public class ShapeFactory &#123;   public Shape getShape(String shapeType)&#123;      if(shapeType == null)&#123;         return null;      &#125;              if(shapeType.equalsIgnoreCase("CIRCLE"))&#123;         return new Circle();      &#125;else if(shapeType.equalsIgnoreCase("SQUARE"))&#123;         return new Square();      &#125;      return null;   &#125;&#125;#抽象工厂模式public interface Shape &#123;   void draw();&#125;public class Rectangle implements Shape &#123;   @Override   public void draw() &#123;      System.out.println("Inside Rectangle::draw() method.");   &#125;&#125;public interface Color &#123;   void fill();&#125;public class Red implements Color &#123;   @Override   public void fill() &#123;      System.out.println("Inside Red::fill() method.");   &#125;&#125;public abstract class AbstractFactory &#123;   public abstract Color getColor(String color);   public abstract Shape getShape(String shape) ;&#125;public class ShapeFactory extends AbstractFactory &#123;   @Override   public Shape getShape(String shapeType)&#123;      if(shapeType == null)&#123;         return null;      &#125;              if(shapeType.equalsIgnoreCase("Rectangle"))&#123;         return new Rectangle();      &#125;       return null;   &#125;   @Override   public Color getColor(String color) &#123;      return null;   &#125;&#125;public class ColorFactory extends AbstractFactory &#123;   @Override   public Shape getShape(String shapeType)&#123;      return null;   &#125;   @Override   public Color getColor(String color) &#123;      if(color == null)&#123;         return null;      &#125;              if(color.equalsIgnoreCase("RED"))&#123;         return new Red();      &#125;      return null;   &#125;&#125;public class FactoryProducer &#123;   public static AbstractFactory getFactory(String choice)&#123;      if(choice.equalsIgnoreCase("SHAPE"))&#123;         return new ShapeFactory();      &#125; else if(choice.equalsIgnoreCase("COLOR"))&#123;         return new ColorFactory();      &#125;      return null;   &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>004.Spark Machine Learning</title>
    <link href="/2020/04/15/spark.004/"/>
    <url>/2020/04/15/spark.004/</url>
    
    <content type="html"><![CDATA[<h1 id="Spark-Machine-Learning"><a href="#Spark-Machine-Learning" class="headerlink" title="Spark Machine Learning"></a>Spark Machine Learning</h1><ul><li>引入依赖</li></ul><pre><code class="hljs text">&lt;dependency&gt;  &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;spark-mllib_2.11&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><h1 id="相关系数矩阵"><a href="#相关系数矩阵" class="headerlink" title="相关系数矩阵"></a>相关系数矩阵</h1><p>相关系数矩阵(i行，j列)的元素是原矩阵i列与j列的相关系数</p><pre><code class="hljs java">#身高与体重的相关系数矩阵SparkSession spark = SparkSession.builder().appName("ml test") .master("local[*]") .getOrCreate();List&lt;Row&gt; data = Arrays.asList(  RowFactory.create(Vectors.dense(172, 60)),  RowFactory.create(Vectors.dense(175, 65)),  RowFactory.create(Vectors.dense(180, 70)),  RowFactory.create(Vectors.dense(190, 80)));StructType schema = new StructType(new StructField[]&#123;  new StructField("features", new VectorUDT(), false, Metadata.empty()),&#125;);Dataset&lt;Row&gt; df = spark.createDataFrame(data, schema);df.show();Row pearson = Correlation.corr(df, "features").head();System.out.println("Pearson correlation matrix:\n" + pearson);Row spearman = Correlation.corr(df, "features", "spearman").head();System.out.println("Spearman correlation matrix:\n" + spearman);+------------+|    features|+------------+|[172.0,60.0]||[175.0,65.0]||[180.0,70.0]||[190.0,80.0]|+------------+Pearson correlation matrix:[1.0                 0.9957069831288888  0.9957069831288888  1.0                 ]Spearman correlation matrix:[1.0                 0.9999999999999981  0.9999999999999981  1.0                 ]</code></pre><h1 id="Extracting-transforming-and-selecting-features"><a href="#Extracting-transforming-and-selecting-features" class="headerlink" title="Extracting, transforming and selecting features"></a>Extracting, transforming and selecting features</h1><h2 id="Tokenizer-分词"><a href="#Tokenizer-分词" class="headerlink" title="Tokenizer 分词"></a>Tokenizer 分词</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();List&lt;Row&gt; data = Arrays.asList(RowFactory.create(<span class="hljs-number">0</span>, <span class="hljs-string">"Hi I heard about Spark"</span>),RowFactory.create(<span class="hljs-number">1</span>, <span class="hljs-string">"I wish Java could use case classes"</span>),RowFactory.create(<span class="hljs-number">2</span>, <span class="hljs-string">"Logistic,regression,models,are,neat"</span>));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"id"</span>, DataTypes.IntegerType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"sentence"</span>, DataTypes.StringType, <span class="hljs-keyword">false</span>, Metadata.empty())&#125;);Dataset&lt;Row&gt; sentenceDataFrame = spark.createDataFrame(data, schema);Tokenizer tokenizer = <span class="hljs-keyword">new</span> Tokenizer().setInputCol(<span class="hljs-string">"sentence"</span>).setOutputCol(<span class="hljs-string">"words"</span>);Dataset&lt;Row&gt; tokenized = tokenizer.transform(sentenceDataFrame);tokenized.show(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//正则</span>RegexTokenizer regexTokenizer = <span class="hljs-keyword">new</span> RegexTokenizer().setInputCol(<span class="hljs-string">"sentence"</span>).setOutputCol(<span class="hljs-string">"words"</span>).setPattern(<span class="hljs-string">"\\W"</span>);  <span class="hljs-comment">// alternatively .setPattern("\\w+").setGaps(false);</span>Dataset&lt;Row&gt; regexTokenized = regexTokenizer.transform(sentenceDataFrame);regexTokenized.show(<span class="hljs-keyword">false</span>);+---+-----------------------------------+------------------------------------------+|id |sentence                           |words                                     |+---+-----------------------------------+------------------------------------------+|<span class="hljs-number">0</span>  |Hi I heard about Spark             |[hi, i, heard, about, spark]              ||<span class="hljs-number">1</span>  |I wish Java could use <span class="hljs-keyword">case</span> classes |[i, wish, java, could, use, <span class="hljs-keyword">case</span>, classes]||<span class="hljs-number">2</span>  |Logistic,regression,models,are,neat|[logistic,regression,models,are,neat]     |+---+-----------------------------------+------------------------------------------++---+-----------------------------------+------------------------------------------+|id |sentence                           |words                                     |+---+-----------------------------------+------------------------------------------+|<span class="hljs-number">0</span>  |Hi I heard about Spark             |[hi, i, heard, about, spark]              ||<span class="hljs-number">1</span>  |I wish Java could use <span class="hljs-keyword">case</span> classes |[i, wish, java, could, use, <span class="hljs-keyword">case</span>, classes]||<span class="hljs-number">2</span>  |Logistic,regression,models,are,neat|[logistic, regression, models, are, neat] |+---+-----------------------------------+------------------------------------------+</code></pre><h2 id="StopWordsRemover-停止词"><a href="#StopWordsRemover-停止词" class="headerlink" title="StopWordsRemover 停止词"></a>StopWordsRemover 停止词</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();StopWordsRemover remover = <span class="hljs-keyword">new</span> StopWordsRemover().setInputCol(<span class="hljs-string">"raw"</span>).setOutputCol(<span class="hljs-string">"filtered"</span>);List&lt;Row&gt; data = Arrays.asList(RowFactory.create(Arrays.asList(<span class="hljs-string">"I"</span>, <span class="hljs-string">"saw"</span>, <span class="hljs-string">"the"</span>, <span class="hljs-string">"red"</span>, <span class="hljs-string">"balloon"</span>)),RowFactory.create(Arrays.asList(<span class="hljs-string">"Mary"</span>, <span class="hljs-string">"had"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"little"</span>, <span class="hljs-string">"lamb"</span>)));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"raw"</span>, DataTypes.createArrayType(DataTypes.StringType), <span class="hljs-keyword">false</span>, Metadata.empty())&#125;);Dataset&lt;Row&gt; dataset = spark.createDataFrame(data, schema);remover.transform(dataset).show(<span class="hljs-keyword">false</span>);+----------------------------+--------------------+|raw                         |filtered            |+----------------------------+--------------------+|[I, saw, the, red, balloon] |[saw, red, balloon] ||[Mary, had, a, little, lamb]|[Mary, little, lamb]|+----------------------------+--------------------+</code></pre><h2 id="n-gram"><a href="#n-gram" class="headerlink" title="$n$ -gram"></a>$n$ -gram</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();List&lt;Row&gt; data = Arrays.asList(RowFactory.create(<span class="hljs-number">0</span>, Arrays.asList(<span class="hljs-string">"Hi"</span>, <span class="hljs-string">"I"</span>, <span class="hljs-string">"heard"</span>, <span class="hljs-string">"about"</span>, <span class="hljs-string">"Spark"</span>)),RowFactory.create(<span class="hljs-number">1</span>, Arrays.asList(<span class="hljs-string">"I"</span>, <span class="hljs-string">"wish"</span>, <span class="hljs-string">"Java"</span>, <span class="hljs-string">"could"</span>, <span class="hljs-string">"use"</span>, <span class="hljs-string">"case"</span>, <span class="hljs-string">"classes"</span>)),RowFactory.create(<span class="hljs-number">2</span>, Arrays.asList(<span class="hljs-string">"Logistic"</span>, <span class="hljs-string">"regression"</span>, <span class="hljs-string">"models"</span>, <span class="hljs-string">"are"</span>, <span class="hljs-string">"neat"</span>)));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"id"</span>, DataTypes.IntegerType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"words"</span>, DataTypes.createArrayType(DataTypes.StringType), <span class="hljs-keyword">false</span>, Metadata.empty())&#125;);Dataset&lt;Row&gt; wordDataFrame = spark.createDataFrame(data, schema);NGram ngramTransformer = <span class="hljs-keyword">new</span> NGram().setN(<span class="hljs-number">2</span>).setInputCol(<span class="hljs-string">"words"</span>).setOutputCol(<span class="hljs-string">"ngrams"</span>);Dataset&lt;Row&gt; ngramDataFrame = ngramTransformer.transform(wordDataFrame);ngramDataFrame.select(<span class="hljs-string">"ngrams"</span>).show(<span class="hljs-keyword">false</span>);</code></pre><h2 id="Binarization-二值化"><a href="#Binarization-二值化" class="headerlink" title="Binarization 二值化"></a>Binarization 二值化</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();List&lt;Row&gt; data = Arrays.asList(RowFactory.create(<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>),RowFactory.create(<span class="hljs-number">1</span>, <span class="hljs-number">0.8</span>),RowFactory.create(<span class="hljs-number">2</span>, <span class="hljs-number">0.2</span>));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"id"</span>, DataTypes.IntegerType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"feature"</span>, DataTypes.DoubleType, <span class="hljs-keyword">false</span>, Metadata.empty())&#125;);Dataset&lt;Row&gt; continuousDataFrame = spark.createDataFrame(data, schema);Binarizer binarizer = <span class="hljs-keyword">new</span> Binarizer().setInputCol(<span class="hljs-string">"feature"</span>).setOutputCol(<span class="hljs-string">"binarized_feature"</span>).setThreshold(<span class="hljs-number">0.5</span>);Dataset&lt;Row&gt; binarizedDataFrame = binarizer.transform(continuousDataFrame);System.out.println(<span class="hljs-string">"Binarizer output with Threshold = "</span> + binarizer.getThreshold());binarizedDataFrame.show();+---+-------+-----------------+| id|feature|binarized_feature|+---+-------+-----------------+|  <span class="hljs-number">0</span>|    <span class="hljs-number">0.1</span>|              <span class="hljs-number">0.0</span>||  <span class="hljs-number">1</span>|    <span class="hljs-number">0.8</span>|              <span class="hljs-number">1.0</span>||  <span class="hljs-number">2</span>|    <span class="hljs-number">0.2</span>|              <span class="hljs-number">0.0</span>|+---+-------+-----------------+</code></pre><h2 id="PCA-主成成分分析"><a href="#PCA-主成成分分析" class="headerlink" title="PCA 主成成分分析"></a>PCA 主成成分分析</h2><pre><code class="hljs lsl">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();List&lt;Row&gt; data = Arrays.asList(RowFactory.create(Vectors.sparse(<span class="hljs-number">5</span>, new int[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, new double[]&#123;<span class="hljs-number">1.0</span>, <span class="hljs-number">7.0</span>&#125;)),RowFactory.create(Vectors.dense(<span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>)),RowFactory.create(Vectors.dense(<span class="hljs-number">4.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">7.0</span>)));StructType schema = new StructType(new StructField[]&#123;new StructField(<span class="hljs-string">"features"</span>, new VectorUDT(), false, Metadata.empty()),&#125;);Dataset&lt;Row&gt; df = spark.createDataFrame(data, schema);PCAModel pca = new PCA().setInputCol(<span class="hljs-string">"features"</span>).setOutputCol(<span class="hljs-string">"pcaFeatures"</span>).setK(<span class="hljs-number">3</span>).fit(df);Dataset&lt;Row&gt; result = pca.transform(df).select(<span class="hljs-string">"pcaFeatures"</span>);result.show(false);+-----------------------------------------------------------+|pcaFeatures                                                |+-----------------------------------------------------------+|[<span class="hljs-number">1.6485728230883807</span>,<span class="hljs-number">-4.013282700516296</span>,<span class="hljs-number">-5.524543751369388</span>] ||[<span class="hljs-number">-4.645104331781534</span>,<span class="hljs-number">-1.1167972663619026</span>,<span class="hljs-number">-5.524543751369387</span>]||[<span class="hljs-number">-6.428880535676489</span>,<span class="hljs-number">-5.337951427775355</span>,<span class="hljs-number">-5.524543751369389</span>] |+-----------------------------------------------------------+</code></pre><h2 id="PolynomialExpansion-多项式转化"><a href="#PolynomialExpansion-多项式转化" class="headerlink" title="PolynomialExpansion 多项式转化"></a>PolynomialExpansion 多项式转化</h2><pre><code class="hljs java">PolynomialExpansion polyExpansion = <span class="hljs-keyword">new</span> PolynomialExpansion().setInputCol(<span class="hljs-string">"features"</span>).setOutputCol(<span class="hljs-string">"polyFeatures"</span>).setDegree(<span class="hljs-number">2</span>);List&lt;Row&gt; data = Arrays.asList(RowFactory.create(Vectors.dense(<span class="hljs-number">2.0</span>, <span class="hljs-number">1.0</span>)),RowFactory.create(Vectors.dense(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)),RowFactory.create(Vectors.dense(<span class="hljs-number">3.0</span>, -<span class="hljs-number">1.0</span>)));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"features"</span>, <span class="hljs-keyword">new</span> VectorUDT(), <span class="hljs-keyword">false</span>, Metadata.empty()),&#125;);Dataset&lt;Row&gt; df = spark.createDataFrame(data, schema);Dataset&lt;Row&gt; polyDF = polyExpansion.transform(df);polyDF.show(<span class="hljs-keyword">false</span>);+----------+-----------------------+|features  |polyFeatures           |+----------+-----------------------+|[<span class="hljs-number">2.0</span>,<span class="hljs-number">1.0</span>] |[<span class="hljs-number">2.0</span>,<span class="hljs-number">4.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">1.0</span>]  ||[<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>] |[<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>]  ||[<span class="hljs-number">3.0</span>,-<span class="hljs-number">1.0</span>]|[<span class="hljs-number">3.0</span>,<span class="hljs-number">9.0</span>,-<span class="hljs-number">1.0</span>,-<span class="hljs-number">3.0</span>,<span class="hljs-number">1.0</span>]|+----------+-----------------------+</code></pre><h2 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h2><ul><li>TF:词频，词条在<strong>给定文档</strong>中所出现的频率,值越大则词条在该文档中重要性越大</li></ul><p>词条 $i$ 的TF： $TF_i$ = $\frac{N_i}{N}$  ( $N$ ：给定文档的总词条数)</p><ul><li>IDF：逆向文本频率，词条在<strong>所有文档</strong>中出现的频率，值越大则词条在该文档中重要性越小</li></ul><p>词条 $i$ 的IDF： $IDF_i$ = $log(\frac{D}{D_i+1})$  ( $D$ :总文档数， $D_i$ :包含词条 $i$ 的文档数)</p><p>TF-IDF $_i$ = $TF_i*IDF_i$  (词条 $i$ 的TF-IDF值)</p><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName("ml test") .master("local[*]") .getOrCreate();List&lt;Row&gt; data = Arrays.asList(  RowFactory.create(0.0, "I love spark spark spark"),  RowFactory.create(1.0, "I love java java is my life"),  RowFactory.create(2.0, "I love C++ C++ is the best"));StructType schema = new StructType(new StructField[]&#123;  new StructField("label", DataTypes.DoubleType, false, Metadata.empty()),  new StructField("sentence", DataTypes.StringType, false, Metadata.empty())&#125;);Dataset&lt;Row&gt; sentenceData = spark.createDataFrame(data, schema);sentenceData.show();Tokenizer tokenizer = new Tokenizer().setInputCol("sentence").setOutputCol("words"); //分词Dataset&lt;Row&gt; wordsData = tokenizer.transform(sentenceData);wordsData.show();int numFeatures = 20;HashingTF hashingTF = new HashingTF().setInputCol("words").setOutputCol("rawFeatures").setNumFeatures(numFeatures);Dataset&lt;Row&gt; featurizedData = hashingTF.transform(wordsData);featurizedData.show();IDF idf = new IDF().setInputCol("rawFeatures").setOutputCol("features");IDFModel idfModel = idf.fit(featurizedData);Dataset&lt;Row&gt; rescaledData = idfModel.transform(featurizedData);rescaledData.show();+-----+--------------------+|label|            sentence|+-----+--------------------+|  0.0|I love spark spar...||  1.0|I love java java ...||  2.0|I love C++ C++ is...|+-----+--------------------++-----+--------------------+--------------------+|label|            sentence|               words|+-----+--------------------+--------------------+|  0.0|I love spark spar...|[i, love, spark, ...||  1.0|I love java java ...|[i, love, java, j...||  2.0|I love C++ C++ is...|[i, love, c++, c+...|#rawFeatures:hash桶数、词hash索引、词频率+-----+--------------------+--------------------+--------------------+|label|            sentence|               words|         rawFeatures|+-----+--------------------+--------------------+--------------------+|  0.0|I love spark spar...|[i, love, spark, ...|(20,[0,5,9],[1.0,...||  1.0|I love java java ...|[i, love, java, j...|(20,[0,1,7,9,16,1...||  2.0|I love C++ C++ is...|[i, love, c++, c+...|(20,[0,1,3,9,10,1...|+-----+--------------------+--------------------+--------------------++-----+--------------------+--------------------+--------------------+--------------------+|label|            sentence|               words|         rawFeatures|            features|+-----+--------------------+--------------------+--------------------+--------------------+|  0.0|I love spark spar...|[i, love, spark, ...|(20,[0,5,9],[1.0,...|(20,[0,5,9],[0.0,...||  1.0|I love java java ...|[i, love, java, j...|(20,[0,1,7,9,16,1...|(20,[0,1,7,9,16,1...||  2.0|I love C++ C++ is...|[i, love, c++, c+...|(20,[0,1,3,9,10,1...|(20,[0,1,3,9,10,1...|+-----+--------------------+--------------------+--------------------+--------------------+</code></pre><h2 id="CountVectorizer"><a href="#CountVectorizer" class="headerlink" title="CountVectorizer"></a>CountVectorizer</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName("ml test")                 .master("local[*]")                 .getOrCreate();List&lt;Row&gt; data = Arrays.asList(  RowFactory.create("I love spark spark spark"),  RowFactory.create("I love java java is my life"),  RowFactory.create("I love C++ C++ is the best"));StructType schema = new StructType(new StructField[]&#123;  new StructField("sentence", DataTypes.StringType, false, Metadata.empty())&#125;);Dataset&lt;Row&gt; sentenceData = spark.createDataFrame(data, schema);sentenceData.show();Tokenizer tokenizer = new Tokenizer().setInputCol("sentence").setOutputCol("words"); //分词Dataset&lt;Row&gt; wordsData = tokenizer.transform(sentenceData);wordsData.show();CountVectorizerModel cvModel = new CountVectorizer()  .setInputCol("words")  .setOutputCol("feature")  //.setVocabSize(3)  //.setMinDF(2)  .fit(wordsData);System.out.println(Arrays.asList(cvModel.vocabulary()));cvModel.transform(wordsData).show(false);+--------------------+|            sentence|+--------------------+|I love spark spar...||I love java java ...||I love C++ C++ is...|+--------------------++--------------------+--------------------+|            sentence|               words|+--------------------+--------------------+|I love spark spar...|[i, love, spark, ...||I love java java ...|[i, love, java, j...||I love C++ C++ is...|[i, love, c++, c+...|+--------------------+--------------------+[love, spark, i, c++, java, is, the, life, best, my]#feature:词总数、词索引、词频率+---------------------------+-----------------------------------+--------------------------------------------+|sentence                   |words                              |feature                                     |+---------------------------+-----------------------------------+--------------------------------------------+|I love spark spark spark   |[i, love, spark, spark, spark]     |(10,[0,1,2],[1.0,3.0,1.0])                  ||I love java java is my life|[i, love, java, java, is, my, life]|(10,[0,2,4,5,7,9],[1.0,1.0,2.0,1.0,1.0,1.0])||I love C++ C++ is the best |[i, love, c++, c++, is, the, best] |(10,[0,2,3,5,6,8],[1.0,1.0,2.0,1.0,1.0,1.0])|+---------------------------+-----------------------------------+--------------------------------------------+</code></pre><h2 id="FeatureHasher"><a href="#FeatureHasher" class="headerlink" title="FeatureHasher"></a>FeatureHasher</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().appName(<span class="hljs-string">"ml test"</span>) .master(<span class="hljs-string">"local[*]"</span>) .getOrCreate();List&lt;Row&gt; data = Arrays.asList(RowFactory.create(<span class="hljs-number">2.2</span>, <span class="hljs-keyword">true</span>, <span class="hljs-string">"1"</span>, <span class="hljs-string">"foo"</span>),RowFactory.create(<span class="hljs-number">3.3</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"bar"</span>),RowFactory.create(<span class="hljs-number">4.4</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"baz"</span>),RowFactory.create(<span class="hljs-number">5.5</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">"4"</span>, <span class="hljs-string">"foo"</span>));StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[]&#123;<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"real"</span>, DataTypes.DoubleType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"bool"</span>, DataTypes.BooleanType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"stringNum"</span>, DataTypes.StringType, <span class="hljs-keyword">false</span>, Metadata.empty()),<span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"string"</span>, DataTypes.StringType, <span class="hljs-keyword">false</span>, Metadata.empty())&#125;);Dataset&lt;Row&gt; dataset = spark.createDataFrame(data, schema);FeatureHasher hasher = <span class="hljs-keyword">new</span> FeatureHasher().setInputCols(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"real"</span>, <span class="hljs-string">"bool"</span>, <span class="hljs-string">"stringNum"</span>, <span class="hljs-string">"string"</span>&#125;).setOutputCol(<span class="hljs-string">"features"</span>);Dataset&lt;Row&gt; featurized = hasher.transform(dataset);featurized.show(<span class="hljs-keyword">false</span>);+----+-----+---------+-------------------+|real|bool |stringNum|features           |+----+-----+---------+-------------------+|<span class="hljs-number">2.2</span> |<span class="hljs-keyword">true</span> |<span class="hljs-number">1</span>        |(<span class="hljs-number">2</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2.0</span>,<span class="hljs-number">2.2</span>])||<span class="hljs-number">3.3</span> |<span class="hljs-keyword">false</span>|<span class="hljs-number">2</span>        |(<span class="hljs-number">2</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1.0</span>,<span class="hljs-number">4.3</span>])||<span class="hljs-number">4.4</span> |<span class="hljs-keyword">false</span>|<span class="hljs-number">3</span>        |(<span class="hljs-number">2</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2.0</span>,<span class="hljs-number">4.4</span>])||<span class="hljs-number">5.5</span> |<span class="hljs-keyword">false</span>|<span class="hljs-number">4</span>        |(<span class="hljs-number">2</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1.0</span>,<span class="hljs-number">6.5</span>])|+----+-----+---------+-------------------+</code></pre>]]></content>
    
    
    <categories>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>003.Spark Streaming/Structured Streaming</title>
    <link href="/2020/04/15/spark.003/"/>
    <url>/2020/04/15/spark.003/</url>
    
    <content type="html"><![CDATA[<h1 id="spark-streaming-hello-world"><a href="#spark-streaming-hello-world" class="headerlink" title="spark streaming-hello world"></a>spark streaming-hello world</h1><p><em>note</em>:<a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/streaming-programming-guide.html</a></p><ul><li>引入依赖</li></ul><pre><code class="hljs text">&lt;dependency&gt;&lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spark-streaming_2.11&lt;&#x2F;artifactId&gt;&lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><ul><li><p>安装 Netcat 下载地址：<a href="http://netcat.sourceforge.net/" target="_blank" rel="noopener">http://netcat.sourceforge.net/</a></p></li><li><p>解压-启动</p></li></ul><pre><code class="hljs bash">$ nc -lk 9999</code></pre><ul><li>example</li></ul><pre><code class="hljs java">SparkConf conf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"spark streaming"</span>).setMaster(<span class="hljs-string">"local[*]"</span>);JavaStreamingContext jsc = <span class="hljs-keyword">new</span> JavaStreamingContext(conf,Durations.seconds(<span class="hljs-number">5</span>));<span class="hljs-comment">//5s处理一次</span>JavaReceiverInputDStream&lt;String&gt; lines = jsc.socketTextStream(<span class="hljs-string">"localhost"</span>,<span class="hljs-number">9999</span>);JavaDStream&lt;String&gt; words = lines.flatMap(x -&gt; Arrays.asList(x.split(<span class="hljs-string">" "</span>)).iterator());JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(s -&gt; <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(s, <span class="hljs-number">1</span>));JavaPairDStream&lt;String, Integer&gt; wordCounts = pairs.reduceByKey((i1, i2) -&gt; i1 + i2);wordCounts.print();jsc.start();              <span class="hljs-comment">// Start the computation</span>jsc.awaitTermination();jsc.close();</code></pre><ul><li>example实时数据解析过程</li></ul><p><img src="/images/bigdata/3.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs asciidoc"><span class="hljs-code">-------------------------------------------Time: 1586927760000 ms-------------------------------------------</span>(jp,1)(jiaopan,2)(spark,2)<span class="hljs-section">Time: 1586927710000 ms-------------------------------------------</span>(hive,2)</code></pre><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><ul><li>引入依赖</li></ul><pre><code class="hljs text">&lt;dependency&gt;&lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spark-streaming-kafka-0-10_2.11&lt;&#x2F;artifactId&gt;&lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><ul><li>example</li></ul><pre><code class="hljs java">SparkConf conf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"spark streaming"</span>).setMaster(<span class="hljs-string">"local[*]"</span>);JavaStreamingContext jsc = <span class="hljs-keyword">new</span> JavaStreamingContext(conf,Durations.seconds(<span class="hljs-number">5</span>));<span class="hljs-comment">//kafka配置</span>List&lt;String&gt; topics = Arrays.asList(<span class="hljs-string">"user_data_topic"</span>.split(<span class="hljs-string">","</span>));Map&lt;String,Object&gt; config = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();config.put(<span class="hljs-string">"bootstrap.servers"</span>,<span class="hljs-string">"localhost:6667"</span>);config.put(<span class="hljs-string">"key.deserializer"</span>,<span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);config.put(<span class="hljs-string">"value.deserializer"</span>,<span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);config.put(<span class="hljs-string">"auto.offset.reset"</span>,<span class="hljs-string">"earliest"</span>);config.put(<span class="hljs-string">"group.id"</span>,<span class="hljs-string">"group.demo.sys.smvp-998"</span>);JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; kafkaDStream = KafkaUtils.createDirectStream(jsc,    LocationStrategies.PreferConsistent(),    ConsumerStrategies.Subscribe(topics, config));JavaDStream&lt;String&gt; content = kafkaDStream.map(item-&gt;item.value());content.print();jsc.start();              <span class="hljs-comment">// Start the computation</span>jsc.awaitTermination();jsc.close();-------------------------------------------Time: <span class="hljs-number">1586933770000</span> ms-------------------------------------------&#123;<span class="hljs-string">"opType"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"token"</span>:<span class="hljs-string">"interface_6b"</span>,<span class="hljs-string">"content"</span>:[&#123;<span class="hljs-string">"id"</span>:<span class="hljs-string">"5bcfc4f9"</span>,<span class="hljs-string">"user_id"</span>:<span class="hljs-number">140050</span>,<span class="hljs-string">"in_time"</span>:<span class="hljs-string">"2020-04-07 09:35:04"</span>,<span class="hljs-string">"act_code"</span>:<span class="hljs-string">"order"</span>,<span class="hljs-string">"act_value"</span>:<span class="hljs-number">4</span>&#125;]&#125;&#123;<span class="hljs-string">"opType"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"token"</span>:<span class="hljs-string">"interface_c6"</span>,<span class="hljs-string">"content"</span>:[&#123;<span class="hljs-string">"id"</span>:<span class="hljs-string">"dcb14f5a"</span>,<span class="hljs-string">"user_id"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"in_time"</span>:<span class="hljs-string">"2020-04-07 21:46:48"</span>,<span class="hljs-string">"act_code"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"act_value"</span>:<span class="hljs-number">0</span>&#125;]&#125;</code></pre><h1 id="Structured-Streaming"><a href="#Structured-Streaming" class="headerlink" title="Structured Streaming"></a>Structured Streaming</h1><p><em>note</em>:<a href="http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html</a></p><pre><code class="hljs java">SparkSession spark = SparkSession.builder().master(<span class="hljs-string">"local[*]"</span>).appName(<span class="hljs-string">"JavaStructuredNetworkWordCount"</span>).getOrCreate();Dataset&lt;Row&gt; lines = spark.readStream().format(<span class="hljs-string">"socket"</span>).option(<span class="hljs-string">"host"</span>, <span class="hljs-string">"localhost"</span>).option(<span class="hljs-string">"port"</span>, <span class="hljs-number">9999</span>).load();StreamingQuery query = lines.writeStream().format(<span class="hljs-string">"console"</span>).outputMode(OutputMode.Append()).start();query.awaitTermination();(base) jiaopandeMacBook-Pro:~ jiaopan$ nc -lk <span class="hljs-number">9999</span>spark i love -------------------------------------------Batch: <span class="hljs-number">1</span>-------------------------------------------+------------+|       value|+------------+|spark i love|+------------+</code></pre><pre><code class="hljs asciidoc">SparkSession spark = SparkSession<span class="hljs-code">.builder()</span><span class="hljs-code">.master("local[*]")</span><span class="hljs-code">.appName("JavaStructuredNetworkWordCount")</span><span class="hljs-code">.getOrCreate();</span>Dataset&lt;Row&gt; lines = spark.readStream().format("socket").option("host", "localhost").option("port", 9999).load();Dataset&lt;String&gt; words = lines.as(Encoders.STRING()).flatMap(line -&gt; Arrays.asList(line.split(" ")).iterator(), Encoders.STRING());Dataset&lt;Row&gt; wordCount = words.groupBy("value").count();StreamingQuery query = wordCount.writeStream().outputMode(OutputMode.Complete()).format("console").start();query.awaitTermination();(base) jiaopandeMacBook-Pro:~ jiaopan$ nc -lk 9999cat dog<span class="hljs-code">+-----+</span>-----+<span class="hljs-section">|value|count|+-----+-----+</span>|  dog|    1|<span class="hljs-section">|  cat|    1|+-----+-----+</span>(base) jiaopandeMacBook-Pro:~ jiaopan$ nc -lk 9999<span class="hljs-bullet">...</span><span class="hljs-section">cat dog owl+-----+-----+</span><span class="hljs-section">|value|count|+-----+-----+</span>|  dog|    2||  cat|    2|<span class="hljs-section">|  owl|    1|+-----+-----+</span></code></pre><p><img src="http://spark.apache.org/docs/latest/img/structured-streaming-example-model.png" srcset="/images/loading.gif" alt=""></p><h2 id="Window-Operations-on-Event-Time"><a href="#Window-Operations-on-Event-Time" class="headerlink" title="Window Operations on Event Time"></a>Window Operations on Event Time</h2><pre><code class="hljs java">SparkSession spark = SparkSession.builder().master(<span class="hljs-string">"local[*]"</span>).appName(<span class="hljs-string">"JavaStructuredNetworkWordCount"</span>).getOrCreate();spark.sparkContext().setLogLevel(<span class="hljs-string">"WARN"</span>);Dataset&lt;Row&gt; lines = spark.readStream().format(<span class="hljs-string">"socket"</span>).option(<span class="hljs-string">"host"</span>, <span class="hljs-string">"localhost"</span>).option(<span class="hljs-string">"port"</span>, <span class="hljs-number">9999</span>).option(<span class="hljs-string">"includeTimestamp"</span>,<span class="hljs-keyword">true</span>).load();Dataset&lt;Row&gt; words = lines.as(Encoders.tuple(Encoders.STRING(), Encoders.TIMESTAMP())).flatMap((FlatMapFunction&lt;Tuple2&lt;String, Timestamp&gt;, Tuple2&lt;String, Timestamp&gt;&gt;) item -&gt; &#123;List&lt;Tuple2&lt;String, Timestamp&gt;&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-keyword">for</span> (String word : item._1.split(<span class="hljs-string">" "</span>)) &#123;result.add(<span class="hljs-keyword">new</span> Tuple2&lt;&gt;(word, item._2));&#125;<span class="hljs-keyword">return</span> result.iterator();&#125;, Encoders.tuple(Encoders.STRING(), Encoders.TIMESTAMP())).toDF(<span class="hljs-string">"word"</span>, <span class="hljs-string">"timestamp"</span>);Dataset&lt;Row&gt; windowedCounts = words.groupBy(<span class="hljs-comment">//&lt;window duration&gt; 计算window duration时间范围内的数据</span><span class="hljs-comment">//&lt;slide duration&gt; 数据更新周期,</span>functions.window(words.col(<span class="hljs-string">"timestamp"</span>), <span class="hljs-string">"20 seconds"</span>, <span class="hljs-string">"10 seconds"</span>),words.col(<span class="hljs-string">"word"</span>)).count().orderBy(<span class="hljs-string">"window"</span>);StreamingQuery query = windowedCounts.writeStream().outputMode(OutputMode.Complete()).option(<span class="hljs-string">"truncate"</span>, <span class="hljs-string">"false"</span>).format(<span class="hljs-string">"console"</span>).start();query.awaitTermination();-------------------------------------------Batch: <span class="hljs-number">1</span>-------------------------------------------+------------------------------------------+----+-----+|window                                    |word|count|+------------------------------------------+----+-----+|[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>]|cat |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>]|dog |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">10</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>]|dog |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">10</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>]|cat |<span class="hljs-number">1</span>    |+------------------------------------------+----+-----+-------------------------------------------Batch: <span class="hljs-number">2</span>-------------------------------------------+------------------------------------------+----+-----+|window                                    |word|count|+------------------------------------------+----+-----+|[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>]|cat |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>]|dog |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">10</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>]|dog |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">10</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>]|cat |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">40</span>]|cat |<span class="hljs-number">1</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">40</span>]|dog |<span class="hljs-number">2</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50</span>]|dog |<span class="hljs-number">2</span>    ||[<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50</span>]|cat |<span class="hljs-number">1</span>    |+------------------------------------------+----+-----+</code></pre><p><img src="http://spark.apache.org/docs/latest/img/structured-streaming-window.png" srcset="/images/loading.gif" alt=""></p><h2 id="Output-Sinks"><a href="#Output-Sinks" class="headerlink" title="Output Sinks"></a>Output Sinks</h2><pre><code class="hljs java">writeStream    .format(<span class="hljs-string">"parquet"</span>)        <span class="hljs-comment">// can be "orc", "json", "csv", etc.</span>    .option(<span class="hljs-string">"path"</span>, <span class="hljs-string">"path/to/destination/dir"</span>)    .start()writeStream    .format(<span class="hljs-string">"kafka"</span>)    .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)    .option(<span class="hljs-string">"topic"</span>, <span class="hljs-string">"updates"</span>)    .start()    writeStream    .foreach(...)    .start()    writeStream    .format(<span class="hljs-string">"console"</span>)    .start()writeStream    .format(<span class="hljs-string">"memory"</span>)    .queryName(<span class="hljs-string">"tableName"</span>)    .start()</code></pre><h2 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h2><p><em>note</em>:<a href="http://spark.apache.org/docs/latest/structured-streaming-kafka-integration.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/structured-streaming-kafka-integration.html</a></p><ul><li>引入依赖</li></ul><pre><code class="hljs text">&lt;dependency&gt;  &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;spark-sql-kafka-0-10_2.11&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><ul><li>example</li></ul><pre><code class="hljs java">SparkSession session = SparkSession        .builder()        .master("local[*]")        .appName("JavaStructuredNetworkWordCount")        .getOrCreate();session.sparkContext().setLogLevel("WARN");Dataset&lt;Row&gt; dataset = session.readStream().format("kafka")        .option("kafka.bootstrap.servers", "localhost:6667")        .option("startingOffsets", "earliest")        .option("subscribe","test_topic")        .option("group.id", "group.demo.sys").load()        .selectExpr("CAST(value AS STRING)");StreamingQuery query = dataset.writeStream().format("console").start();query.awaitTermination();-------------------------------------------Batch: 0-------------------------------------------+--------------------+|               value|+--------------------+|&#123;"content":[&#123;"all...||&#123;"content":[&#123;"all...||&#123;"url":"wlztk_sh_...||&#123;"url":"wlztk_sh_...||&#123;"url":"wlztk_sh_...||&#123;"content":[&#123;"all...||&#123;"url":"wlztk_sh_...|+--------------------+only showing top 20 rows</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; df = spark  .readStream()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribe"</span>, <span class="hljs-string">"topic1"</span>)  .load()df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>)<span class="hljs-comment">// Subscribe to multiple topics</span>Dataset&lt;Row&gt; df = spark  .readStream()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribe"</span>, <span class="hljs-string">"topic1,topic2"</span>)  .load()df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>)<span class="hljs-comment">// Subscribe to a pattern</span>Dataset&lt;Row&gt; df = spark  .readStream()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribePattern"</span>, <span class="hljs-string">"topic.*"</span>)  .load()df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>)</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; df = spark  .read()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribe"</span>, <span class="hljs-string">"topic1"</span>)  .load();df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>);<span class="hljs-comment">// Subscribe to multiple topics, specifying explicit Kafka offsets</span>Dataset&lt;Row&gt; df = spark  .read()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribe"</span>, <span class="hljs-string">"topic1,topic2"</span>)  .option(<span class="hljs-string">"startingOffsets"</span>, <span class="hljs-string">"&#123;\"topic1\":&#123;\"0\":23,\"1\":-2&#125;,\"topic2\":&#123;\"0\":-2&#125;&#125;"</span>)  .option(<span class="hljs-string">"endingOffsets"</span>, <span class="hljs-string">"&#123;\"topic1\":&#123;\"0\":50,\"1\":-1&#125;,\"topic2\":&#123;\"0\":-1&#125;&#125;"</span>)  .load();df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>);<span class="hljs-comment">// Subscribe to a pattern, at the earliest and latest offsets</span>Dataset&lt;Row&gt; df = spark  .read()  .format(<span class="hljs-string">"kafka"</span>)  .option(<span class="hljs-string">"kafka.bootstrap.servers"</span>, <span class="hljs-string">"host1:port1,host2:port2"</span>)  .option(<span class="hljs-string">"subscribePattern"</span>, <span class="hljs-string">"topic.*"</span>)  .option(<span class="hljs-string">"startingOffsets"</span>, <span class="hljs-string">"earliest"</span>)  .option(<span class="hljs-string">"endingOffsets"</span>, <span class="hljs-string">"latest"</span>)  .load();df.selectExpr(<span class="hljs-string">"CAST(key AS STRING)"</span>, <span class="hljs-string">"CAST(value AS STRING)"</span>);</code></pre>]]></content>
    
    
    <categories>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>002.Spark Sql</title>
    <link href="/2020/04/12/spark.002/"/>
    <url>/2020/04/12/spark.002/</url>
    
    <content type="html"><![CDATA[<h1 id="spark-sql-hello-world"><a href="#spark-sql-hello-world" class="headerlink" title="spark sql-hello world"></a>spark sql-hello world</h1><p>1.引入依赖</p><pre><code class="hljs text">&lt;dependency&gt;&lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spark-sql_2.11&lt;&#x2F;artifactId&gt;&lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>2.exmple程序</p><pre><code class="hljs arduino"> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-title">implements</span> <span class="hljs-title">Serializable</span>&#123;</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> age;    Man(<span class="hljs-keyword">String</span> name,<span class="hljs-keyword">String</span> age)&#123;    <span class="hljs-keyword">this</span>.name = name;    <span class="hljs-keyword">this</span>.age = age;    &#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span> </span>&#123;<span class="hljs-keyword">this</span>.name = name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> age;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">String</span> age)</span> </span>&#123;<span class="hljs-keyword">this</span>.age = age;&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SparkConf conf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"wordCount"</span>).setMaster(<span class="hljs-string">"local[*]"</span>);<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JavaSparkContext sc = <span class="hljs-keyword">new</span> JavaSparkContext(conf);SparkSession session = SparkSession.builder().appName(<span class="hljs-string">"sql test"</span>).master(<span class="hljs-string">"local[*]"</span>).getOrCreate();JavaRDD&lt;<span class="hljs-keyword">String</span>&gt; lines = sc.parallelize(Arrays.asList(<span class="hljs-string">"jeery 26"</span>,<span class="hljs-string">"tony 23"</span>));JavaRDD&lt;Man&gt; mans = lines.<span class="hljs-built_in">map</span>(<span class="hljs-built_in">line</span>-&gt;&#123;    <span class="hljs-keyword">String</span>[] words = <span class="hljs-built_in">line</span>.split(<span class="hljs-string">" "</span>);    Man item = <span class="hljs-keyword">new</span> Man(words[<span class="hljs-number">0</span>],words[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">return</span> item;&#125;);Dataset&lt;Row&gt; men = session.createDataFrame(mans,Man.class);men.createTempView(<span class="hljs-string">"men"</span>);Dataset&lt;Row&gt; result = session.sql(<span class="hljs-string">"select * from men order by age"</span>);result.show();session.<span class="hljs-built_in">stop</span>();+---+-----+|age| name|+---+-----+| <span class="hljs-number">23</span>| tony|| <span class="hljs-number">26</span>|jeery|+---+-----+</code></pre><h1 id="StructType-定义schema"><a href="#StructType-定义schema" class="headerlink" title="StructType 定义schema"></a>StructType 定义schema</h1><ul><li>example -01</li></ul><pre><code class="hljs java">JavaRDD&lt;String&gt; lines = sc.parallelize(Arrays.asList(<span class="hljs-string">"jeery 26"</span>,<span class="hljs-string">"tony 23"</span>));JavaRDD&lt;Row&gt; mans = lines.map(line-&gt;&#123;    String[] words = line.split(<span class="hljs-string">" "</span>);    <span class="hljs-keyword">return</span> RowFactory.create(words[<span class="hljs-number">0</span>],words[<span class="hljs-number">1</span>]);&#125;);StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[] &#123;    <span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"name"</span>,DataTypes.StringType,<span class="hljs-keyword">true</span>,Metadata.empty()),    <span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"age"</span>,DataTypes.StringType,<span class="hljs-keyword">true</span>,Metadata.empty()),&#125;);Dataset&lt;Row&gt; men = session.createDataFrame(mans,schema);men.printSchema();men.show();men.createTempView(<span class="hljs-string">"men"</span>);Dataset&lt;Row&gt; result = session.sql(<span class="hljs-string">"select * from men order by age"</span>);result.show();root |-- name: string (nullable = <span class="hljs-keyword">true</span>) |-- age: string (nullable = <span class="hljs-keyword">true</span>)+-----+---+| name|age|+-----+---+|jeery| <span class="hljs-number">26</span>|| tony| <span class="hljs-number">23</span>|+-----+---++-----+---+| name|age|+-----+---+| tony| <span class="hljs-number">23</span>||jeery| <span class="hljs-number">26</span>|+-----+---+</code></pre><ul><li>example-02</li></ul><pre><code class="hljs java">StructType schema = <span class="hljs-keyword">new</span> StructType(<span class="hljs-keyword">new</span> StructField[] &#123;    <span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"name"</span>,DataTypes.StringType,<span class="hljs-keyword">true</span>,Metadata.empty()),    <span class="hljs-keyword">new</span> StructField(<span class="hljs-string">"age"</span>,DataTypes.StringType,<span class="hljs-keyword">true</span>,Metadata.empty()),&#125;);List&lt;Row&gt; rows = <span class="hljs-keyword">new</span> ArrayList&lt;Row&gt;();rows.add(RowFactory.create(<span class="hljs-string">"jiaopan"</span>,<span class="hljs-string">"26"</span>));rows.add(RowFactory.create(<span class="hljs-string">"jp"</span>,<span class="hljs-string">"23"</span>));Dataset&lt;Row&gt; men = session.createDataFrame(rows,schema);men.printSchema();men.show();+-------+---+|   name|age|+-------+---+|jiaopan| <span class="hljs-number">26</span>||     jp| <span class="hljs-number">23</span>|+-------+---+</code></pre><h1 id="json-读取json文件自动创建DataFrame"><a href="#json-读取json文件自动创建DataFrame" class="headerlink" title="json 读取json文件自动创建DataFrame"></a>json 读取json文件自动创建DataFrame</h1><ul><li>user.json</li></ul><pre><code class="hljs text">&#123;&quot;name&quot;:&quot;jiaopan&quot;,&quot;age&quot;:&quot;26&quot;&#125;&#123;&quot;name&quot;:&quot;jp&quot;,&quot;age&quot;:&quot;39&quot;&#125;&#123;&quot;name&quot;:&quot;chengdu&quot;,&quot;age&quot;:&quot;19&quot;&#125;</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; users = session.read().json(<span class="hljs-string">"/Volumes/storage/macbook-pro/programming/java-projects/spark.learning/user.json"</span>);users.printSchema();users.show();root |-- age: string (nullable = <span class="hljs-keyword">true</span>) |-- name: string (nullable = <span class="hljs-keyword">true</span>)+---+-------+|age|   name|+---+-------+| <span class="hljs-number">26</span>|jiaopan|| <span class="hljs-number">39</span>|     jp|| <span class="hljs-number">19</span>|chengdu|+---+-------+</code></pre><ul><li>user.json</li></ul><pre><code class="hljs text">&#123;&quot;name&quot;:&quot;jiaopan&quot;,&quot;age&quot;:26,&quot;address&quot;:&quot;成都市&quot;&#125;&#123;&quot;name&quot;:&quot;jp&quot;,&quot;age&quot;:39,&quot;phone&quot;:&quot;18088886666&quot;&#125;&#123;&quot;name&quot;:&quot;chengdu&quot;,&quot;age&quot;:19&#125;</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; users = session.read().json(<span class="hljs-string">"/Volumes/storage/macbook-pro/programming/java-projects/spark.learning/user.json"</span>);users.printSchema();users.show();root |-- address: string (nullable = <span class="hljs-keyword">true</span>) |-- age: string (nullable = <span class="hljs-keyword">true</span>) |-- name: string (nullable = <span class="hljs-keyword">true</span>) |-- phone: string (nullable = <span class="hljs-keyword">true</span>) +-------+---+-------+-----------+|address|age|   name|      phone|+-------+---+-------+-----------+|  成都市| <span class="hljs-number">26</span>|jiaopan|       <span class="hljs-keyword">null</span>||   <span class="hljs-keyword">null</span>| <span class="hljs-number">39</span>|     jp|<span class="hljs-number">18088886666</span>||   <span class="hljs-keyword">null</span>| <span class="hljs-number">19</span>|chengdu|       <span class="hljs-keyword">null</span>|+-------+---+-------+-----------+</code></pre><h1 id="CSV-读取csv文件自动创建DataFrame"><a href="#CSV-读取csv文件自动创建DataFrame" class="headerlink" title="CSV 读取csv文件自动创建DataFrame"></a>CSV 读取csv文件自动创建DataFrame</h1><ul><li>user.csv</li></ul><pre><code class="hljs text">jiaopan,26,成都市jp,39,18088886666chengdu,19</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; users = session.read().csv(<span class="hljs-string">"/Volumes/storage/macbook-pro/programming/java-projects/spark.learning/user.csv"</span>);users.printSchema();users.show();root |-- _c0: string (nullable = <span class="hljs-keyword">true</span>) |-- _c1: string (nullable = <span class="hljs-keyword">true</span>) |-- _c2: string (nullable = <span class="hljs-keyword">true</span>) +-------+---+-----------+|    _c0|_c1|        _c2|+-------+---+-----------+|jiaopan| <span class="hljs-number">26</span>|      成都市||     jp| <span class="hljs-number">39</span>|<span class="hljs-number">18088886666</span>||chengdu| <span class="hljs-number">19</span>|       <span class="hljs-keyword">null</span>|+-------+---+-----------+</code></pre><ul><li>user.csv</li></ul><pre><code class="hljs text">name,age,phone,addressjiaopan,26,&quot;&quot;,成都市jp,39,18088886666,&quot;&quot;chengdu,19,&quot;&quot;,&quot;&quot;</code></pre><pre><code class="hljs java">Dataset&lt;Row&gt; users = session.read()    .option(<span class="hljs-string">"header"</span>,<span class="hljs-keyword">true</span>) <span class="hljs-comment">//设置第一行为表头</span>    .option(<span class="hljs-string">"inferSchema"</span>, <span class="hljs-keyword">true</span>) <span class="hljs-comment">//推断数据类型</span>    .csv(<span class="hljs-string">"/Volumes/storage/macbook-pro/programming/java-projects/spark.learning/user.csv"</span>);users.printSchema();users.show();root |-- name: string (nullable = <span class="hljs-keyword">true</span>) |-- age: integer (nullable = <span class="hljs-keyword">true</span>) |-- phone: <span class="hljs-keyword">long</span> (nullable = <span class="hljs-keyword">true</span>) |-- address: string (nullable = <span class="hljs-keyword">true</span>) +-------+---+-----------+-------+|   name|age|      phone|address|+-------+---+-----------+-------+|jiaopan| <span class="hljs-number">26</span>|       <span class="hljs-keyword">null</span>|  成都市||     jp| <span class="hljs-number">39</span>|<span class="hljs-number">18088886666</span>|   <span class="hljs-keyword">null</span>||chengdu| <span class="hljs-number">19</span>|       <span class="hljs-keyword">null</span>|   <span class="hljs-keyword">null</span>|+-------+---+-----------+-------+</code></pre><h1 id="DSL-API"><a href="#DSL-API" class="headerlink" title="DSL API"></a>DSL API</h1><pre><code class="hljs java">Dataset&lt;Row&gt; users = session.read().option(<span class="hljs-string">"header"</span>,<span class="hljs-keyword">true</span>) <span class="hljs-comment">//设置第一行为表头</span>.option(<span class="hljs-string">"inferSchema"</span>, <span class="hljs-keyword">true</span>) <span class="hljs-comment">//推断数据类型</span>.csv(<span class="hljs-string">"/Volumes/storage/macbook-pro/programming/java-projects/spark.learning/user.csv"</span>);    Dataset&lt;Row&gt; result = users.select(<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>).where(<span class="hljs-string">"age &gt;=20"</span>);result.show();+-------+---+|   name|age|+-------+---+|jiaopan| <span class="hljs-number">26</span>||     jp| <span class="hljs-number">39</span>|+-------+---+</code></pre><h1 id="word-count"><a href="#word-count" class="headerlink" title="word count"></a>word count</h1><pre><code class="hljs java">Dataset&lt;String&gt; lines = session.read().textFile(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/words.txt"</span>);lines.show();Dataset&lt;String&gt; words = lines.flatMap(line-&gt;Arrays.asList(line.split(<span class="hljs-string">" "</span>)).iterator(),Encoders.STRING());words.show();words.createTempView(<span class="hljs-string">"words"</span>);Dataset&lt;Row&gt; result = session.sql(<span class="hljs-string">"select value word,count(*) count from words group by word"</span>);result.show();+--------------------+|               value|+--------------------+|         spark spark||hive hive hive hello||mysql jiaopan jia...|+--------------------++-------+|  value|+-------+|  spark||  spark||   hive||   hive||   hive||  hello||  mysql||jiaopan||jiaopan|+-------++-------+-----+|   word|count|+-------+-----+|  hello|    <span class="hljs-number">1</span>||jiaopan|    <span class="hljs-number">2</span>||  mysql|    <span class="hljs-number">1</span>||  spark|    <span class="hljs-number">2</span>||   hive|    <span class="hljs-number">3</span>|+-------+-----+Dataset&lt;Row&gt; DSlresult = words.withColumnRenamed(<span class="hljs-string">"value"</span>,<span class="hljs-string">"word"</span>).select(<span class="hljs-string">"*"</span>).groupBy(<span class="hljs-string">"word"</span>).count();DSlresult.show();+-------+-----+|   word|count|+-------+-----+|  hello|    <span class="hljs-number">1</span>||jiaopan|    <span class="hljs-number">2</span>||  mysql|    <span class="hljs-number">1</span>||  spark|    <span class="hljs-number">2</span>||   hive|    <span class="hljs-number">3</span>|+-------+-----+Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();map.put(<span class="hljs-string">"*"</span>,<span class="hljs-string">"count"</span>);Dataset&lt;Row&gt; DSlresult = words.withColumnRenamed(<span class="hljs-string">"value"</span>,<span class="hljs-string">"word"</span>).select(<span class="hljs-string">"*"</span>).groupBy(<span class="hljs-string">"word"</span>).agg(map);DSlresult.show();+-------+--------+|   word|count(<span class="hljs-number">1</span>)|+-------+--------+|  hello|       <span class="hljs-number">1</span>||jiaopan|       <span class="hljs-number">2</span>||  mysql|       <span class="hljs-number">1</span>||  spark|       <span class="hljs-number">2</span>||   hive|       <span class="hljs-number">3</span>|+-------+--------+</code></pre><h1 id="JDBC-读取数据库"><a href="#JDBC-读取数据库" class="headerlink" title="JDBC 读取数据库"></a>JDBC 读取数据库</h1><pre><code class="hljs java">Properties properties = <span class="hljs-keyword">new</span>  Properties();properties.setProperty(<span class="hljs-string">"driver"</span>,<span class="hljs-string">"com.mysql.jdbc.Driver"</span>);properties.setProperty(<span class="hljs-string">"user"</span>,<span class="hljs-string">"root"</span>);properties.setProperty(<span class="hljs-string">"password"</span>,<span class="hljs-string">"123456"</span>);String jdbc = <span class="hljs-string">"jdbc:mysql://localhost:3306/intelligent_agriculture?characterEncoding=UTF-8"</span>;Dataset&lt;Row&gt; result = session.read().jdbc(jdbc,<span class="hljs-string">"sys_user"</span>, properties);result.show();+-------------------+--------+--------------------+------+--------+-----+------+-----------+|                 id|username|            password|   tel|org_code|level|status|create_date|+-------------------+--------+--------------------+------+--------+-----+------+-----------+|<span class="hljs-number">1057796353167527937</span>|   admin|eac4108912af90ae9...|    <span class="hljs-number">23</span>| <span class="hljs-number">1001011</span>|    <span class="hljs-number">0</span>|     <span class="hljs-number">1</span>| <span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">01</span>||<span class="hljs-number">1102890947181555714</span>|    demo|<span class="hljs-number">36</span>a7c9e95a47010a2...|      |  <span class="hljs-number">100101</span>|    <span class="hljs-number">1</span>|     <span class="hljs-number">1</span>| <span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">05</span>||<span class="hljs-number">1120927990138572801</span>|    test|<span class="hljs-number">2</span>df51a84abc64a287...|<span class="hljs-number">123456</span>|  <span class="hljs-number">100101</span>|    <span class="hljs-number">1</span>|     <span class="hljs-number">1</span>| <span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">24</span>|+-------------------+--------+--------------------+------+--------+-----+------+-----------+</code></pre><h1 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h1><pre><code class="hljs java">Properties properties = <span class="hljs-keyword">new</span>  Properties();properties.setProperty(<span class="hljs-string">"driver"</span>,<span class="hljs-string">"com.mysql.jdbc.Driver"</span>);properties.setProperty(<span class="hljs-string">"user"</span>,<span class="hljs-string">"root"</span>);properties.setProperty(<span class="hljs-string">"password"</span>,<span class="hljs-string">"123456"</span>);String jdbc = <span class="hljs-string">"jdbc:mysql://localhost:3306/intelligent_agriculture?characterEncoding=UTF-8"</span>;Dataset&lt;Row&gt; result = session.read().jdbc(jdbc,<span class="hljs-string">"sys_user"</span>, properties);result.show();result.write().parquet(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/out"</span>);Dataset&lt;Row&gt; parquet = session.read().parquet(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/out"</span>);</code></pre><pre><code class="hljs bash">20/04/13 14:12:14 INFO ParquetWriteSupport: Initialized Parquet WriteSupport with Catalyst schema:&#123;  <span class="hljs-string">"type"</span> : <span class="hljs-string">"struct"</span>,  <span class="hljs-string">"fields"</span> : [ &#123;    <span class="hljs-string">"name"</span> : <span class="hljs-string">"id"</span>,    <span class="hljs-string">"type"</span> : <span class="hljs-string">"string"</span>,    <span class="hljs-string">"nullable"</span> : <span class="hljs-literal">true</span>,    <span class="hljs-string">"metadata"</span> : &#123; &#125;  &#125;,...]&#125;and corresponding Parquet message <span class="hljs-built_in">type</span>:message spark_schema &#123;  optional binary id (UTF8);  optional binary username (UTF8);  optional binary password (UTF8);  optional binary tel (UTF8);  optional binary org_code (UTF8);  optional int32 level;  optional int32 status;  optional int32 create_date (DATE);&#125;+-------------------+--------+--------------------+------+--------+-----+------+-----------+|                 id|username|            password|   tel|org_code|level|status|create_date|+-------------------+--------+--------------------+------+--------+-----+------+-----------+|1057796353167527937|   admin|eac4108912af90ae9...|    23| 1001011|    0|     1| 2018-11-01||1102890947181555714|    demo|36a7c9e95a47010a2...|      |  100101|    1|     1| 2019-03-05||1120927990138572801|    <span class="hljs-built_in">test</span>|2df51a84abc64a287...|123456|  100101|    1|     1| 2019-04-24|+-------------------+--------+--------------------+------+--------+-----+------+-----------+</code></pre><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><ul><li>引入依赖</li></ul><pre><code class="hljs text">&lt;dependency&gt;  &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;spark-hive_2.11&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><ul><li>配置</li></ul><p>将hive/conf/hive-site.xml复制至spark/conf目录</p><p><strong>note</strong>：若hive版本3.0+，则需配置hive-site.xml中ACID配置项为false,spark才可访问hive,否则只能访问hive外部表</p><ul><li>开启hive支持</li></ul><pre><code class="hljs java">SparkSession session = SparkSession.builder().appName(<span class="hljs-string">"sql test"</span>)     .master(<span class="hljs-string">"local[*]"</span>)     <span class="hljs-comment">//利用thrift连接hive</span>     .config(<span class="hljs-string">"hive.metastore.uris"</span>, <span class="hljs-string">"thrift://xodb-dev03:9083"</span>)     .enableHiveSupport()     .getOrCreate();     session.sql(<span class="hljs-string">"show databases"</span>).show();session.sql(<span class="hljs-string">"use wl_test"</span>);session.sql(<span class="hljs-string">"show tables"</span>).show();Dataset&lt;Row&gt; result = session.sql(<span class="hljs-string">"select * from user_act limit 10"</span>);result.show();    +------------+|databaseName|+------------+|     <span class="hljs-keyword">default</span>||         sys||        tpch||   warehouse||     wl_test|+------------++--------+---------+-----------+|database|tableName|isTemporary|+--------+---------+-----------+| wl_test| user_act|      <span class="hljs-keyword">false</span>|+--------+---------+-----------++-------+-------+------+-----------+|user_id|item_id|rating|create_time|+-------+-------+------+-----------+|    <span class="hljs-number">196</span>|    <span class="hljs-number">242</span>|     <span class="hljs-number">3</span>|  <span class="hljs-number">881250949</span>||    <span class="hljs-number">186</span>|    <span class="hljs-number">302</span>|     <span class="hljs-number">3</span>|  <span class="hljs-number">891717742</span>||     <span class="hljs-number">22</span>|    <span class="hljs-number">377</span>|     <span class="hljs-number">1</span>|  <span class="hljs-number">878887116</span>||    <span class="hljs-number">244</span>|     <span class="hljs-number">51</span>|     <span class="hljs-number">2</span>|  <span class="hljs-number">880606923</span>||    <span class="hljs-number">166</span>|    <span class="hljs-number">346</span>|     <span class="hljs-number">1</span>|  <span class="hljs-number">886397596</span>||    <span class="hljs-number">298</span>|    <span class="hljs-number">474</span>|     <span class="hljs-number">4</span>|  <span class="hljs-number">884182806</span>||    <span class="hljs-number">115</span>|    <span class="hljs-number">265</span>|     <span class="hljs-number">2</span>|  <span class="hljs-number">881171488</span>||    <span class="hljs-number">253</span>|    <span class="hljs-number">465</span>|     <span class="hljs-number">5</span>|  <span class="hljs-number">891628467</span>||    <span class="hljs-number">305</span>|    <span class="hljs-number">451</span>|     <span class="hljs-number">3</span>|  <span class="hljs-number">886324817</span>||      <span class="hljs-number">6</span>|     <span class="hljs-number">86</span>|     <span class="hljs-number">3</span>|  <span class="hljs-number">883603013</span>|+-------+-------+------+-----------+</code></pre><p><em>note</em>：</p><p><a href="http://spark.apache.org/docs/latest/sql-programming-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/sql-programming-guide.html</a></p><p><a href="http://spark.apache.org/docs/latest/api/sql/index.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/api/sql/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>001.Spark RDD</title>
    <link href="/2020/04/09/spark.001/"/>
    <url>/2020/04/09/spark.001/</url>
    
    <content type="html"><![CDATA[<h1 id="spark-hello-world"><a href="#spark-hello-world" class="headerlink" title="spark-hello world"></a>spark-hello world</h1><p>1.创建maven项目spark-note,添加Spark依赖,新建TestSpark.java类<br><br>2.引入依赖和打包插件</p><pre><code class="hljs text">&lt;dependency&gt;  &lt;groupId&gt;org.scala-lang&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;scala-library&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.11.8&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;spark-core_2.11&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.4.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;hadoop-client&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.7.7&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;  &lt;version&gt;3.8.1&lt;&#x2F;version&gt;  &lt;scope&gt;test&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;</code></pre><pre><code class="hljs text">&lt;build&gt;      &lt;plugins&gt;       &lt;plugin&gt;         &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;         &lt;version&gt;2.3.2&lt;&#x2F;version&gt;         &lt;configuration&gt;             &lt;source&gt;1.8&lt;&#x2F;source&gt;             &lt;target&gt;1.8&lt;&#x2F;target&gt;         &lt;&#x2F;configuration&gt;     &lt;&#x2F;plugin&gt;     &lt;plugin&gt;        &lt;artifactId&gt; maven-assembly-plugin &lt;&#x2F;artifactId&gt;        &lt;configuration&gt;             &lt;descriptorRefs&gt;             &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;             &lt;&#x2F;descriptorRefs&gt;             &lt;archive&gt;              &lt;manifest&gt;               &lt;mainClass&gt;jiaopaner.spark.learning.App&lt;&#x2F;mainClass&gt;              &lt;&#x2F;manifest&gt;             &lt;&#x2F;archive&gt;&lt;&#x2F;configuration&gt;        &lt;executions&gt;             &lt;execution&gt;                  &lt;id&gt;make-assembly&lt;&#x2F;id&gt;                  &lt;phase&gt;package&lt;&#x2F;phase&gt;                  &lt;goals&gt;                       &lt;goal&gt;single&lt;&#x2F;goal&gt;                  &lt;&#x2F;goals&gt;             &lt;&#x2F;execution&gt;        &lt;&#x2F;executions&gt;   &lt;&#x2F;plugin&gt;&lt;&#x2F;plugins&gt;  &lt;&#x2F;build&gt;</code></pre><p>3.创建word.txt</p><pre><code class="hljs text">spark sparkhive hive hive hellomysql jiaopan jiaopan</code></pre><p>4.编写处理程序</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span>&#123;        SparkConf conf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"wordCount"</span>).setMaster(<span class="hljs-string">"local[*]"</span>);<span class="hljs-comment">//local[*]本地模式</span>        JavaSparkContext sc = <span class="hljs-keyword">new</span> JavaSparkContext(conf);        JavaRDD&lt;String&gt; lines = sc.textFile(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/words.txt"</span>);        JavaRDD&lt;String&gt; words = lines.flatMap(line-&gt;Arrays.asList(line.split(<span class="hljs-string">" "</span>)).iterator());        JavaPairRDD&lt;String, Integer&gt; wordAndOne = words.mapToPair(word-&gt;Tuple2.apply(word,<span class="hljs-number">1</span>));        JavaPairRDD&lt;String, Integer&gt; reduced = wordAndOne.reduceByKey((a,b)-&gt;a+b);        JavaPairRDD&lt;Integer,String&gt; swapped = reduced.mapToPair(reduce-&gt;reduce.swap());        JavaPairRDD&lt;Integer,String&gt; sorted = swapped.sortByKey(<span class="hljs-keyword">false</span>);        JavaPairRDD&lt;String, Integer&gt; result = sorted.mapToPair(sort-&gt;sort.swap());        result.saveAsTextFile(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/out.txt"</span>);        sc.close();    &#125;&#125;</code></pre><p>5.执行结果</p><p><img src="\images\bigdata\2.png" srcset="/images/loading.gif" alt=""></p><p>其中part-00000和part-00001分别保存了结果，内容如下</p><pre><code class="hljs text">(hive,3)(jiaopan,2)(spark,2)(mysql,1)(hello,1)</code></pre><p>6.提交到集群执行</p><p>将words.txt上传HDFS系统，修改部分代码</p><pre><code class="hljs java">SparkConf conf = <span class="hljs-keyword">new</span> SparkConf() .setAppName(<span class="hljs-string">"WordCount"</span>);  <span class="hljs-comment">//.setMaster("local");//注释掉</span>JavaSparkContext sc = <span class="hljs-keyword">new</span> JavaSparkContext(conf);JavaRDD&lt;String&gt; lines = sc.textFile(<span class="hljs-string">"hdfs://node:8020/words.txt"</span>);<span class="hljs-comment">//读取HDFS文件</span>result.saveAsTextFile(<span class="hljs-string">"/home/data/out.txt"</span>);<span class="hljs-comment">// hdfs://node:8020  -&gt;登陆ambari查看HDFS core-site配置可知</span></code></pre><p>7.打包程序并上传到集群</p><p>上传spark-note-0.0.1-SNAPSHOT-jar-with-dependencies.jar到spark集群主机节点上</p><p>8.提交任务执行</p><pre><code class="hljs bash">[root@node spark]<span class="hljs-comment"># spark-submit --class jiaopaner.spark.learning.App --master spark://master:7077 --num-executors 1  --executor-cores 1 /home/spark/spark-note-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></code></pre><p>9.可通过master:4040可查看任务执行进度</p><h1 id="transform算子"><a href="#transform算子" class="headerlink" title="transform算子"></a>transform算子</h1><ul><li>map(func)：返回一个新的RDD，每个数据项通过map中的函数func转换</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; nums = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));JavaRDD&lt;Integer&gt; newNums =  nums.map(num-&gt;num*<span class="hljs-number">2</span>);System.out.println(newNums.collect());[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</code></pre><ul><li>flatMap(func):返回一个新的RDD,将旧RDD中的每个元素通过函数func转换为新的元素，并将生成的RDD的每个集合中的元素合并为一个集合</li></ul><pre><code class="hljs java">JavaRDD&lt;String&gt; lines = sc.parallelize(Arrays.asList(<span class="hljs-string">"hello java"</span>,<span class="hljs-string">"hello hive"</span>));JavaRDD&lt;String&gt; words= lines.flatMap(line-&gt;Arrays.asList(line.split(<span class="hljs-string">" "</span>)).iterator());System.out.println(words.collect());[hello, java, hello, hive]JavaRDD&lt;List&lt;String&gt;&gt; lists = sc.parallelize(Arrays.asList(Arrays.asList(<span class="hljs-string">"a b"</span>,<span class="hljs-string">"c d"</span>),Arrays.asList(<span class="hljs-string">"e f"</span>,<span class="hljs-string">"g h"</span>)));JavaRDD&lt;String&gt; items = lists.flatMap(list-&gt;list.stream().flatMap(item-&gt;Arrays.asList(item.split(<span class="hljs-string">" "</span>)).stream()).iterator());System.out.println(items.collect());[a, b, c, d, e, f, g, h]</code></pre><ul><li>filter(func)：返回一个新的RDD，经过func函数后返回值为true的元素保留</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));JavaRDD&lt;Integer&gt; newNumbers = numbers.filter(num-&gt;num &gt; <span class="hljs-number">2</span>);System.out.println(newNumbers.collect());[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</code></pre><ul><li>mapPartitions(func):返回一个新的RDD,分区处理数据，func的函数类型为Iterator[T] =&gt; Iterator[U]</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>),<span class="hljs-number">3</span>);JavaRDD&lt;Integer&gt; newNumbers = numbers.mapPartitions(it-&gt;&#123;    List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();    <span class="hljs-keyword">while</span>(it.hasNext()) &#123;        nums.add(it.next() * <span class="hljs-number">2</span>);    &#125;    <span class="hljs-keyword">return</span> nums.iterator();&#125;);System.out.println(newNumbers.collect());[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>]</code></pre><ul><li>mapPartitionsWithIndex(func):返回一个新的RDD,分区处理数据,func带有一个整数参数表示分区的索引值,func的函数类型是(Int, Interator[T]) =&gt; Iterator[U]</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>),<span class="hljs-number">3</span>);numbers.mapPartitionsWithIndex((index,it)-&gt;&#123;    <span class="hljs-keyword">while</span>(it.hasNext()) &#123;        System.out.println(index+<span class="hljs-string">":"</span>+it.next());    &#125;    <span class="hljs-keyword">return</span> it;&#125;,<span class="hljs-keyword">true</span>).count();<span class="hljs-number">1</span>:<span class="hljs-number">4</span><span class="hljs-number">1</span>:<span class="hljs-number">5</span><span class="hljs-number">1</span>:<span class="hljs-number">6</span><span class="hljs-number">0</span>:<span class="hljs-number">1</span><span class="hljs-number">2</span>:<span class="hljs-number">7</span><span class="hljs-number">0</span>:<span class="hljs-number">2</span><span class="hljs-number">2</span>:<span class="hljs-number">8</span><span class="hljs-number">0</span>:<span class="hljs-number">3</span><span class="hljs-number">2</span>:<span class="hljs-number">9</span></code></pre><ul><li>union(otherDataset):合并两个RDD</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));JavaRDD&lt;Integer&gt; union = numbers.union(sc.parallelize(Arrays.asList(<span class="hljs-number">10</span>,<span class="hljs-number">11</span>)));System.out.println(union.collect());[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]</code></pre><ul><li>intersection(otherDataset):返回两个RDD的交集</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));JavaRDD&lt;Integer&gt; intersection = numbers.intersection(sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>)));System.out.println(intersection.collect());[<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]</code></pre><ul><li>subtract(otherDataset):返回两个RDD的差集</li></ul><pre><code class="hljs java">JavaRDD&lt;Integer&gt; numbers = sc.parallelize(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));JavaRDD&lt;Integer&gt; subtract = numbers.subtract(sc.parallelize(Arrays.asList(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>)));System.out.println(subtract.collect());[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]</code></pre><ul><li>sortByKey([ascending], [numTasks]):(K,V)类型的RDD上调用，返回按照key进行排序的(K,V)RDD</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;Integer, String&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;Integer,String&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;Integer,String&gt;(<span class="hljs-number">1</span>,<span class="hljs-string">"java"</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;Integer,String&gt;(<span class="hljs-number">9</span>,<span class="hljs-string">"spark"</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;Integer,String&gt;(<span class="hljs-number">6</span>,<span class="hljs-string">"hive"</span>));JavaPairRDD&lt;Integer,String&gt; tuples = sc.parallelize(list).mapToPair(t-&gt;t);JavaPairRDD&lt;Integer,String&gt; sorted = tuples.sortByKey(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//倒序</span>System.out.println(sorted.collect());[(<span class="hljs-number">9</span>,spark), (<span class="hljs-number">6</span>,hive), (<span class="hljs-number">1</span>,java)]</code></pre><ul><li>sortBy(func,[ascending], [numTasks]):灵活,可指定排序字段</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-number">1</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">9</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">6</span>));JavaRDD&lt;Tuple2&lt;String,Integer&gt;&gt; tuples = sc.parallelize(list);JavaRDD&lt;Tuple2&lt;String,Integer&gt;&gt; sorted = tuples.sortBy(tuple-&gt;tuple._2,<span class="hljs-keyword">true</span>,<span class="hljs-number">3</span>);System.out.println(sorted.collect());[(java,<span class="hljs-number">1</span>), (hive,<span class="hljs-number">6</span>), (spark,<span class="hljs-number">9</span>)]</code></pre><ul><li>groupByKey([numTasks]):(K,V)类型的RDD上调用，返回按照key进行分组的(K, Iterator[V])的RDD</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-number">1</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">9</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">6</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">19</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">10</span>));JavaPairRDD&lt;String,Integer&gt; tuples = sc.parallelize(list).mapToPair(item-&gt;item);JavaPairRDD&lt;String,Iterable&lt;Integer&gt;&gt; grouped = tuples.groupByKey();System.out.println(grouped.collect());[(spark,[<span class="hljs-number">9</span>, <span class="hljs-number">19</span>]), (hive,[<span class="hljs-number">6</span>, <span class="hljs-number">10</span>]), (java,[<span class="hljs-number">1</span>])]</code></pre><ul><li>groupBy(func,[numTasks]):灵活,可指定按分组字段</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-number">1</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">9</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">6</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">19</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">10</span>));JavaRDD&lt;Tuple2&lt;String,Integer&gt;&gt; tuples = sc.parallelize(list);JavaPairRDD&lt;Object,Iterable&lt;Tuple2&lt;String,Integer&gt;&gt;&gt; grouped = tuples.groupBy(item-&gt;item._1);System.out.println(grouped.collect());[(spark,[(spark,<span class="hljs-number">9</span>), (spark,<span class="hljs-number">19</span>)]), (hive,[(hive,<span class="hljs-number">6</span>), (hive,<span class="hljs-number">10</span>)]), (java,[(java,<span class="hljs-number">1</span>)])]</code></pre><ul><li>reduceByKey(func, [numTasks])：(K,V)类型的RDD上调用，使用指定的func函数，将相同key的值聚合</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-number">1</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">9</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">6</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">19</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">10</span>));JavaPairRDD&lt;String,Integer&gt; tuples = sc.parallelize(list).mapToPair(item-&gt;item);JavaPairRDD&lt;String,Integer&gt; reduced = tuples.reduceByKey((a,b)-&gt;a+b);System.out.println(reduced.collect());[(spark,<span class="hljs-number">28</span>), (hive,<span class="hljs-number">16</span>), (java,<span class="hljs-number">1</span>)]</code></pre><ul><li>join(otherDataset, [numTasks]):类型为(K,V)和(K,W)的RDD上调用，返回相同key对应的所有元素对(K,(V,W))的RDD</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,String&gt;&gt; one = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,String&gt;&gt;();one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,String&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-string">"java-001"</span>));one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,String&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-string">"spark-001"</span>));one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,String&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-string">"hive-001"</span>));JavaPairRDD&lt;String,String&gt; oneRdd = sc.parallelize(one).mapToPair(item-&gt;item);List&lt;Tuple2&lt;String,Integer&gt;&gt; two = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();two.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">1</span>));two.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">2</span>));JavaPairRDD&lt;String,Integer&gt; twoRdd = sc.parallelize(two).mapToPair(item-&gt;item);JavaPairRDD&lt;String,Tuple2&lt;String,Integer&gt;&gt; joined = oneRdd.join(twoRdd);System.out.println(joined.collect());[(spark,(spark-<span class="hljs-number">001</span>,<span class="hljs-number">1</span>)), (hive,(hive-<span class="hljs-number">001</span>,<span class="hljs-number">2</span>))]</code></pre><ul><li>cogroup(otherDataset, [numTasks])：类型(K,V)和(K,W)的RDD上调用，返回(K,(Iterable,Iterable))类型的RDD</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Object&gt;&gt; one = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Object&gt;&gt;();one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Object&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-string">"java-001"</span>));one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Object&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-string">"spark-001"</span>));one.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Object&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-string">"hive-001"</span>));JavaPairRDD&lt;String,Object&gt; oneRdd = sc.parallelize(one).mapToPair(item-&gt;item);List&lt;Tuple2&lt;String,Object&gt;&gt; two = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Object&gt;&gt;();two.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Object&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-string">"spark-002"</span>));two.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Object&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-string">"hive-002"</span>));JavaPairRDD&lt;String,Object&gt; twoRdd = sc.parallelize(two).mapToPair(item-&gt;item);JavaPairRDD&lt;String, Tuple2&lt;Iterable&lt;Object&gt;, Iterable&lt;Object&gt;&gt;&gt; cogrouped = oneRdd.cogroup(twoRdd);System.out.println(cogrouped.collect());[(spark,([spark-<span class="hljs-number">001</span>],[spark-<span class="hljs-number">002</span>])), (hive,([hive-<span class="hljs-number">001</span>],[hive-<span class="hljs-number">002</span>])), (java,([java-<span class="hljs-number">001</span>],[]))]</code></pre><h1 id="action算子"><a href="#action算子" class="headerlink" title="action算子"></a>action算子</h1><ul><li>collect()：以数组的形式返回数据集所有元素</li><li>count()：返回RDD的元素个数</li><li>first():返回RDD的第一个元素</li><li>take(n):返回一个由数据集前n个元素组成的数组</li><li>saveAsTextFile(path):将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统中</li><li>foreachPartition(func)：在数据集的每一个分区上，运行函数func</li><li>reduce(func, [numTasks])：全量聚合</li></ul><pre><code class="hljs java">List&lt;Tuple2&lt;String,Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,Integer&gt;&gt;();list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"java"</span>,<span class="hljs-number">1</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">9</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">6</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"spark"</span>,<span class="hljs-number">19</span>));list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"hive"</span>,<span class="hljs-number">10</span>));JavaRDD&lt;Tuple2&lt;String,Integer&gt;&gt; tuples = sc.parallelize(list);Tuple2&lt;String,Integer&gt; reduced = tuples.reduce((a,b)-&gt;<span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(<span class="hljs-string">"count"</span>, a._2+b._2));System.out.println(reduced);(count,<span class="hljs-number">45</span>)</code></pre><h1 id="控制算子"><a href="#控制算子" class="headerlink" title="控制算子"></a>控制算子</h1><ul><li>cache：将数据缓存在内存</li><li>persist(newLevel:StorageLevel):缓存操作,StorageLevel枚举类型，代表存储模式</li></ul><p><em>note</em>:<a href="http://spark.apache.org/docs/latest/rdd-programming-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/rdd-programming-guide.html</a></p>]]></content>
    
    
    <categories>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>000.Spark Basement</title>
    <link href="/2020/04/08/spark.000/"/>
    <url>/2020/04/08/spark.000/</url>
    
    <content type="html"><![CDATA[<h1 id="Launching-Applications-with-spark-submit"><a href="#Launching-Applications-with-spark-submit" class="headerlink" title="Launching Applications with spark-submit"></a>Launching Applications with spark-submit</h1><pre><code class="hljs bash">./bin/spark-submit \  --class &lt;main-class&gt; \  --master &lt;master-url&gt; \  --deploy-mode &lt;deploy-mode&gt; \  --conf &lt;key&gt;=&lt;value&gt; \  ... <span class="hljs-comment"># other options</span>  &lt;application-jar&gt; \  [application-arguments]./bin/spark-submit \   --name <span class="hljs-string">"My app"</span> \   --master <span class="hljs-built_in">local</span>[4] \    --conf spark.eventLog.enabled=<span class="hljs-literal">false</span> \   --conf <span class="hljs-string">"spark.executor.extraJavaOptions=-XX:+PrintGCDetails -XX:+PrintGCTimeStamps"</span> \   --conf spark.hadoop.abc.def=xyz \   myApp.jar</code></pre><ul><li>—class: Main方法 (e.g. org.apache.spark.examples.SparkPi)</li><li>—master: 集群master地址 (e.g. spark://23.195.26.187:7077)</li><li>—deploy-mode: driver on the worker nodes (cluster) or locally as an external client (client) (default: client) †</li><li>—conf: Spark配置：key=value. <strong>more</strong>:<a href="http://spark.apache.org/docs/latest/configuration.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/configuration.html</a></li><li>application-jar: jar包路径.(hdfs:// , file://,local)</li><li>application-arguments: Main方法的参数</li><li><strong>more options: ./bin/spark-submit —help</strong></li></ul><p><strong>master urls</strong></p><ul><li>local：本地单线程运行.</li><li>local[K]    ：本地K个线程运行，k=1,2,3,4,$…$ .</li><li>local[*]：    本地多线程运行，线程数基于当前CPU.</li><li>spark://HOST:PORT：    Spark standalone模式，port默认7077.<br>(<a href="http://spark.apache.org/docs/latest/spark-standalone.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/spark-standalone.html</a>)</li><li>spark://HOST1:PORT1,HOST2:PORT2：Spark standalone模式    .</li><li>mesos://HOST:PORT：Mesos 模式，port默认5050.(<a href="http://spark.apache.org/docs/latest/running-on-mesos.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/running-on-mesos.html</a>)</li><li>yarn：    YARN模式.(<a href="http://spark.apache.org/docs/latest/running-on-yarn.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/running-on-yarn.html</a>)</li><li>k8s://HOST:PORT：Kubernetes模式.(<a href="http://spark.apache.org/docs/latest/running-on-kubernetes.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/running-on-kubernetes.html</a>)</li></ul>]]></content>
    
    
    <categories>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch 自定义数据集/训练/模型保存和加载</title>
    <link href="/2020/04/08/pytorch_prepare-data_create-model_train_valid_test_save-model_load-model/"/>
    <url>/2020/04/08/pytorch_prepare-data_create-model_train_valid_test_save-model_load-model/</url>
    
    <content type="html"><![CDATA[<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><p><strong>1.第一种方式</strong><br><br>torchvision.datasets.ImageFolder<br><br><br>数据集文件需如下结构：<br><br>root<em>dir/cat/xxx.png<br><br>root_dir/cat/xxy.jpeg<br><br>…<br><br>root_dir/dog/nsdf3.png<br><br>root_dir/dog/asd932</em>.png<br></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> torchvision<span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms,datasets<span class="hljs-keyword">import</span> osos.environ[<span class="hljs-string">"KMP_DUPLICATE_LIB_OK"</span>]=<span class="hljs-string">"TRUE"</span></code></pre><pre><code class="hljs python">transform = transforms.Compose([    transforms.Resize([<span class="hljs-number">224</span>,<span class="hljs-number">224</span>]),    transforms.ToTensor(),    transforms.Normalize((<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>), (<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>))])dataset = datasets.ImageFolder(root=<span class="hljs-string">"/Volumes/storage/learn/machine-learning/notes/pytorch/data/dog_cat"</span>,                               transform=transform)dataloader = torch.utils.data.DataLoader(dataset,batch_size=<span class="hljs-number">4</span>,shuffle=<span class="hljs-literal">True</span>,num_workers=<span class="hljs-number">2</span>)</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> nplabel_dict = (<span class="hljs-string">"cat"</span>,<span class="hljs-string">"dog"</span>)<span class="hljs-comment"># 输出图像的函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">imshow</span><span class="hljs-params">(img)</span>:</span>    img = img / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>     <span class="hljs-comment"># unnormalize</span>    npimg = img.numpy()    plt.imshow(np.transpose(npimg, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))    plt.show()<span class="hljs-comment"># 随机获取训练图片</span>dataiter = iter(dataloader)images, labels = dataiter.next()<span class="hljs-comment"># 显示图片</span>imshow(torchvision.utils.make_grid(images))plt.show()print(<span class="hljs-string">' '</span>.join(<span class="hljs-string">'%5s'</span> % label_dict[labels[j].item()] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>)))</code></pre><p><img src="\images\dp-net\output_4_0.png" srcset="/images/loading.gif" alt="png"></p><p>dog   cat   dog   cat</p><hr><p><strong>第二种方式(继承torch.utils.data.Dataset)</strong><br><br>实现：<br><br><strong>__len__(self):</strong> 返回数据集的大小<br><br><strong>__getitem__(self,index):</strong> 支持索引，获取第index个样本的数据和标签<br><br><br>假设数据集文件如下结构：<br><br>root_dir/cat.0.png<br><br>root_dir/cat.1.jpeg<br><br>…<br><br>root_dir/dog.0.jpg<br><br>root_dir/dog.1.png<br><br><br><br><strong>note:transform的输入图片格式:PIL.Image</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">from</span> skimage <span class="hljs-keyword">import</span> ioos.environ[<span class="hljs-string">"KMP_DUPLICATE_LIB_OK"</span>]=<span class="hljs-string">"TRUE"</span></code></pre><pre><code class="hljs python">labels = (<span class="hljs-string">"cat"</span>,<span class="hljs-string">"dog"</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dogCatData</span><span class="hljs-params">(torch.utils.data.Dataset)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,root_dir,transform=None)</span>:</span>        self.root_dir = root_dir        self.transform = transform        self.files = []        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(root_dir):            sample = &#123;&#125;            sample[<span class="hljs-string">"file"</span>] = os.path.join(root_dir,file)            sample[<span class="hljs-string">"label"</span>] = labels.index(file.split(<span class="hljs-string">"."</span>)[<span class="hljs-number">0</span>])            self.files.append(sample)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> len(self.files )    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span><span class="hljs-params">(self,index)</span>:</span>        sample = self.files[index]        <span class="hljs-comment">#image = Image.open(sample["file"])</span>        image = io.imread(sample[<span class="hljs-string">"file"</span>])        image = Image.fromarray(image)        label = sample[<span class="hljs-string">"label"</span>]        <span class="hljs-keyword">if</span> self.transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            image = self.transform(image)        <span class="hljs-keyword">return</span> image,label</code></pre><pre><code class="hljs python">data = dogCatData(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/dog_cat/train"</span>)print(data[<span class="hljs-number">0</span>])</code></pre><pre><code>(&lt;PIL.Image.Image image mode=RGB size=208x257 at 0x1492917F0&gt;, 0)</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms <span class="hljs-keyword">as</span> transformstransform = transforms.Compose([    transforms.Resize([<span class="hljs-number">224</span>,<span class="hljs-number">224</span>]),    transforms.ToTensor(),    transforms.Normalize((<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>), (<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>))])dataset = dogCatData(<span class="hljs-string">"/Volumes/storage/learn/bigdata/data/dog_cat/train"</span>,transform)dataloader = torch.utils.data.DataLoader(dataset,batch_size=<span class="hljs-number">8</span>,shuffle=<span class="hljs-literal">True</span>,num_workers=<span class="hljs-number">4</span>)</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> nplabel_dict = (<span class="hljs-string">"cat"</span>,<span class="hljs-string">"dog"</span>)<span class="hljs-comment"># 输出图像的函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">imshow</span><span class="hljs-params">(img)</span>:</span>    img = img / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>     <span class="hljs-comment"># unnormalize</span>    npimg = img.numpy()    plt.imshow(np.transpose(npimg, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))    plt.show()<span class="hljs-comment"># 随机获取训练图片</span>dataiter = iter(dataloader)images, labels = dataiter.next()<span class="hljs-comment"># 显示图片</span>imshow(torchvision.utils.make_grid(images))plt.show()print(<span class="hljs-string">' '</span>.join(<span class="hljs-string">'%5s'</span> % label_dict[labels[j].item()] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>)))</code></pre><p><img src="\images\dp-net\output_10_0.png" srcset="/images/loading.gif" alt="png"></p><p>cat   cat   dog   dog   dog   dog   dog   cat</p><hr><h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn</code></pre><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlexNet</span><span class="hljs-params">(nn.Module)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,num_classes=<span class="hljs-number">2</span>)</span>:</span>        super(AlexNet, self).__init__()        self.features = nn.Sequential(            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">11</span>, stride=<span class="hljs-number">4</span>, padding=<span class="hljs-number">2</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),            nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">192</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),            nn.Conv2d(<span class="hljs-number">192</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),        )        self.avgpool = nn.AdaptiveAvgPool2d((<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))        self.classifier = nn.Sequential(            nn.Dropout(),            nn.Linear(<span class="hljs-number">256</span> * <span class="hljs-number">6</span> * <span class="hljs-number">6</span>, <span class="hljs-number">4096</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.Dropout(),            nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>),            nn.ReLU(inplace=<span class="hljs-literal">True</span>),            nn.Linear(<span class="hljs-number">4096</span>, num_classes),        )    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span>        x = self.features(x)        x = self.avgpool(x)        x = torch.flatten(x, <span class="hljs-number">1</span>)        x = self.classifier(x)        <span class="hljs-keyword">return</span> x</code></pre><pre><code class="hljs python">model = AlexNet(<span class="hljs-number">2</span>)</code></pre><hr><h1 id="定义损失和优化器"><a href="#定义损失和优化器" class="headerlink" title="定义损失和优化器"></a>定义损失和优化器</h1><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optimcriterion = nn.CrossEntropyLoss()optimizer = optim.SGD(net.parameters(), lr=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>)</code></pre><hr><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><pre><code class="hljs python">device = torch.device(<span class="hljs-string">'cuda'</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">'cpu'</span>)print(device)</code></pre><pre><code class="hljs python">model.to(device)</code></pre><pre><code class="hljs python">model.to(device)<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):  <span class="hljs-comment"># loop over the dataset multiple times</span>    model.train()    running_loss = <span class="hljs-number">0.0</span>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> enumerate(dataloader):        <span class="hljs-comment"># get the inputs</span>        inputs, labels = data        inputs, labels = inputs.to(device), labels.to(device)        <span class="hljs-comment"># zero the parameter gradients</span>        optimizer.zero_grad()        <span class="hljs-comment"># forward + backward + optimize</span>        outputs = model(inputs)        loss = criterion(outputs, labels)        loss.backward()        optimizer.step()        <span class="hljs-comment"># print statistics</span>        running_loss += loss.item()        <span class="hljs-keyword">if</span> i % <span class="hljs-number">1999</span> == <span class="hljs-number">0</span>:    <span class="hljs-comment"># print every 2000 mini-batches</span>            print(<span class="hljs-string">'[%d, %5d] loss: %.3f'</span> % (epoch + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, running_loss / <span class="hljs-number">2000</span>))            running_loss = <span class="hljs-number">0.0</span>print(<span class="hljs-string">'Finished Training'</span>)torch.save(model, <span class="hljs-string">'dog_cat.pth'</span>)</code></pre><pre><code>[1,     1] loss: 0.636[1,     2] loss: 1.332[1,     3] loss: 2.026[1,     4] loss: 2.692[1,     5] loss: 3.386[1,     6] loss: 4.139[1,     7] loss: 4.776[1,     8] loss: 5.472[1,     9] loss: 6.108[1,    10] loss: 6.860[1,    11] loss: 7.555[1,    12] loss: 8.281[1,    13] loss: 8.915[1,    14] loss: 9.641[1,    15] loss: 10.338[1,    16] loss: 11.062[1,    17] loss: 11.697Finished Training</code></pre><hr><h1 id="模型保存和加载"><a href="#模型保存和加载" class="headerlink" title="模型保存和加载"></a>模型保存和加载</h1><p><strong>1.仅保存模型参数</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch</code></pre><pre><code class="hljs python">torch.save(model.state_dict(), path) <span class="hljs-comment"># save</span>model.load_state_dict(torch.load(path)) <span class="hljs-comment"># load</span><span class="hljs-comment"># save</span>state = &#123;<span class="hljs-string">'model'</span>: model.state_dict(), <span class="hljs-string">'optimizer'</span>: optimizer.state_dict(), <span class="hljs-string">'epoch'</span>: epoch&#125;torch.save(state, path)<span class="hljs-comment"># load</span>checkpoint = torch.load(path)model.load_state_dict(checkpoint[<span class="hljs-string">'model'</span>])optimizer.load_state_dict(checkpoint[<span class="hljs-string">'optimizer'</span>])epoch = checkpoint([<span class="hljs-string">'epoch'</span>])</code></pre><p><strong>2.保存/加载整个模型</strong></p><pre><code class="hljs python">torch.save(model, path)model = torch.load(path)</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小贴士</title>
    <link href="/2020/04/03/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <url>/2020/04/03/%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p><strong>Q： Visual Studio 编译工程报错:error C4996: ‘strtok’: This function or variable may be unsafe. Consider using strtok_s instead</strong></p><p>工程属性 —&gt;C/C++ —&gt; 预处理器 —&gt; 预处理器定义,添加宏定义</p><pre><code class="hljs cpp">_CRT_SECURE_NO_WARNINGS</code></pre><hr><p><strong>Q： pthread.h中报错：C2011“timespec”:“struct”类型重定义</strong></p><p>tim.h已定义，pthread.h添加如下代码：</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> !defined( PTHREAD_H )</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTHREAD_H</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAVE_STRUCT_TIMESPEC</span></code></pre><p><strong>Q：Visual Studio 工程编译dll,接口的定义</strong></p><p>A：接口的头文件应如下声明：</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LIB_API __declspec(dllexport) <span class="hljs-comment">//导出函数</span></span><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> &#123;<span class="hljs-function">LIB_API <span class="hljs-keyword">char</span>*   <span class="hljs-title">say</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p><strong>Q：C++调用DLL</strong></p><ul><li><p>dll的创建</p><pre><code class="hljs c++"><span class="hljs-comment">//test.h</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> &#123;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>__declspec(dllexport) <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span>&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>  <span class="hljs-comment">// __cplusplus</span></span></code></pre><pre><code class="hljs c++"><span class="hljs-comment">//test.cpp</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"test.h"</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> a + b;&#125;</code></pre><p>编译上述工程为dll，即生成test.dll，并复制到调用该dll工程的编译目录</p></li><li><p>dll的使用</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-meta">#includ<span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*padd)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;HMODULE test = LoadLibrary(<span class="hljs-string">"test.dll"</span>);<span class="hljs-keyword">if</span> (test != <span class="hljs-literal">NULL</span>)&#123;padd add = (padd)GetProcAddress(test,<span class="hljs-string">"add"</span>);<span class="hljs-keyword">if</span> (add != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;&#125;&#125;&#125;</code></pre></li></ul><hr><p><strong>Q:cmake 简单编译命令</strong></p><pre><code class="hljs bash">sudo tar -zxvf <span class="hljs-built_in">test</span><span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span>sudo mkdir build<span class="hljs-built_in">cd</span> build/sudo cmake -DCMAKE_INSTALL_PREFIX=/home/<span class="hljs-built_in">test</span> .. <span class="hljs-comment">#安装目录</span>sudo make -j4 <span class="hljs-comment">#编译</span>sudo make install <span class="hljs-comment">#安装</span>sudo ldconfig <span class="hljs-comment">#更新软连接</span></code></pre><p><strong>Q: mac安装LLVM</strong></p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> <span class="hljs-built_in">where</span>-you-want-llvm-to-live$ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm$ <span class="hljs-built_in">cd</span> llvm/tools$ svn co http://llvm.org/svn/llvm-project/cfe/trunk clang$ <span class="hljs-built_in">cd</span> llvm/tools/clang/tools$ svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra$ <span class="hljs-built_in">cd</span> llvm/projects$ svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt$ <span class="hljs-built_in">cd</span> llvm$ mkdir build$ <span class="hljs-built_in">cd</span> build$ cmake -G <span class="hljs-string">"Unix Makefiles"</span> ..$ make$ make install</code></pre><p><strong>Q:cJSON的使用</strong></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"cJSON.h"</span></span>cJSON  *root = cJSON_CreateObject();cJSON  *bboxs = cJSON_CreateArray();<span class="hljs-keyword">char</span> *resultJson;cJSON_AddNumberToObject(root, <span class="hljs-string">"status"</span>, <span class="hljs-number">1</span>);cJSON_AddStringToObject(root, <span class="hljs-string">"msg"</span>, <span class="hljs-string">"detect ok"</span>);cJSON_AddItemToObject(root, <span class="hljs-string">"bboxs"</span>, bboxs);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;  cJSON  *bbox;  cJSON_AddItemToArray(bboxs, bbox = cJSON_CreateObject());  cJSON_AddNumberToObject(bbox, <span class="hljs-string">"score"</span>, <span class="hljs-number">99</span>);  cJSON_AddNumberToObject(bbox, <span class="hljs-string">"x"</span>, <span class="hljs-number">1</span>);  cJSON_AddNumberToObject(bbox, <span class="hljs-string">"y"</span>, <span class="hljs-number">2</span>);  cJSON_AddNumberToObject(bbox, <span class="hljs-string">"width"</span>, <span class="hljs-number">3</span>);  cJSON_AddNumberToObject(bbox, <span class="hljs-string">"height"</span>, <span class="hljs-number">4</span>);&#125;resultJson = cJSON_PrintUnformatted(result);</code></pre><p><strong>Q:c#调用dll</strong></p><p>note:若dll为X64,则c#应编译x64,否则报错</p><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Runtime.InteropServices;<span class="hljs-keyword">using</span> System.Text;<span class="hljs-keyword">using</span> System.Threading.Tasks;<span class="hljs-keyword">namespace</span> <span class="hljs-title">test</span>&#123;    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>    &#123;        [<span class="hljs-meta">DllImport(@<span class="hljs-meta-string">"facedetection.dll"</span>, EntryPoint = <span class="hljs-meta-string">"facedetect"</span>)</span>]        <span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> <span class="hljs-title">facedetect</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> src</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span>        &#123;            <span class="hljs-keyword">string</span> result = facedetect(<span class="hljs-string">"test.jpg"</span>);            Console.WriteLine(result);            Console.ReadKey();        &#125;    &#125; &#125;</code></pre><p><strong>Q：opencv Mat和byte互转</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">matToBytes</span><span class="hljs-params">(Mat <span class="hljs-built_in">image</span>)</span></span>&#123;   <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-built_in">image</span>.total() * <span class="hljs-built_in">image</span>.elemSize(); <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">size</span>];  <span class="hljs-comment">// you will have to delete[] that later</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">memcpy</span>(bytes, <span class="hljs-built_in">image</span>.data, <span class="hljs-built_in">size</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)); <span class="hljs-keyword">return</span> bytes;&#125;<span class="hljs-function">Mat <span class="hljs-title">bytesToMat</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* bytes,<span class="hljs-keyword">int</span> <span class="hljs-built_in">width</span>,<span class="hljs-keyword">int</span> <span class="hljs-built_in">height</span>)</span></span>&#123;    Mat <span class="hljs-built_in">image</span> = Mat(<span class="hljs-built_in">height</span>,<span class="hljs-built_in">width</span>,CV_8UC3,bytes).clone(); <span class="hljs-comment">// make a copy</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">image</span>;&#125;</code></pre><p><strong>Q:opencv Mat 转std::vector std::vector转std::string</strong></p><pre><code class="hljs c++">cv::Mat output = output.reshape(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">double</span>&gt; vetor = (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">double</span>&gt;)output;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">stringstream</span> ss;ss &lt;&lt; <span class="hljs-built_in">std</span>::setprecision(<span class="hljs-number">16</span>);<span class="hljs-comment">//精度设置</span><span class="hljs-built_in">std</span>::copy(<span class="hljs-built_in">vector</span>.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">vector</span>.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">std</span>::ostream_iterator&lt;<span class="hljs-keyword">double</span>&gt;(ss, <span class="hljs-string">","</span>));<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> values = ss.str();values.pop_back();<span class="hljs-comment">//去掉末尾多余的分隔符</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; values;<span class="hljs-function">Mat <span class="hljs-title">convertToMat</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str)</span> </span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">double</span>&gt; v;<span class="hljs-built_in">std</span>::<span class="hljs-function"><span class="hljs-built_in">stringstream</span> <span class="hljs-title">ss</span><span class="hljs-params">(str)</span></span>;ss &lt;&lt; <span class="hljs-built_in">std</span>::setprecision(<span class="hljs-number">16</span>);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> token;<span class="hljs-keyword">while</span> (<span class="hljs-built_in">std</span>::getline(ss, token, <span class="hljs-string">','</span>)) &#123;v.push_back(<span class="hljs-built_in">std</span>::stod(token));&#125;Mat output = cv::Mat(v, <span class="hljs-literal">true</span>).reshape(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> output;&#125;cv::<span class="hljs-function">FileStorage <span class="hljs-title">fs</span><span class="hljs-params">(<span class="hljs-string">"../features.xml"</span>, cv::FileStorage::WRITE)</span></span>;fs &lt;&lt; <span class="hljs-string">"features"</span> &lt;&lt; output;fs.<span class="hljs-built_in">release</span>();</code></pre><p><strong>Q: opencv 截取图片的矩形区域</strong></p><pre><code class="hljs c++">rectangle(<span class="hljs-built_in">image</span>, Rect(x, y, w, h), Scalar(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>);Mat dst = <span class="hljs-built_in">image</span>(cv::Range(y,y+h),cv::Range(x,x+w));</code></pre><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><strong>Q：python打包发布</strong></p><p>1.项目根目录新建setup.py</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> distutils.core <span class="hljs-keyword">import</span> setupsetup( name=<span class="hljs-string">'test'</span>,  <span class="hljs-comment">#打包的输出文件名</span> version=<span class="hljs-string">'1.0.0'</span>, py_modules=[<span class="hljs-string">'test'</span>] <span class="hljs-comment">#打包的.py文件</span>)</code></pre><p>依赖文件 requirements.txt生成</p><p>pip freeze &gt; requirements.txt</p><pre><code class="hljs text">opencv&#x3D;&#x3D;3.4.2numpy&#x3D;&#x3D;1.16.4scikit-image&#x3D;&#x3D;0.15.0</code></pre><p>或者 conda list -e &gt; requirements.txt</p><pre><code class="hljs text">numpy&#x3D;1.16.4opencv&#x3D;3.4.2scikit-image&#x3D;0.15.0</code></pre><p>2.项目根目录下执行命令</p><pre><code class="hljs bash">sudo python setup.py sdist</code></pre><p>生成dist目录且包含test-1.0.0.tar.gz分发包</p><p>3.安装：解压分发包并定位到解压目录后执行安装命令</p><pre><code class="hljs bash">pip install -r requirements.txt <span class="hljs-comment">#安装依赖 或者 conda install --yes --file requirements.txt</span>sudo python setup.py install</code></pre><p>4.使用</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> testtest.sayHello();//<span class="hljs-comment">#调用模块的sayHello方法</span></code></pre><p><strong>Q:jupyter notebook 运行于指定的conda环境上</strong></p><pre><code class="hljs bash">conda install nb_conda <span class="hljs-comment">#重启jupyter notebook 选择kernel即可</span></code></pre><p><strong>Q:设置jupyter notebook可远程访问</strong></p><pre><code class="hljs bash">$ jupyter notebook --generate-configWriting default config to: /home/adminpc/.jupyter/jupyter_notebook_config.py$ jupyter notebook passwordEnter password: Verify password: [NotebookPasswordApp] Wrote hashed password to /home/adminpc/.jupyter/jupyter_notebook_config.json$ vim /home/adminpc/.jupyter/jupyter_notebook_config.pyc.NotebookApp.ip=<span class="hljs-string">'*'</span><span class="hljs-comment"># 密钥位于adminpc/.jupyter/jupyter_notebook_config.json</span>c.NotebookApp.password = <span class="hljs-string">'sha1:0f0fe326cb63:0e48570b0b0952dfe72fefb7bd012934968ea428'</span>c.NotebookApp.open_browser = Falsec.NotebookApp.port =8888 $ jupyter notebook [I 14:14:05.933 NotebookApp] Serving notebooks from <span class="hljs-built_in">local</span> directory: /home/adminpc/jiaopan/projects[I 14:14:05.933 NotebookApp] The Jupyter Notebook is running at:[I 14:14:05.933 NotebookApp] http://admin-pc:8888/[I 14:14:05.933 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</code></pre><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p><strong>Q：iframe父/子页面互相调用方法</strong></p><pre><code class="hljs html">document.getElementById("iframeId").contentWindow.childMethod()/childVariable;parent.parentMethod()/parentVariable</code></pre><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><strong>Q：springboot切面编程实例</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebLogAspect</span> </span>&#123;<span class="hljs-comment">//定义一个切入点，对该包下的所有函数方法执行前，执行@Before()</span>    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"execution(public * com.jp.controller..*.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">webLog</span><span class="hljs-params">()</span></span>&#123;&#125;    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"webLog()"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        <span class="hljs-comment">// 接收到请求，记录请求内容</span>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        <span class="hljs-comment">// 记录下请求内容</span>        log.info(<span class="hljs-string">"URL : "</span> + request.getRequestURL().toString());        log.info(<span class="hljs-string">"HTTP_METHOD : "</span> + request.getMethod());        log.info(<span class="hljs-string">"IP : "</span> + request.getRemoteAddr());        log.info(<span class="hljs-string">"CLASS_METHOD : "</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="hljs-string">"."</span> + joinPoint.getSignature().getName());        log.info(<span class="hljs-string">"ARGS : "</span> + Arrays.toString(joinPoint.getArgs()));    &#125;    <span class="hljs-meta">@AfterReturning</span>(returning = <span class="hljs-string">"ret"</span>, pointcut = <span class="hljs-string">"webLog()"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterReturning</span><span class="hljs-params">(Object ret)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        <span class="hljs-comment">// 处理完请求，返回内容</span>        log.info(<span class="hljs-string">"RESPONSE : "</span> + ret);    &#125;&#125;</code></pre><p><strong>Q：Mac，MavenReportException: Error while creating archive: Unable to find javadoc command: The environment variable JAVA_HOME is not correctly set</strong></p><p>在pom.xml文件中添加javadoc命令的位置</p><pre><code class="hljs dts"><span class="hljs-params">&lt;properties&gt;</span> <span class="hljs-params">&lt;javadocExecutable&gt;</span>/Library/Java/JavaVirtualMachines/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_151.jdk/Contents/Home<span class="hljs-meta-keyword">/bin/</span>javadoc<span class="hljs-params">&lt;/javadocExecutable&gt;</span><span class="hljs-params">&lt;/properties&gt;</span></code></pre><p><strong>Q：maven引入本地依赖</strong></p><pre><code class="hljs dts"><span class="hljs-params">&lt;dependency&gt;</span>    <span class="hljs-params">&lt;groupId&gt;</span>com.oracle<span class="hljs-params">&lt;/groupId&gt;</span>    <span class="hljs-params">&lt;artifactId&gt;</span>ojdbc6<span class="hljs-params">&lt;/artifactId&gt;</span>    <span class="hljs-params">&lt;scope&gt;</span>system<span class="hljs-params">&lt;/scope&gt;</span>    <span class="hljs-params">&lt;version&gt;</span><span class="hljs-number">1.0</span><span class="hljs-params">&lt;/version&gt;</span>    <span class="hljs-params">&lt;systemPath&gt;</span>$&#123;basedir&#125;<span class="hljs-meta-keyword">/lib/</span>ojdbc6<span class="hljs-number">-11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>.jar<span class="hljs-params">&lt;/systemPath&gt;</span><span class="hljs-params">&lt;/dependency&gt;</span><span class="hljs-params">&lt;build&gt;</span>    <span class="hljs-params">&lt;plugins&gt;</span>    <span class="hljs-params">&lt;plugin&gt;</span>    <span class="hljs-params">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-params">&lt;/groupId&gt;</span>    <span class="hljs-params">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="hljs-params">&lt;/artifactId&gt;</span>    <span class="hljs-params">&lt;configuration&gt;</span>    <span class="hljs-params">&lt;includeSystemScope&gt;</span>true<span class="hljs-params">&lt;/includeSystemScope&gt;</span>    <span class="hljs-params">&lt;mainClass&gt;</span>mainclass<span class="hljs-params">&lt;/mainClass&gt;</span>    <span class="hljs-params">&lt;/configuration&gt;</span>    <span class="hljs-params">&lt;/plugin&gt;</span>    <span class="hljs-params">&lt;/plugins&gt;</span><span class="hljs-params">&lt;/build&gt;</span></code></pre><p><strong>Q：普通maven项目打包配置</strong></p><pre><code class="hljs java">&lt;build&gt;   &lt;plugins&gt;    &lt;plugin&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;version&gt;2.3.2&lt;/version&gt;     &lt;configuration&gt;         &lt;source&gt;1.8&lt;/source&gt;         &lt;target&gt;1.8&lt;/target&gt;     &lt;/configuration&gt;  &lt;/plugin&gt;  &lt;plugin&gt;        &lt;artifactId&gt; maven-assembly-plugin&lt;/artifactId&gt;        &lt;configuration&gt;             &lt;descriptorRefs&gt;             &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;             &lt;/descriptorRefs&gt;             &lt;archive&gt;                  &lt;manifest&gt;                       &lt;mainClass&gt;jiaopaner.spark.learning.App&lt;/mainClass&gt;                  &lt;/manifest&gt;             &lt;/archive&gt;        &lt;/configuration&gt;        &lt;executions&gt;             &lt;execution&gt;                  &lt;id&gt;make-assembly&lt;/id&gt;                  &lt;phase&gt;package&lt;/phase&gt;                  &lt;goals&gt;                       &lt;goal&gt;single&lt;/goal&gt;                  &lt;/goals&gt;             &lt;/execution&gt;        &lt;/executions&gt;   &lt;/plugin&gt; &lt;/plugins&gt;  &lt;/build&gt;</code></pre><p><strong>Q:springboot-kafka集群</strong></p><pre><code class="hljs bash"><span class="hljs-comment"># 显示启动</span>./bin/kafka-server-start.sh ./config/server.properties<span class="hljs-comment"># 在后台启动</span>./bin/kafka-server-start.sh -daemon ./config/server.properties<span class="hljs-comment">#创建topic</span><span class="hljs-comment"># --create：表示创建</span><span class="hljs-comment"># --zookeeper 后面的参数是zk的集群节点</span><span class="hljs-comment"># --replication-factor 3 ：表示复本数</span><span class="hljs-comment"># --partitions 3：表示分区数</span><span class="hljs-comment"># --topic test：表示topic的主题名称</span>./bin/kafka-topics.sh --create --zookeeper server01:2181,server02:2181,server03:2181 --replication-factor 3 --partitions 3 --topic <span class="hljs-built_in">test</span><span class="hljs-comment">#查看topic</span>./bin/kafka-topics.sh --list --zookeeper server01:2181<span class="hljs-comment">#删除topic</span>./bin/kafka-topics.sh --delete --zookeeper server01:2181 --topic <span class="hljs-built_in">test</span><span class="hljs-comment">#生产者命令</span>/bin/kafka-console-producer.sh --broker-list server01:9092 --topic <span class="hljs-built_in">test</span><span class="hljs-comment">#消费者命令</span>/bin/kafka-console-consumer.sh --zookeeper server01:2181 --from-beginning --topic <span class="hljs-built_in">test</span></code></pre><p><strong>Q:maven dependency scope设置</strong></p><ul><li>provided:编译和测试阶段依赖</li></ul><pre><code class="hljs bash">&lt;dependency&gt;    &lt;groupId&gt;org.jiaoper/groupId&gt;    &lt;artifactId&gt;utils-common&lt;/artifactId&gt;    &lt;version&gt;3.0-alpha-1&lt;/version&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><ul><li>test:测试阶段依赖</li></ul><pre><code class="hljs bash">&lt;dependency&gt;    &lt;groupId&gt;org.jiaoper/groupId&gt;    &lt;artifactId&gt;utils-common&lt;/artifactId&gt;    &lt;version&gt;3.0-alpha-1&lt;/version&gt;    &lt;scope&gt;<span class="hljs-built_in">test</span>&lt;/scope&gt;&lt;/dependency&gt;</code></pre><ul><li>compile:编译、测试和运行阶段依赖(默认)</li></ul><pre><code class="hljs bash">&lt;dependency&gt;    &lt;groupId&gt;org.jiaoper/groupId&gt;    &lt;artifactId&gt;utils-common&lt;/artifactId&gt;    &lt;version&gt;3.0-alpha-1&lt;/version&gt;    &lt;scope&gt;complie&lt;/scope&gt;&lt;/dependency&gt;</code></pre><hr><h1 id="运维-linux"><a href="#运维-linux" class="headerlink" title="运维/linux"></a>运维/linux</h1><p><strong>Q：利用nginx共享文件夹</strong></p><p>nginx.conf添加如下配置</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">8000</span>;    <span class="hljs-attribute">server_name</span>  localhost;    <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;    <span class="hljs-attribute">location</span> / &#123;    <span class="hljs-attribute">root</span> /home;<span class="hljs-comment">#共享根目录下的home文件夹</span>    <span class="hljs-comment"># 索引</span>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;    <span class="hljs-comment"># 显示文件大小</span>    <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">on</span>;    <span class="hljs-comment"># 显示文件时间</span>    <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;    <span class="hljs-comment">#index  index.html index.htm;</span>  &#125;&#125;</code></pre><p><strong>Q:更改ubuntu源为阿里云源</strong></p><pre><code class="hljs bash">sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo vim /etc/apt/source.listdeb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="hljs-comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="hljs-comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="hljs-comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="hljs-comment">#Added by software-properties</span>deb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="hljs-comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverseapt-get update <span class="hljs-comment">#or</span>mv /etc/apt/sources.list /etc/apt/sources.list.bak<span class="hljs-built_in">echo</span> <span class="hljs-string">"deb http://mirrors.163.com/debian/ jessie main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list<span class="hljs-built_in">echo</span> <span class="hljs-string">"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list<span class="hljs-built_in">echo</span> <span class="hljs-string">"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list<span class="hljs-built_in">echo</span> <span class="hljs-string">"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.listapt-get update</code></pre><p><strong>Q:oracle导入dmp备份文件</strong></p><pre><code class="hljs routeros">[root@centos ～]# su - oracle[oracle@centos ～]# sqlplus 请输入用户名:  sys as sysdba输入口令:SQL&gt; CREATE<span class="hljs-built_in"> USER </span>用户 IDENTIFIED BY 密码;<span class="hljs-built_in">User </span>created.SQL&gt; GRANT CONNECT, RESOURCE, DBA <span class="hljs-keyword">TO</span> 用户;Grant succeeded.SQL&gt; CONNECT 用户@orcl #新用户测试登陆</code></pre><p>复制*.dmp文件到linux并加权</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>centos ～]# chmod <span class="hljs-number">777</span> *.dmp</code></pre><p>导入dmp数据库备份文件</p><pre><code class="hljs routeros">[root@centos ～] su - oracle[oracle@centos ～]imp 用户名/密码@orcl <span class="hljs-attribute">file</span>=/home/*.dmp <span class="hljs-attribute">ignore</span>=y <span class="hljs-attribute">full</span>=y; Import terminated successfully with warnings.(成功)</code></pre><p><strong>Q：scp文件/目录上传/下载</strong></p><pre><code class="hljs java">#本地上传到远程#文件scp /root/test.json root@远程服务器ip:/usr/local/src#目录scp -r /home/testdir root@:远程服务器ip:/home/testdir#远程下载到本地#文件scp root@远程服务器ip:/usr/local/src/test.json /root/#目录scp -r root@:远程服务器ip:/home/testdir /home/</code></pre><p><strong>Q：Ubuntu增加swap交换空间</strong></p><pre><code class="hljs bash">$ free -m <span class="hljs-comment">#查看分区大小</span>$ dd <span class="hljs-keyword">if</span>=/dev/zero of=/swapfile bs=1M count=3k <span class="hljs-comment">#创建count*bs大小的swap文件</span>$ mkswap /swapfile <span class="hljs-comment">#创建swap空间</span>$ swapon /swapfile <span class="hljs-comment">#设置分区有效 ,swapoff 设置分区无效</span>$ vim /etc/fstab <span class="hljs-comment">#开启启动：添加/swapfile swap swap defaults 0 0</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小贴士</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积操作汇总</title>
    <link href="/2020/03/31/convolution/"/>
    <url>/2020/03/31/convolution/</url>
    
    <content type="html"><![CDATA[<p><strong>概念</strong><br>1.卷积核(Kernel)：滤波矩阵，普遍的卷积核大小为3×3、5×5;<br>2.步长(Stride)：卷积核遍历特征图时每步移动的像素个数;<br>3.填充(Padding)：对特征图边界外进行填充（一般填充为0）;<br>4.通道(Channel)：卷积层的通道数（层数）;<br><img src="/images/dp-net/convolution1.gif" srcset="/images/loading.gif" alt=""><br><img src="/images/dp-net/convolution2.jpg" srcset="/images/loading.gif" alt=""></p><h1 id="标准卷积"><a href="#标准卷积" class="headerlink" title="标准卷积"></a>标准卷积</h1><p><strong>单通道</strong><br><img src="/images/dp-net/convolution3.gif" srcset="/images/loading.gif" alt=""><br><strong>多通道</strong><br><img src="/images/dp-net/convolution4.gif" srcset="/images/loading.gif" alt=""><br><img src="/images/dp-net/convolution5.gif" srcset="/images/loading.gif" alt=""></p><h1 id="3维卷积"><a href="#3维卷积" class="headerlink" title="3维卷积"></a>3维卷积</h1><p><img src="/images/dp-net/convolution6.gif" srcset="/images/loading.gif" alt=""></p><h1 id="1x1卷积"><a href="#1x1卷积" class="headerlink" title="1x1卷积"></a>1x1卷积</h1><p><img src="/images/dp-net/convolution7.jpg" srcset="/images/loading.gif" alt=""></p><h1 id="反卷积（转置卷积）"><a href="#反卷积（转置卷积）" class="headerlink" title="反卷积（转置卷积）"></a>反卷积（转置卷积）</h1><p>将卷积核转换为稀疏矩阵后进行转置计算<br><br>如下图，在2x2的输入图像上应用步长为1、边界全0填充的3x3卷积核，进行转置卷积（反卷积）计算<br><br><img src="/images/dp-net/convolution8.gif" srcset="/images/loading.gif" alt=""></p><h1 id="空洞卷积（膨胀卷积）"><a href="#空洞卷积（膨胀卷积）" class="headerlink" title="空洞卷积（膨胀卷积）"></a>空洞卷积（膨胀卷积）</h1><p><img src="/images/dp-net/convolution9.gif" srcset="/images/loading.gif" alt=""></p><h1 id="可分离卷积（Separable-Convolutions）"><a href="#可分离卷积（Separable-Convolutions）" class="headerlink" title="可分离卷积（Separable Convolutions）"></a>可分离卷积（Separable Convolutions）</h1><p>将卷积核分解为两项独立的核分别进行操作<br><img src="/images/dp-net/convolution10.jpg" srcset="/images/loading.gif" alt=""><br><br>分解后的卷积计算过程如下图，先用3x1的卷积核作横向扫描计算，再用1x3的卷积核作纵向扫描计算<br><img src="/images/dp-net/convolution11.jpg" srcset="/images/loading.gif" alt=""><br></p><h1 id="深度可分离卷积（Depthwise-Separable-Convolutions）"><a href="#深度可分离卷积（Depthwise-Separable-Convolutions）" class="headerlink" title="深度可分离卷积（Depthwise Separable Convolutions）"></a>深度可分离卷积（Depthwise Separable Convolutions）</h1><p>3个卷积核分别对输入层的3个通道作卷积计算并堆叠在一起<br><br><img src="/images/dp-net/convolution12.jpg" srcset="/images/loading.gif" alt=""><br><br>再使用1x1的卷积（3个通道）进行计算，得到只有1个通道的结果<br><br><img src="/images/dp-net/convolution13.jpg" srcset="/images/loading.gif" alt=""><br><br>重复多次1x1的卷积操作（如下图为128次）<br><br><img src="/images/dp-net/convolution14.jpg" srcset="/images/loading.gif" alt=""><br><br><img src="/images/dp-net/convolution15.jpg" srcset="/images/loading.gif" alt=""><br></p><h1 id="分组卷积（Grouped-Convolution）"><a href="#分组卷积（Grouped-Convolution）" class="headerlink" title="分组卷积（Grouped Convolution）"></a>分组卷积（Grouped Convolution）</h1><p>在分组卷积中，卷积核被分成不同的组，每组负责对相应的输入层进行卷积计算，最后再进行合并<br><br><img src="/images/dp-net/convolution16.jpg" srcset="/images/loading.gif" alt=""><br></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>elasticsearch 教程</title>
    <link href="/2019/12/30/elasticsearch%20%E6%95%99%E7%A8%8B/"/>
    <url>/2019/12/30/elasticsearch%20%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch-教程"><a href="#elasticsearch-教程" class="headerlink" title="elasticsearch 教程"></a>elasticsearch 教程</h1><p><img src="/images/elasticsearch/1.jpg" srcset="/images/loading.gif" alt=""></p><h2 id="安装、启动、测试"><a href="#安装、启动、测试" class="headerlink" title="安装、启动、测试"></a>安装、启动、测试</h2><p>elasticsearch下载地址:<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>kibana下载地址:<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></p><p><strong>启动</strong></p><pre><code class="hljs bash">./elasticsearch-7.5.1/bin/elasticsearch <span class="hljs-comment">#浏览器访问：localhost:9200</span></code></pre><pre><code class="hljs bash">&#123;  <span class="hljs-string">"name"</span> : <span class="hljs-string">"jiaopandeMacBook-Pro.local"</span>,  <span class="hljs-string">"cluster_name"</span> : <span class="hljs-string">"elasticsearch"</span>,  <span class="hljs-string">"cluster_uuid"</span> : <span class="hljs-string">"5vku_94_SjevMGVYIo3RYg"</span>,  <span class="hljs-string">"version"</span> : &#123;    <span class="hljs-string">"number"</span> : <span class="hljs-string">"7.5.1"</span>,    <span class="hljs-string">"build_flavor"</span> : <span class="hljs-string">"default"</span>,    <span class="hljs-string">"build_type"</span> : <span class="hljs-string">"tar"</span>,    <span class="hljs-string">"build_hash"</span> : <span class="hljs-string">"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96"</span>,    <span class="hljs-string">"build_date"</span> : <span class="hljs-string">"2019-12-16T22:57:37.835892Z"</span>,    <span class="hljs-string">"build_snapshot"</span> : <span class="hljs-literal">false</span>,    <span class="hljs-string">"lucene_version"</span> : <span class="hljs-string">"8.3.0"</span>,    <span class="hljs-string">"minimum_wire_compatibility_version"</span> : <span class="hljs-string">"6.8.0"</span>,    <span class="hljs-string">"minimum_index_compatibility_version"</span> : <span class="hljs-string">"6.0.0-beta1"</span>  &#125;,  <span class="hljs-string">"tagline"</span> : <span class="hljs-string">"You Know, for Search"</span>&#125;</code></pre><p>配置kibana-7.5.1-darwin-x86_64/config/kibana.yml</p><pre><code class="hljs bash">server.host: <span class="hljs-string">"localhost"</span>elasticsearch.hosts: [<span class="hljs-string">"http://localhost:9200"</span>]</code></pre><pre><code class="hljs bash">./kibana-7.5.1-darwin-x86_64/bin/kibana <span class="hljs-comment">#浏览器访问：localhost:5601</span></code></pre><p><img src="/images/elasticsearch/2.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>测试</strong><br>kibana Dev Tools</p><p><img src="/images/elasticsearch/3.jpg" srcset="/images/loading.gif" alt=""></p><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p><strong>创建索引</strong></p><pre><code class="hljs bash">PUT http://127.0.0.1:9200/test_index</code></pre><p><strong>删除索引</strong></p><pre><code class="hljs bash">DELETE http://127.0.0.1:9200/test_index</code></pre><p><strong>索引别名</strong></p><pre><code class="hljs bash">POST _aliases&#123;    <span class="hljs-string">"actions"</span>: [        &#123; <span class="hljs-string">"add"</span> : &#123; <span class="hljs-string">"index"</span> : <span class="hljs-string">"test_index"</span>, <span class="hljs-string">"alias"</span> : <span class="hljs-string">"test"</span> &#125; &#125;    ]&#125;</code></pre><p><strong>索引迁移</strong></p><pre><code class="hljs bash">POST _reindex&#123;    <span class="hljs-string">"source"</span>: &#123;        <span class="hljs-string">"index"</span>: <span class="hljs-string">"test_index"</span>    &#125;,    <span class="hljs-string">"dest"</span>: &#123;        <span class="hljs-string">"index"</span>: <span class="hljs-string">"test_index_v2"</span>    &#125;&#125;POST _aliases&#123;    <span class="hljs-string">"actions"</span>: [        &#123; <span class="hljs-string">"remove"</span> : &#123; <span class="hljs-string">"index"</span> : <span class="hljs-string">"test_index"</span>, <span class="hljs-string">"alias"</span> : <span class="hljs-string">"test"</span> &#125; &#125;,        &#123; <span class="hljs-string">"add"</span> : &#123; <span class="hljs-string">"index"</span> : <span class="hljs-string">"test_index_v2"</span>, <span class="hljs-string">"alias"</span> : <span class="hljs-string">"test_v2"</span> &#125; &#125;    ]&#125;</code></pre><p><strong>索引mapping设置</strong></p><pre><code class="hljs bash">PUT /dyw_index_v2&#123;  <span class="hljs-string">"settings"</span>: &#123;    <span class="hljs-string">"analysis"</span>: &#123;      <span class="hljs-string">"analyzer"</span>: &#123;        <span class="hljs-string">"default"</span>: &#123;          <span class="hljs-string">"type"</span>: <span class="hljs-string">"ik_max_word"</span>        &#125;      &#125;    &#125;  &#125;,  <span class="hljs-string">"mappings"</span>: &#123;    <span class="hljs-string">"properties"</span>: &#123;      <span class="hljs-string">"type"</span>:&#123;        <span class="hljs-string">"type"</span>: <span class="hljs-string">"keyword"</span>      &#125;,      <span class="hljs-string">"tags"</span>:&#123;        <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span>       &#125;,      <span class="hljs-string">"content"</span>:&#123;        <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span>,        <span class="hljs-string">"boost"</span>: 2      &#125;,      <span class="hljs-string">"suggest"</span> : &#123;        <span class="hljs-string">"type"</span> : <span class="hljs-string">"completion"</span>,        <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_max_word"</span>      &#125;,      <span class="hljs-string">"update_time"</span>:&#123;            <span class="hljs-string">"type"</span>: <span class="hljs-string">"date"</span>,            <span class="hljs-string">"format"</span>: [<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>]      &#125;,      <span class="hljs-string">"location"</span>:&#123;            <span class="hljs-string">"type"</span>: <span class="hljs-string">"geo_point"</span>      &#125;,      <span class="hljs-string">"join"</span>:&#123;        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,        <span class="hljs-string">"properties"</span>: &#123;          <span class="hljs-string">"id"</span>:&#123;            <span class="hljs-string">"type"</span>:<span class="hljs-string">"keyword"</span>          &#125;,          <span class="hljs-string">"content"</span>:&#123;            <span class="hljs-string">"type"</span>:<span class="hljs-string">"text"</span>          &#125;        &#125;      &#125;,      <span class="hljs-string">"extra"</span>:&#123;        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,        <span class="hljs-string">"properties"</span>: &#123;          <span class="hljs-string">"scene"</span>:&#123;            <span class="hljs-string">"type"</span>: <span class="hljs-string">"nested"</span>,            <span class="hljs-string">"properties"</span>: &#123;                <span class="hljs-string">"id"</span>:&#123;                  <span class="hljs-string">"type"</span>: <span class="hljs-string">"keyword"</span>                &#125;,                <span class="hljs-string">"position"</span>:&#123;                  <span class="hljs-string">"type"</span>: <span class="hljs-string">"integer"</span>                &#125;             &#125;          &#125;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p><h2 id="安装中文分词"><a href="#安装中文分词" class="headerlink" title="安装中文分词"></a>安装中文分词</h2><pre><code class="hljs bash">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.1/elasticsearch-analysis-ik-7.5.1.zip</code></pre><h2 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h2><p><strong>pom依赖</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><strong>客户端</strong></p><pre><code class="hljs java"><span class="hljs-comment">/** * <span class="hljs-doctag">@author</span> 作者 jiaopan: * <span class="hljs-doctag">@version</span> 创建时间：Feb 10, 2020 11:09:05 AM * 类说明 */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESClient</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> RestHighLevelClient client;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RestHighLevelClient <span class="hljs-title">instance</span><span class="hljs-params">(EsConfigValue config)</span> </span>&#123;      <span class="hljs-keyword">if</span> (client == <span class="hljs-keyword">null</span>) &#123;          <span class="hljs-keyword">synchronized</span> (RestHighLevelClient<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;          <span class="hljs-keyword">if</span> (client == <span class="hljs-keyword">null</span>) &#123;          <span class="hljs-keyword">final</span> CredentialsProvider credentialsProvider = <span class="hljs-keyword">new</span> BasicCredentialsProvider();        credentialsProvider.setCredentials(AuthScope.ANY, <span class="hljs-keyword">new</span> UsernamePasswordCredentials(config.getUsername(),config.getPassword()));        client = <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="hljs-keyword">new</span> HttpHost(config.getIp(),config.getPort(), <span class="hljs-string">"http"</span>))         .setHttpClientConfigCallback(<span class="hljs-keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> HttpAsyncClientBuilder <span class="hljs-title">customizeHttpClient</span><span class="hljs-params">(HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;httpClientBuilder.disableAuthCaching();<span class="hljs-keyword">return</span> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);&#125;        &#125;));        &#125;          &#125;      &#125;      <span class="hljs-keyword">return</span> client;      &#125;      <span class="hljs-comment">/*    public static RestHighLevelClient instance(EsConfigValue config) &#123;      if (client == null) &#123;          synchronized (RestHighLevelClient.class) &#123;          if (client == null) &#123;          client = new RestHighLevelClient(RestClient.builder(new HttpHost(config.getIp(),config.getPort(), "http")));        &#125;          &#125;      &#125;      return client;      &#125;     */</span>&#125;</code></pre><p><strong> base apis</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">isExist</span><span class="hljs-params">(String index, String id,String routing)</span> </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);GetRequest request = <span class="hljs-keyword">new</span> GetRequest(index).id(id);request.fetchSourceContext(<span class="hljs-keyword">new</span> FetchSourceContext(<span class="hljs-keyword">false</span>));request.storedFields(<span class="hljs-string">"_none_"</span>);request.routing(routing);<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> client.exists(request, RequestOptions.DEFAULT);&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">get</span><span class="hljs-params">(String index, String id,String routing)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);GetRequest request = <span class="hljs-keyword">new</span> GetRequest(esConfig.getIndex(), id);request.routing(routing);GetResponse getResponse = client.get(request, RequestOptions.DEFAULT);Map&lt;String, Object&gt; doc = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<span class="hljs-keyword">if</span>(getResponse.isExists()) &#123;doc = getResponse.getSourceAsMap();doc.put(<span class="hljs-string">"id"</span>,getResponse.getId());&#125;<span class="hljs-keyword">return</span> doc;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> SearchResponse <span class="hljs-title">getByIds</span><span class="hljs-params">(List&lt;String&gt; ids)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(esConfig.getIndex()); SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder(); BoolQueryBuilder booleanQueryBuilder = QueryBuilders.boolQuery();IdsQueryBuilder idsQueryBuilder = QueryBuilders.idsQuery();idsQueryBuilder.ids().addAll(ids);booleanQueryBuilder.must(idsQueryBuilder);<span class="hljs-comment">/*构建查询*/</span>searchSourceBuilder.from(<span class="hljs-number">0</span>);searchSourceBuilder.size(ids.size());searchSourceBuilder.query(booleanQueryBuilder); searchRequest.source(searchSourceBuilder);SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<span class="hljs-keyword">return</span> searchResponse;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createOrUpdate</span><span class="hljs-params">(String index, String id,String routing,JSONObject item,Boolean bulk)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);GetRequest request = <span class="hljs-keyword">new</span> GetRequest(esConfig.getIndex(), id);request.routing(routing);JSONObject doc = <span class="hljs-keyword">new</span> JSONObject();GetResponse getResponse = client.get(request, RequestOptions.DEFAULT);<span class="hljs-keyword">if</span>(getResponse.isExists()) &#123;Map&lt;String, Object&gt; source = getResponse.getSourceAsMap();JSONObject content = JSONObject.parseObject(source.get(<span class="hljs-string">"content"</span>).toString());item.keySet().forEach(key-&gt;&#123;content.put(key,item.get(key));&#125;);doc = <span class="hljs-keyword">this</span>.createDocSource(content,routing,<span class="hljs-keyword">true</span>);&#125;<span class="hljs-keyword">else</span>doc = <span class="hljs-keyword">this</span>.createDocSource(item,routing,<span class="hljs-keyword">false</span>);<span class="hljs-keyword">if</span>(bulk)<span class="hljs-keyword">this</span>.bulkUpdate(index, id, doc, <span class="hljs-keyword">true</span>, routing);<span class="hljs-keyword">else</span><span class="hljs-keyword">this</span>.update(index, id, doc, <span class="hljs-keyword">true</span>,routing);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String index, String id,String routing)</span> </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);DeleteRequest request = <span class="hljs-keyword">new</span> DeleteRequest(index, id);request.routing(routing);client.deleteAsync(request, RequestOptions.DEFAULT, <span class="hljs-keyword">new</span> ActionListener&lt;DeleteResponse&gt;() &#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(DeleteResponse response)</span> </span>&#123;<span class="hljs-keyword">if</span> (response.getResult() == DocWriteResponse.Result.DELETED) &#123;logger.info(<span class="hljs-string">"delete&gt;&gt;&gt;"</span>+<span class="hljs-string">"&#123;\"id\":\""</span>+id+<span class="hljs-string">"\",\"type\":\""</span>+routing+<span class="hljs-string">"\"&#125;"</span>);&#125;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Exception e)</span> </span>&#123;logger.info(<span class="hljs-string">"delete fail&gt;&gt;&gt;"</span>+<span class="hljs-string">"&#123;\"id\":\""</span>+id+<span class="hljs-string">"\",\"type\":\""</span>+routing+<span class="hljs-string">"\"&#125;"</span>);&#125;&#125;);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String index, String id, JSONObject item,Boolean upsert,String routing)</span> </span>&#123;<span class="hljs-keyword">if</span>(item == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span>;&#125;RestHighLevelClient client = ESClient.instance(esConfig);UpdateRequest request = <span class="hljs-keyword">new</span> UpdateRequest(index,id).doc(item); request.docAsUpsert(upsert);request.retryOnConflict(<span class="hljs-number">3</span>);request.routing(routing);client.updateAsync(request, RequestOptions.DEFAULT, <span class="hljs-keyword">new</span> ActionListener&lt;UpdateResponse&gt;() &#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(UpdateResponse response)</span> </span>&#123;<span class="hljs-keyword">if</span> (response.getResult() == DocWriteResponse.Result.CREATED) &#123;logger.info(<span class="hljs-string">"created&gt;&gt;&gt;"</span>+<span class="hljs-string">"&#123;\"id\":\""</span>+id+<span class="hljs-string">"\",\"type\":\""</span>+routing+<span class="hljs-string">"\"&#125;"</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.getResult() == DocWriteResponse.Result.UPDATED) &#123;logger.info(<span class="hljs-string">"updated&gt;&gt;&gt;"</span>+<span class="hljs-string">"&#123;\"id\":\""</span>+id+<span class="hljs-string">"\",\"type\":\""</span>+routing+<span class="hljs-string">"\"&#125;"</span>);&#125;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Exception e)</span> </span>&#123;logger.warn(<span class="hljs-string">"not_store_record("</span>+e.getMessage()+<span class="hljs-string">")&gt;&gt;&gt;"</span>+item.toJSONString());&#125;&#125;);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bulkUpdate</span><span class="hljs-params">(String index, String id, JSONObject item,Boolean upsert,String routing)</span> </span>&#123;<span class="hljs-keyword">if</span>(item == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span>;&#125;UpdateRequest request = <span class="hljs-keyword">new</span> UpdateRequest(index,id).doc(item); request.docAsUpsert(upsert);request.retryOnConflict(<span class="hljs-number">3</span>);request.routing(routing);queue.offer(request);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bulk</span><span class="hljs-params">(ConcurrentLinkedQueue&lt;UpdateRequest&gt; queue, RestHighLevelClient client)</span> </span>&#123;BulkRequest bulk = <span class="hljs-keyword">new</span> BulkRequest();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; esConfig.getBulk(); i++) &#123;<span class="hljs-keyword">if</span>(queue.isEmpty()) <span class="hljs-keyword">break</span>;bulk.add(queue.poll());&#125;<span class="hljs-keyword">if</span>(bulk.numberOfActions() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;logger.info(DateUtils.getNowDate()+<span class="hljs-string">":starting handle doc queue,actions:"</span>+bulk.numberOfActions());client.bulkAsync(bulk, RequestOptions.DEFAULT, <span class="hljs-keyword">new</span> ActionListener&lt;BulkResponse&gt;() &#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(BulkResponse response)</span> </span>&#123;<span class="hljs-keyword">if</span>(response.hasFailures())logger.info(response.buildFailureMessage());&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Exception e)</span> </span>&#123;logger.warn(<span class="hljs-string">"bulk handle docs error:"</span>+e.getMessage());&#125;&#125;);&#125;</code></pre><p><strong>Common apis</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">locationSearch</span><span class="hljs-params">(SearchSourceBuilder searchSourceBuilder, BoolQueryBuilder booleanQueryBuilder,String location,String lockey,Double distance,Boolean sort)</span> <span class="hljs-keyword">throws</span> FontFormatException </span>&#123;String[] latlon = location.split(<span class="hljs-string">","</span>);<span class="hljs-keyword">if</span>(latlon.length != <span class="hljs-number">2</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"经纬度参数不正确.location参数以英文逗号(,)连接的字符串.正确示例:“纬度(latitude),经度(longitude)\""</span>);&#125;Double lat = Double.parseDouble(latlon[<span class="hljs-number">0</span>]);Double lon = Double.parseDouble(latlon[<span class="hljs-number">1</span>]);GeoDistanceQueryBuilder geoQueryBuilder = QueryBuilders.geoDistanceQuery(lockey).point(lat, lon)   .distance(distance == <span class="hljs-keyword">null</span>?esConfig.getDistance():distance, DistanceUnit.KILOMETERS)   .geoDistance(GeoDistance.PLANE);<span class="hljs-keyword">if</span>(sort) &#123;GeoDistanceSortBuilder distanceSortBuilder = SortBuilders.geoDistanceSort(lockey,lat,lon);distanceSortBuilder.order(SortOrder.ASC);distanceSortBuilder.point(lat, lon);searchSourceBuilder.sort(distanceSortBuilder);&#125;booleanQueryBuilder.must(geoQueryBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fullTextSearch</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder, String keyword,List&lt;String&gt; fields,Boolean must)</span> </span>&#123;DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();fields.forEach(item-&gt;&#123;disMaxQueryBuilder.add(QueryBuilders.matchQuery(item,keyword));&#125;);<span class="hljs-keyword">if</span>(must) booleanQueryBuilder.must(disMaxQueryBuilder);<span class="hljs-keyword">else</span> booleanQueryBuilder.should(disMaxQueryBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">phraseTextSearch</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder, String keyword,List&lt;String&gt; fields,Boolean must)</span> </span>&#123;DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();List&lt;String&gt; words = Arrays.asList(keyword.split(<span class="hljs-string">" "</span>));fields.forEach(item-&gt;&#123;words.forEach(word-&gt;&#123;disMaxQueryBuilder.add(QueryBuilders.matchPhraseQuery(item,word));&#125;);&#125;);<span class="hljs-keyword">if</span>(must) booleanQueryBuilder.must(disMaxQueryBuilder);<span class="hljs-keyword">else</span> booleanQueryBuilder.should(disMaxQueryBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">textSearch</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder, String keyword, List&lt;String&gt; fields, Boolean phrase,Boolean must)</span> </span>&#123;<span class="hljs-keyword">if</span>(phrase) phraseTextSearch(booleanQueryBuilder, keyword, fields,must);<span class="hljs-keyword">else</span> fullTextSearch(booleanQueryBuilder, keyword, fields,must);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">typeSearch</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder,String key,List&lt;String&gt; typeArray, List&lt;String&gt; mustNot)</span> </span>&#123;DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; typeArray.size(); i++) &#123;disMaxQueryBuilder.add(QueryBuilders.termQuery(key,typeArray.get(i)));&#125;booleanQueryBuilder.must(disMaxQueryBuilder);List&lt;QueryBuilder&gt; mustNotQuerys = <span class="hljs-keyword">new</span> ArrayList&lt;QueryBuilder&gt;();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mustNot.size(); i++) &#123;QueryBuilder query = QueryBuilders.termQuery(key,mustNot.get(i));mustNotQuerys.add(query);&#125;booleanQueryBuilder.mustNot().addAll(mustNotQuerys);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">typeSearch</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder,String key, List&lt;String&gt; typeArray)</span> </span>&#123;DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; typeArray.size(); i++) &#123;disMaxQueryBuilder.add(QueryBuilders.termQuery(key,typeArray.get(i)));&#125;booleanQueryBuilder.must(disMaxQueryBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createQuery</span><span class="hljs-params">(SearchRequest searchRequest, SearchSourceBuilder searchSourceBuilder,Integer from, Integer size, QueryBuilder queryBuilder)</span> </span>&#123;searchSourceBuilder.from(from == <span class="hljs-keyword">null</span>?esConfig.getFrom():from);searchSourceBuilder.size(size == <span class="hljs-keyword">null</span>?esConfig.getSize():size);searchSourceBuilder.query(queryBuilder); searchRequest.source(searchSourceBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createQuery</span><span class="hljs-params">(SearchRequest searchRequest, SearchSourceBuilder searchSourceBuilder,Integer from, Integer size, QueryBuilder queryBuilder, QueryBuilder postFilter)</span> </span>&#123;searchSourceBuilder.from(from == <span class="hljs-keyword">null</span>?esConfig.getFrom():from);searchSourceBuilder.size(size == <span class="hljs-keyword">null</span>?esConfig.getSize():size);searchSourceBuilder.query(queryBuilder); searchSourceBuilder.postFilter(postFilter);searchRequest.source(searchSourceBuilder);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(SearchSourceBuilder searchSourceBuilder, <span class="hljs-keyword">int</span> sortField)</span> </span>&#123;String field = dict.getSortField().get(sortField);String order = dict.getSortType().get(field);searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(field).order(SortOrder.fromString(order)));&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">searchMustNot</span><span class="hljs-params">(BoolQueryBuilder booleanQueryBuilder,String field,String values)</span> </span>&#123;List&lt;String&gt; mustNot = Arrays.asList(values.split(<span class="hljs-string">","</span>));mustNot.forEach(item-&gt;&#123;booleanQueryBuilder.mustNot(QueryBuilders.termQuery(field,item));&#125;);&#125;</code></pre><p><strong>search</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; search(String keyword,String scopes, Integer from, Integer size,String location, Double distance,Boolean matchPhrase,Boolean scoreSort) <span class="hljs-keyword">throws</span> IOException, FontFormatException &#123;RestHighLevelClient client = ESClient.instance(esConfig);SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(esConfig.getIndex()); SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder(); BoolQueryBuilder booleanQueryBuilder = QueryBuilders.boolQuery();<span class="hljs-comment">/*type检索*/</span><span class="hljs-keyword">if</span>(!StringUtils.equals(scopes,<span class="hljs-string">"all"</span>)) &#123;List&lt;String&gt; scopeArray = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(); scopeArray = Arrays.asList(scopes.split(<span class="hljs-string">","</span>)); engineBaseMethod.typeSearch(booleanQueryBuilder,<span class="hljs-string">"type"</span>,scopeArray);&#125;String notTypes = StringUtils.join(dict.getMustNot(), <span class="hljs-string">","</span>);engineBaseMethod.searchMustNot(booleanQueryBuilder, <span class="hljs-string">"type"</span>,notTypes);booleanQueryBuilder.must(QueryBuilders.termQuery(<span class="hljs-string">"extra.up"</span>,<span class="hljs-string">"1"</span>));<span class="hljs-comment">/*多字段检索*/</span><span class="hljs-keyword">if</span>(StringUtils.isNotBlank(keyword)) &#123;<span class="hljs-comment">//List&lt;String&gt; fieldList = Arrays.asList("title,cn_name,suggest".split(",")); </span>List&lt;String&gt; fieldList = dict.getSearchMatch();engineBaseMethod.textSearch(booleanQueryBuilder, keyword, fieldList, matchPhrase,<span class="hljs-keyword">true</span>);&#125;<span class="hljs-comment">/*排序*/</span>engineBaseMethod.sort(searchSourceBuilder,<span class="hljs-number">0</span>);engineBaseMethod.sort(searchSourceBuilder,<span class="hljs-number">1</span>);<span class="hljs-comment">/*地理位置范围内搜索并就近排序*/</span><span class="hljs-keyword">if</span>(StringUtils.isNotBlank(location)) &#123;engineBaseMethod.locationSearch(searchSourceBuilder, booleanQueryBuilder, location,<span class="hljs-string">"location"</span>,distance,<span class="hljs-keyword">true</span>);&#125;<span class="hljs-keyword">int</span> index = <span class="hljs-number">2</span> + (<span class="hljs-keyword">int</span>)(Math.random() * ((<span class="hljs-number">3</span> - <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>));<span class="hljs-keyword">if</span>(scoreSort) searchSourceBuilder.sort(<span class="hljs-keyword">new</span> ScoreSortBuilder().order(SortOrder.DESC));<span class="hljs-keyword">else</span> engineBaseMethod.sort(searchSourceBuilder,index);<span class="hljs-comment">/*构建查询*/</span>engineBaseMethod.createQuery(searchRequest, searchSourceBuilder, from, size, booleanQueryBuilder);SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<span class="hljs-comment">/*解析结果并返回*/</span>List&lt;Map&lt;String, Object&gt;&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();engineBaseMethod.searchResultAnalyse(result, searchResponse);<span class="hljs-keyword">return</span> result;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">searchTips</span><span class="hljs-params">(String keyword, String type)</span> <span class="hljs-keyword">throws</span> IOException, FontFormatException </span>&#123;RestHighLevelClient client = ESClient.instance(esConfig);<span class="hljs-comment">//前缀搜索建议</span>SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(esConfig.getIndex()); SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder(); CompletionSuggestionBuilder suggestionBuilder = <span class="hljs-keyword">new</span> CompletionSuggestionBuilder(<span class="hljs-string">"suggest"</span>);suggestionBuilder.prefix(keyword);suggestionBuilder.size(esConfig.getSize());suggestionBuilder.skipDuplicates(<span class="hljs-keyword">true</span>);SuggestBuilder suggestBuilder = <span class="hljs-keyword">new</span> SuggestBuilder();suggestBuilder.addSuggestion(<span class="hljs-string">"search_tips"</span>, suggestionBuilder);searchSourceBuilder.suggest(suggestBuilder);searchRequest.source(searchSourceBuilder);SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<span class="hljs-comment">//匹配搜索建议</span>SearchSourceBuilder querySourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder(); SearchRequest queryRequest = <span class="hljs-keyword">new</span> SearchRequest(esConfig.getIndex()); BoolQueryBuilder booleanQueryBuilder = QueryBuilders.boolQuery();<span class="hljs-keyword">if</span>(StringUtils.isNotBlank(keyword)) booleanQueryBuilder.should(QueryBuilders.matchQuery(<span class="hljs-string">"title"</span>,keyword));String notTypes = StringUtils.join(dict.getMustNot(), <span class="hljs-string">","</span>);engineBaseMethod.searchMustNot(booleanQueryBuilder, <span class="hljs-string">"type"</span>,notTypes);querySourceBuilder.query(booleanQueryBuilder);queryRequest.source(querySourceBuilder);SearchResponse queryResponse = client.search(queryRequest, RequestOptions.DEFAULT);<span class="hljs-comment">/*解析结果并返回*/</span>List&lt;String&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();Suggest suggest = searchResponse.getSuggest();CompletionSuggestion completionSuggestion = suggest.getSuggestion(<span class="hljs-string">"search_tips"</span>);<span class="hljs-keyword">for</span>(CompletionSuggestion.Entry entry : completionSuggestion.getEntries()) &#123; <span class="hljs-keyword">for</span> (CompletionSuggestion.Entry.Option option : entry) &#123; String optionType = option.getHit().getSourceAsMap().get(<span class="hljs-string">"type"</span>).toString();<span class="hljs-keyword">if</span>(StringUtils.equals(type, <span class="hljs-string">"all"</span>) || StringUtils.equals(type,optionType)) result.add(option.getText().string());&#125;&#125;<span class="hljs-keyword">for</span>(SearchHit hit:queryResponse.getHits()) &#123;String text = (String) hit.getSourceAsMap().get(<span class="hljs-string">"title"</span>);<span class="hljs-keyword">if</span>(!result.contains(text)) result.add(text);&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><h2 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h2><p><strong>master 配置</strong></p><pre><code class="hljs bash"><span class="hljs-comment"># ---------------------------------- Cluster -----------------------------------</span>cluster.name: es-cluster<span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span>node.name: node1-recnode.master: <span class="hljs-literal">true</span>node.data: <span class="hljs-literal">false</span> <span class="hljs-comment"># ----------------------------------- Paths ------------------------------------</span>path.data: /data/es/datapath.logs: /data/es/logs<span class="hljs-comment"># ----------------------------------- Memory -----------------------------------</span>bootstrap.memory_lock: <span class="hljs-literal">false</span><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span>network.host: 0.0.0.0network.publish_host: 10.2.64.110http.port: 9200<span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span>discovery.seed_hosts: [<span class="hljs-string">"10.2.64.110"</span>, <span class="hljs-string">"10.2.64.111"</span>, <span class="hljs-string">"10.2.64.112"</span>]cluster.initial_master_nodes: [<span class="hljs-string">"10.2.64.110"</span>]discovery.zen.fd.ping_timeout: 1mdiscovery.zen.fd.ping_retries: 5http.cors.allow-origin: <span class="hljs-string">"*"</span> http.cors.enabled: <span class="hljs-literal">true</span>bootstrap.system_call_filter: <span class="hljs-literal">false</span>xpack.license.self_generated.type: basic</code></pre><p><strong>node 配置</strong></p><pre><code class="hljs bash">cluster.name: es-cluster<span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span>node.name: node2-recnode.master: <span class="hljs-literal">false</span>node.data: <span class="hljs-literal">true</span> <span class="hljs-comment"># ----------------------------------- Paths ------------------------------------</span>path.data: /data/es/datapath.logs: /data/es/logs<span class="hljs-comment"># ----------------------------------- Memory -----------------------------------</span>bootstrap.memory_lock: <span class="hljs-literal">false</span><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span>network.host: 0.0.0.0network.publish_host: 10.2.64.111http.port: 9200<span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span>discovery.seed_hosts: [<span class="hljs-string">"10.2.64.110"</span>, <span class="hljs-string">"10.2.64.111"</span>, <span class="hljs-string">"10.2.64.112"</span>]cluster.initial_master_nodes: [<span class="hljs-string">"10.2.64.110"</span>]discovery.zen.fd.ping_timeout: 1mdiscovery.zen.fd.ping_retries: 5http.cors.allow-origin: <span class="hljs-string">"*"</span> http.cors.enabled: <span class="hljs-literal">true</span>bootstrap.system_call_filter: <span class="hljs-literal">false</span><span class="hljs-comment">#</span>xpack.license.self_generated.type: basic</code></pre><p><strong>master kibana 配置</strong></p><pre><code class="hljs bash">server.port: 5601server.host: <span class="hljs-string">"0.0.0.0"</span>server.name: <span class="hljs-string">"node1-rec"</span>elasticsearch.hosts: [<span class="hljs-string">"http://10.2.64.110:9200"</span>,<span class="hljs-string">"http://10.2.64.111:9200"</span>,<span class="hljs-string">"http://10.2.64.112:9200"</span>]</code></pre><p><strong>Kibana查看集群状态</strong></p><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> _cluster/health?pretty&#123;  <span class="hljs-string">"cluster_name"</span> : <span class="hljs-string">"es-cluster"</span>,  <span class="hljs-string">"status"</span> : <span class="hljs-string">"green"</span>,  <span class="hljs-string">"timed_out"</span> : <span class="hljs-literal">false</span>,  <span class="hljs-string">"number_of_nodes"</span> : 3,  <span class="hljs-string">"number_of_data_nodes"</span> : 2,  <span class="hljs-string">"active_primary_shards"</span> : 7,  <span class="hljs-string">"active_shards"</span> : 14,  <span class="hljs-string">"relocating_shards"</span> : 0,  <span class="hljs-string">"initializing_shards"</span> : 0,  <span class="hljs-string">"unassigned_shards"</span> : 0,  <span class="hljs-string">"delayed_unassigned_shards"</span> : 0,  <span class="hljs-string">"number_of_pending_tasks"</span> : 0,  <span class="hljs-string">"number_of_in_flight_fetch"</span> : 0,  <span class="hljs-string">"task_max_waiting_in_queue_millis"</span> : 0,  <span class="hljs-string">"active_shards_percent_as_number"</span> : 100.0&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android使用opencv native方式环境搭建</title>
    <link href="/2019/11/01/android%E4%BD%BF%E7%94%A8opencv%20native%E6%96%B9%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/11/01/android%E4%BD%BF%E7%94%A8opencv%20native%E6%96%B9%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>1.opencv下载：<a href="https://opencv.org/releases/" target="_blank" rel="noopener">https://opencv.org/releases/</a> 解压后为OpenCV-android-sdk</p><p><img src="/images/opencv3/41.png" srcset="/images/loading.gif" alt=""></p><p>2.创建初始Android项目</p><p><img src="/images/opencv3/42.png" srcset="/images/loading.gif" alt=""></p><p>3.在app/src/main目录下新建jniLibs目录，在app/src/main/cpp目录下新建include目录和src目录</p><p>将OpenCV-android-sdk/sdk/native/libs下所有目录复制到jniLibs目录中</p><p>将OpenCV-android-sdk/sdk/native/jni/include下的所有目录复制到app/src/main/cpp/include目录中</p><p>移动app/src/main/cpp/CMakeLists.txt至app目录下 </p><p>移动app/src/main/cpp/native-lib.cpp至app/src/main/cpp/src/native-lib.cpp</p><p><img src="/images/opencv3/43.png" srcset="/images/loading.gif" alt=""></p><p>4.配置文件修改</p><p><strong>CMakeLists.txt</strong></p><pre><code class="hljs crystal"><span class="hljs-comment"># For more information about using CMake with Android Studio, read the</span><span class="hljs-comment"># documentation: https://d.android.com/studio/projects/add-native-code.html</span><span class="hljs-comment"># Sets the minimum version of CMake required to build the native library.</span>cmake_minimum_required(VERSION <span class="hljs-number">3.4</span>.<span class="hljs-number">1</span>)include_directories($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#opencv 4.0.1</span>add_library(libopencv_java4 SHARED IMPORTED)set_target_properties(libopencv_java4 PROPERTIES IMPORTED_LOCATION        $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libopencv_java4.so)<span class="hljs-comment">#local</span>add_library(native-<span class="hljs-class"><span class="hljs-keyword">lib</span> <span class="hljs-title">SHARED</span> <span class="hljs-title">src</span>/<span class="hljs-title">main</span>/<span class="hljs-title">cpp</span>/<span class="hljs-title">src</span>/<span class="hljs-title">native</span>-<span class="hljs-title">lib</span>.<span class="hljs-title">cpp</span>)</span>find_library(log-<span class="hljs-class"><span class="hljs-keyword">lib</span> <span class="hljs-title">log</span> )</span>target_link_libraries(native-<span class="hljs-class"><span class="hljs-keyword">lib</span> <span class="hljs-title">libopencv_java4</span> $&#123;<span class="hljs-title">log</span>-<span class="hljs-title">lib</span>&#125; )</span></code></pre><p><strong>app/build.gradle</strong></p><pre><code class="hljs bash">apply plugin: <span class="hljs-string">'com.android.application'</span>android &#123;    compileSdkVersion 29    buildToolsVersion <span class="hljs-string">"29.0.2"</span>    defaultConfig &#123;        applicationId <span class="hljs-string">"com.wisesoft.wiseface"</span>        minSdkVersion 21        targetSdkVersion 29        versionCode 1        versionName <span class="hljs-string">"1.0"</span>        testInstrumentationRunner <span class="hljs-string">"androidx.test.runner.AndroidJUnitRunner"</span>        externalNativeBuild &#123;            cmake &#123;                cppFlags <span class="hljs-string">"-std=c++11 -frtti -fexceptions"</span>                abiFilters <span class="hljs-string">'armeabi-v7a'</span>                arguments <span class="hljs-string">"-DANDROID_STL=c++_shared"</span>            &#125;        &#125;        ndk&#123;            abiFilters <span class="hljs-string">'armeabi-v7a'</span>        &#125;    &#125;    sourceSets&#123;        main&#123;            jniLibs.srcDirs = [<span class="hljs-string">'src/main/jniLibs'</span>]            jni.srcDirs = []        &#125;    &#125;    buildTypes &#123;        release &#123;            minifyEnabled <span class="hljs-literal">false</span>            proguardFiles getDefaultProguardFile(<span class="hljs-string">'proguard-android-optimize.txt'</span>), <span class="hljs-string">'proguard-rules.pro'</span>            ndk&#123;                abiFilters <span class="hljs-string">'armeabi-v7a'</span>            &#125;        &#125;    &#125;    externalNativeBuild &#123;        cmake &#123;            path <span class="hljs-string">"CMakeLists.txt"</span>        &#125;    &#125;&#125;dependencies &#123;    implementation fileTree(dir: <span class="hljs-string">'libs'</span>, include: [<span class="hljs-string">'*.jar'</span>])    implementation <span class="hljs-string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="hljs-string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="hljs-string">'junit:junit:4.12'</span>    androidTestImplementation <span class="hljs-string">'androidx.test:runner:1.2.0'</span>    androidTestImplementation <span class="hljs-string">'androidx.test.espresso:espresso-core:3.2.0'</span>&#125;</code></pre><p>5.刷新配置点击Sync Now并refresh c++</p><p><img src="/images/opencv3/44.png" srcset="/images/loading.gif" alt=""></p><p>6.使用原生opencv c++ 代码进行开发</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;jni.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span></span><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function">JNIEXPORT jstring JNICALL<span class="hljs-title">Java_com_wisesoft_wiseface_MainActivity_stringFromJNI</span><span class="hljs-params">(        JNIEnv* env,        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> hello = <span class="hljs-string">"Hello from C++"</span>;    cv::Mat mat;    <span class="hljs-keyword">return</span> env-&gt;NewStringUTF(hello.c_str());&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习模型转换</title>
    <link href="/2019/10/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2019/10/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="mxnet模型转tensorflow模型"><a href="#mxnet模型转tensorflow模型" class="headerlink" title="mxnet模型转tensorflow模型"></a>mxnet模型转tensorflow模型</h3><p>requirements：pip install mxnet tensorflow</p><h5 id="1-安装mmdnn"><a href="#1-安装mmdnn" class="headerlink" title="1.安装mmdnn"></a>1.安装mmdnn</h5><p>pip install -U git+<a href="https://github.com/Microsoft/MMdnn.git@master" target="_blank" rel="noopener">https://github.com/Microsoft/MMdnn.git@master</a></p><h5 id="2-模型下载"><a href="#2-模型下载" class="headerlink" title="2.模型下载"></a>2.模型下载</h5><p><a href="https://pan.baidu.com/s/1If28BkHde4fiuweJrbicVA" target="_blank" rel="noopener">https://pan.baidu.com/s/1If28BkHde4fiuweJrbicVA</a></p><h5 id="3-mxnet模型转IR"><a href="#3-mxnet模型转IR" class="headerlink" title="3.mxnet模型转IR"></a>3.mxnet模型转IR</h5><pre><code class="hljs bash">python -m mmdnn.conversion._script.convertToIR -f mxnet -n model-symbol.json -w model-0000.params -d tf_model --inputShape 3,112,112 <span class="hljs-comment">#info:</span>IR network structure is saved as [tf_model.json].<span class="hljs-comment">#可视化文件</span>IR network structure is saved as [tf_model.pb].<span class="hljs-comment">#网络结构</span>IR weights are saved as [tf_model.npy].<span class="hljs-comment">#权重参数</span></code></pre><p>若报错：AttributeError: ‘NoneType’ object has no attribute ‘asnumpy’ line 410</p><p>解决：找到python3.6/site-packages/mmdnn/conversion/mxnet/mxnet_parser.py 410 行 修改如下：</p><pre><code class="hljs ini"><span class="hljs-attr">weight</span> = self.weight_data.get(<span class="hljs-string">"fc1_weight"</span>).asnumpy().transpose((<span class="hljs-number">1</span>, <span class="hljs-number">0</span>))</code></pre><p>参考：<a href="https://github.com/microsoft/MMdnn/issues/231" target="_blank" rel="noopener">https://github.com/microsoft/MMdnn/issues/231</a></p><h5 id="4-生成tf-model-py-用于还原神经网络结构"><a href="#4-生成tf-model-py-用于还原神经网络结构" class="headerlink" title="4.生成tf_model.py 用于还原神经网络结构"></a>4.生成tf_model.py 用于还原神经网络结构</h5><p>调用tf_model.py中的KitModel函数加载npy权重参数可重新生成原网络框架</p><pre><code class="hljs bash">python -m mmdnn.conversion._script.IRToCode -f tensorflow --IRModelPath tf_model.pb --IRWeightPath tf_model.npy --dstModelPath tf_model.py<span class="hljs-comment">#info:</span>Parse file [tf_model.pb] with binary format successfully.Target network code snippet is saved as [tf_model.py].</code></pre><h5 id="5-验证模型输出结果是否一致"><a href="#5-验证模型输出结果是否一致" class="headerlink" title="5.验证模型输出结果是否一致"></a>5.验证模型输出结果是否一致</h5><p>5.1 test_mxnet.py</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> mxnet <span class="hljs-keyword">as</span> mx<span class="hljs-keyword">from</span> tensorflow.contrib.keras.api.keras.preprocessing <span class="hljs-keyword">import</span> image<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtupleBatch = namedtuple(<span class="hljs-string">'Batch'</span>, [<span class="hljs-string">'data'</span>])ctx = mx.cpu(<span class="hljs-number">0</span>)<span class="hljs-comment">#加载模型</span>sym, arg_params, aux_params = mx.model.load_checkpoint(<span class="hljs-string">'mobile/model'</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">#mobile文件夹下为 model-symbol.json -w model-0000.params</span>mod = mx.mod.Module(symbol = sym, context= ctx, label_names= <span class="hljs-literal">None</span>)mod.bind(for_training=<span class="hljs-literal">False</span>, data_shapes=[(<span class="hljs-string">'data'</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">112</span>, <span class="hljs-number">112</span>))], label_shapes= mod._label_shapes)mod.set_params(arg_params, aux_params, allow_missing= <span class="hljs-literal">True</span>)path = <span class="hljs-string">'face.jpeg'</span>img = image.load_img(path, target_size = (<span class="hljs-number">112</span>, <span class="hljs-number">112</span>))img = image.img_to_array(img)img = img[..., ::<span class="hljs-number">-1</span>]img = np.expand_dims(img, <span class="hljs-number">0</span>).transpose((<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))mod.forward(Batch([mx.nd.array(img)]))prob = mod.get_outputs()[<span class="hljs-number">0</span>].asnumpy()prob = np.squeeze(prob)print(prob)</code></pre><p><strong><em>执行命令</em></strong></p><pre><code class="hljs python">python test_mxnet.py <span class="hljs-comment">#info:</span>[<span class="hljs-number">17</span>:<span class="hljs-number">39</span>:<span class="hljs-number">57</span>] src/nnvm/legacy_json_util.cc:<span class="hljs-number">209</span>: Loading symbol saved by previous version v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span>. Attempting to upgrade...[<span class="hljs-number">17</span>:<span class="hljs-number">39</span>:<span class="hljs-number">57</span>] src/nnvm/legacy_json_util.cc:<span class="hljs-number">217</span>: Symbol successfully upgraded![ <span class="hljs-number">0.344491</span>    <span class="hljs-number">0.10190611</span> <span class="hljs-number">-0.24501216</span>  <span class="hljs-number">0.6819046</span>   <span class="hljs-number">0.88096315</span>  <span class="hljs-number">0.347766</span> <span class="hljs-number">-0.94702303</span> <span class="hljs-number">-0.67586213</span> <span class="hljs-number">-0.43900824</span>  <span class="hljs-number">0.81431276</span> <span class="hljs-number">-0.4899036</span>  <span class="hljs-number">-0.43025514</span> <span class="hljs-number">-0.50644076</span> <span class="hljs-number">-0.27366892</span>  <span class="hljs-number">0.63601595</span> <span class="hljs-number">-0.5352368</span>   <span class="hljs-number">0.13765731</span>  <span class="hljs-number">0.40842316</span>  <span class="hljs-number">0.76525426</span> <span class="hljs-number">-0.8959755</span>   <span class="hljs-number">0.42129532</span> <span class="hljs-number">-0.38290668</span>  <span class="hljs-number">0.02023177</span> <span class="hljs-number">-0.14840017</span>  <span class="hljs-number">0.9108279</span>  <span class="hljs-number">-0.27738237</span> <span class="hljs-number">-0.6017331</span>  <span class="hljs-number">-0.214954</span>    <span class="hljs-number">0.37644073</span>  <span class="hljs-number">0.48894417</span> <span class="hljs-number">-0.8824417</span>   <span class="hljs-number">0.31846505</span>  <span class="hljs-number">0.19936565</span>  <span class="hljs-number">0.27296835</span>  <span class="hljs-number">1.5621403</span>   <span class="hljs-number">0.4327985</span> <span class="hljs-number">-0.6486908</span>  <span class="hljs-number">-0.23494942</span> <span class="hljs-number">-0.8708738</span>  <span class="hljs-number">-0.77051663</span>  <span class="hljs-number">0.09255238</span> <span class="hljs-number">-1.1803752</span> <span class="hljs-number">-0.17184262</span>  <span class="hljs-number">0.2543226</span>  <span class="hljs-number">-0.19088541</span> <span class="hljs-number">-0.26873437</span>  <span class="hljs-number">0.9160875</span>  <span class="hljs-number">-0.18985008</span> <span class="hljs-number">-0.4793183</span>  <span class="hljs-number">-0.32987356</span> <span class="hljs-number">-1.3085973</span>   <span class="hljs-number">1.2959319</span>  <span class="hljs-number">-0.00581244</span>  <span class="hljs-number">0.12396478</span>  <span class="hljs-number">1.2034996</span>   <span class="hljs-number">0.0991946</span>  <span class="hljs-number">-1.9225345</span>   <span class="hljs-number">0.92873436</span> <span class="hljs-number">-0.285992</span>    <span class="hljs-number">0.11249313</span> <span class="hljs-number">-1.4562801</span>   <span class="hljs-number">1.8767762</span>  <span class="hljs-number">-1.2222489</span>  <span class="hljs-number">-0.03905598</span>  <span class="hljs-number">0.5152731</span>   <span class="hljs-number">0.04876914</span>  <span class="hljs-number">0.04671988</span> <span class="hljs-number">-0.32384786</span> <span class="hljs-number">-0.88341314</span>  <span class="hljs-number">0.58193505</span> <span class="hljs-number">-0.7378911</span>  <span class="hljs-number">-0.3082042</span>  <span class="hljs-number">0.22141728</span>  <span class="hljs-number">0.7255646</span>   <span class="hljs-number">0.24394599</span>  <span class="hljs-number">0.6563271</span>  <span class="hljs-number">-0.46760473</span> <span class="hljs-number">-0.38698462</span> <span class="hljs-number">-0.11467619</span> <span class="hljs-number">-0.9940818</span>  <span class="hljs-number">-1.1298056</span>   <span class="hljs-number">1.015201</span>    <span class="hljs-number">0.03592067</span>  <span class="hljs-number">0.6738027</span> <span class="hljs-number">-0.5814839</span>   <span class="hljs-number">0.1565634</span>  <span class="hljs-number">-0.06737513</span> <span class="hljs-number">-1.040216</span>   <span class="hljs-number">-0.9286871</span>  <span class="hljs-number">-0.11091176</span> <span class="hljs-number">-0.66596293</span>  <span class="hljs-number">0.03736701</span> <span class="hljs-number">-0.35337982</span> <span class="hljs-number">-0.4175317</span>  <span class="hljs-number">-0.47258058</span> <span class="hljs-number">-0.62383175</span> <span class="hljs-number">-0.86612004</span> <span class="hljs-number">-0.5230916</span>  <span class="hljs-number">-1.7838901</span>   <span class="hljs-number">0.08661752</span> <span class="hljs-number">-0.02590845</span>  <span class="hljs-number">0.23406455</span>  <span class="hljs-number">0.77719927</span>  <span class="hljs-number">1.4410776</span>   <span class="hljs-number">0.41925532</span>  <span class="hljs-number">0.4560187</span>  <span class="hljs-number">-0.02141571</span>  <span class="hljs-number">0.7005563</span> <span class="hljs-number">-0.58727044</span> <span class="hljs-number">-0.39757103</span>  <span class="hljs-number">1.2808248</span>  <span class="hljs-number">-1.1874324</span>  <span class="hljs-number">-0.27268586</span> <span class="hljs-number">-0.82443166</span>  <span class="hljs-number">0.39704558</span> <span class="hljs-number">-1.2778002</span>  <span class="hljs-number">-0.52762616</span> <span class="hljs-number">-0.26455742</span>  <span class="hljs-number">1.2137026</span>   <span class="hljs-number">0.04997367</span>  <span class="hljs-number">0.05591454</span>  <span class="hljs-number">1.0264031</span>   <span class="hljs-number">1.5093948</span>  <span class="hljs-number">-0.5634581</span>  <span class="hljs-number">-1.1715719</span>  <span class="hljs-number">-0.646347</span>  <span class="hljs-number">0.6021179</span>   <span class="hljs-number">0.6725963</span> ]</code></pre><p>5.1 test_tensorflow.py</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import<span class="hljs-keyword">import</span> argparse<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> six <span class="hljs-keyword">import</span> text_type <span class="hljs-keyword">as</span> _text_type<span class="hljs-keyword">from</span> tensorflow.contrib.keras.api.keras.preprocessing <span class="hljs-keyword">import</span> image<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfparser = argparse.ArgumentParser()parser.add_argument(<span class="hljs-string">'-n'</span>, type=_text_type, default=<span class="hljs-string">'kitModel'</span>,                    help=<span class="hljs-string">'Network structure file name.'</span>)parser.add_argument(<span class="hljs-string">'-w'</span>, type=_text_type, required=<span class="hljs-literal">True</span>,                    help=<span class="hljs-string">'Network weights file name'</span>)parser.add_argument(<span class="hljs-string">'--image'</span>, <span class="hljs-string">'-i'</span>,                    type=_text_type, help=<span class="hljs-string">'Test image path.'</span>,                    default=<span class="hljs-string">"face.jpeg"</span>)args = parser.parse_args()<span class="hljs-keyword">if</span> args.n.endswith(<span class="hljs-string">'.py'</span>):    args.n = args.n[:<span class="hljs-number">-3</span>]model_converted = __import__(args.n).KitModel(args.w)input_tf, model_tf = model_convertedimg = image.load_img(args.image, target_size = (<span class="hljs-number">112</span>, <span class="hljs-number">112</span>))img = image.img_to_array(img)img = img[..., ::<span class="hljs-number">-1</span>]input_data = np.expand_dims(img, <span class="hljs-number">0</span>)<span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:    init = tf.global_variables_initializer()    sess.run(init)    predict = sess.run(model_tf, feed_dict = &#123;input_tf : input_data&#125;)print(predict)</code></pre><p><strong>执行命令</strong></p><pre><code class="hljs bash">python test_tensorflow.py -n tf_model.py -w tf_model.npy -i face.jpeg<span class="hljs-comment">#info:</span>2019-10-25 17:51:37.745502: I tensorflow/core/common_runtime/process_util.cc:71] Creating new thread pool with default inter op setting: 12. Tune using inter_op_parallelism_threads <span class="hljs-keyword">for</span> best performance.[[ 0.3444912   0.10190725 -0.24501228  0.6819044   0.88096356  0.3477651  -0.9470245  -0.67586106 -0.43900767  0.8143126  -0.48990446 -0.43025535  -0.50643945 -0.27366814  0.63601726 -0.5352377   0.13765681  0.40842274   0.7652553  -0.8959763   0.42129317 -0.38290572  0.02023016 -0.14840023   0.91082776 -0.27738187 -0.60173315 -0.2149537   0.37644142  0.48894492  -0.8824413   0.3184655   0.19936629  0.2729676   1.5621389   0.4327973  -0.6486915  -0.23494866 -0.87087345 -0.77051604  0.09255352 -1.180374  -0.17184272  0.25432315 -0.19088425 -0.26873374  0.91608876 -0.18985137  -0.4793172  -0.3298719  -1.308598    1.2959337  -0.00581198  0.12396422   1.2034999   0.09919477 -1.9225347   0.92873377 -0.28599226  0.11249284  -1.4562793   1.876776   -1.2222495  -0.03905648  0.5152732   0.04876836   0.04672025 -0.32384863 -0.8834132   0.581934   -0.7378913  -0.30820462   0.22141635  0.72556514  0.2439455   0.6563256  -0.46760577 -0.38698506  -0.1146768  -0.9940842  -1.1298054   1.015199    0.03592021  0.67380327  -0.58148336  0.15656358 -0.06737413 -1.0402167  -0.9286856  -0.11091161  -0.66596127  0.03736706 -0.35337985 -0.41753066 -0.47258082 -0.62383235  -0.8661205  -0.52309173 -1.7838898   0.08661895 -0.02590791  0.23406385   0.7771991   1.4410769   0.41925538  0.45601875 -0.02141583  0.70055544  -0.587271   -0.3975702   1.2808259  -1.1874334  -0.27268624 -0.8244319   0.39704552 -1.2778007  -0.5276267  -0.2645575   1.2137012   0.04997464   0.05591418  1.0264043   1.5093954  -0.5634565  -1.1715722  -0.6463482   0.60211945  0.67259526]]</code></pre><h5 id="6-基于tf-model-npy和tf-model-py文件，固化参数，生成PB文件"><a href="#6-基于tf-model-npy和tf-model-py文件，固化参数，生成PB文件" class="headerlink" title="6.基于tf_model.npy和tf_model.py文件，固化参数，生成PB文件"></a>6.基于tf_model.npy和tf_model.py文件，固化参数，生成PB文件</h5><p>freeze_graph.py </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">import</span> tf_model <span class="hljs-keyword">as</span> tf_fun<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">netWork</span><span class="hljs-params">()</span>:</span>    model=tf_fun.KitModel(<span class="hljs-string">"./tf_model.npy"</span>) <span class="hljs-comment">#调用tf_model.py中的KitModel函数加载npy权重参数</span>    <span class="hljs-keyword">return</span> model<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">freeze_graph</span><span class="hljs-params">(output_graph)</span>:</span>    output_node_names = <span class="hljs-string">"output"</span>    data,fc1=netWork()    fc1=tf.identity(fc1,name=<span class="hljs-string">"output"</span>)     graph = tf.get_default_graph()  <span class="hljs-comment"># 获得默认的图</span>    input_graph_def = graph.as_graph_def()  <span class="hljs-comment"># 返回一个序列化的图代表当前的图</span>    init = tf.global_variables_initializer()    <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:        sess.run(init)        output_graph_def = tf.graph_util.convert_variables_to_constants(  <span class="hljs-comment"># 模型持久化，将变量值固定</span>            sess=sess,            input_graph_def=input_graph_def,  <span class="hljs-comment"># 等于:sess.graph_def</span>            output_node_names=output_node_names.split(<span class="hljs-string">","</span>))  <span class="hljs-comment"># 如果有多个输出节点，以逗号隔开</span>         <span class="hljs-keyword">with</span> tf.gfile.GFile(output_graph, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:  <span class="hljs-comment"># 保存模型</span>            f.write(output_graph_def.SerializeToString())  <span class="hljs-comment"># 序列化输出</span> <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    freeze_graph(<span class="hljs-string">"frozen_model.pb"</span>)    print(<span class="hljs-string">"finish!"</span>)</code></pre><p>python freeze_graph.py </p><pre><code class="hljs bash"><span class="hljs-comment">#info:</span>Instructions <span class="hljs-keyword">for</span> updating:Use tf.compat.v1.graph_util.extract_sub_graphfinish!</code></pre><p><strong>测试pb模型</strong></p><p>test_pb.py</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> tensorflow.contrib.keras.api.keras.preprocessing <span class="hljs-keyword">import</span> image<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">with</span> tf.gfile.FastGFile(<span class="hljs-string">'frozen_model.pb'</span>,<span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:    graph_def = tf.GraphDef()    graph_def.ParseFromString(f.read())    tf.import_graph_def(graph_def, name=<span class="hljs-string">''</span>)<span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:        img = image.load_img(<span class="hljs-string">'face.jpeg'</span>, target_size = (<span class="hljs-number">112</span>, <span class="hljs-number">112</span>))    img = image.img_to_array(img)    img = img[..., ::<span class="hljs-number">-1</span>]    input_data = np.expand_dims(img, <span class="hljs-number">0</span>)    init = tf.global_variables_initializer()    sess.run(init)    <span class="hljs-comment">#print(tf.get_default_graph().get_operations()) 根据输出值，可知输入tensor名为data 全连接层输出的tensor名为ouput</span>    <span class="hljs-comment">#op = sess.graph.get_tensor_by_name('fc1/add_1:0')</span>    <span class="hljs-comment">#predict = sess.run(op, feed_dict = &#123;'data:0' : input_data&#125;)</span>    op = sess.graph.get_tensor_by_name(<span class="hljs-string">'output:0'</span>)    predict = sess.run(op, feed_dict = &#123;<span class="hljs-string">'data:0'</span> : input_data&#125;)print(predict)</code></pre><p>python test_pb.py</p><pre><code class="hljs bash"><span class="hljs-comment">#info:</span>[[ 0.3444914   0.10190733 -0.2450121   0.68190414  0.8809633   0.3477656  -0.94702375 -0.6758606  -0.43900838  0.8143138  -0.48990518 -0.43025577  -0.5064386  -0.2736677   0.6360168  -0.5352382   0.13765849  0.40842175   0.7652537  -0.8959745   0.42129484 -0.3829043   0.02023116 -0.14839967   0.9108265  -0.27738202 -0.6017342  -0.21495399  0.37644026  0.48894358  -0.88244045  0.31846407  0.19936593  0.2729677   1.5621401   0.4327974  -0.6486902  -0.23494998 -0.8708729  -0.7705149   0.09255301 -1.1803752  -0.17184293  0.25432175 -0.19088468 -0.2687335   0.91608775 -0.18984997  -0.4793176  -0.32987317 -1.3085989   1.295933   -0.00581315  0.12396483   1.2034997   0.09919491 -1.9225343   0.9287349  -0.28599253  0.11249258  -1.4562799   1.876776   -1.222248   -0.03905599  0.5152738   0.04876841   0.04672143 -0.32384768 -0.88341135  0.58193433 -0.73789096 -0.30820417   0.22141536  0.7255656   0.24394391  0.65632653 -0.4676048  -0.38698527  -0.11467646 -0.9940818  -1.1298064   1.0152006   0.03592108  0.6738041  -0.5814836   0.1565624  -0.06737386 -1.0402162  -0.92868716 -0.1109117  -0.66596234  0.03736827 -0.35337996 -0.41753033 -0.4725821  -0.623832  -0.86612093 -0.5230911  -1.7838906   0.0866183  -0.02590806  0.23406453   0.77719873  1.4410781   0.41925526  0.45601833 -0.02141543  0.7005538  -0.5872698  -0.39757127  1.2808269  -1.1874311  -0.2726869  -0.8244321   0.39704597 -1.2778006  -0.5276277  -0.26455772  1.2137022   0.04997511   0.05591565  1.0264047   1.5093955  -0.56345737 -1.1715721  -0.64634734   0.60211873  0.67259526]]</code></pre><h5 id="7-pb模型转换为-tflite模型供tensorflow-lite调用-移动端部署"><a href="#7-pb模型转换为-tflite模型供tensorflow-lite调用-移动端部署" class="headerlink" title="7. .pb模型转换为.tflite模型供tensorflow lite调用(移动端部署)"></a>7. .pb模型转换为.tflite模型供tensorflow lite调用(移动端部署)</h5><p>pb2tflite.py</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfconvert=tf.lite.TFLiteConverter.from_frozen_graph(<span class="hljs-string">"frozen_model.pb"</span>,input_arrays=[<span class="hljs-string">"data"</span>],                                                  output_arrays=[<span class="hljs-string">"output"</span>],                                                  input_shapes=&#123;<span class="hljs-string">"data"</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">112</span>,<span class="hljs-number">3</span>]&#125;)convert.post_training_quantize=<span class="hljs-literal">True</span> <span class="hljs-comment">#是否量化</span>tflite_model=convert.convert()open(<span class="hljs-string">"mobilenet.tflite"</span>,<span class="hljs-string">"wb"</span>).write(tflite_model)print(<span class="hljs-string">"finish!"</span>)</code></pre><p>python pb2tflite.py</p><p>info: 文件夹中生成mobilenet.tflite</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模型转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mxnet Windows编译安装CPU版 c++ api</title>
    <link href="/2019/09/19/mxnet%20Windows%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85CPU%E7%89%88/"/>
    <url>/2019/09/19/mxnet%20Windows%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85CPU%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h1><p>win10 x64 、Visual Studio 2015、cmake 3.0+、python2.7 (环境变量需配置)</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>1.OpenBLAS-v0.2.14-Win64-int64 下载地址：<a href="https://sourceforge.net/projects/openblas/files/v0.2.14/" target="_blank" rel="noopener">https://sourceforge.net/projects/openblas/files/v0.2.14/</a></p><p>解压安装后，添加环境变量<strong>OpenBLAS_HOME</strong> 值为openblas的目录，即：your_dir/openblas</p><p>2.OpenCV 3.0+ 下载地址：<a href="https://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.3.1/opencv-3.3.1-vc14.exe/download" target="_blank" rel="noopener">https://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.3.1/opencv-3.3.1-vc14.exe/download</a></p><p>安装后，添加环境变量<strong>OpenCV_DIR</strong> 值为<strong>your_dir\opencv3.3.1\build</strong>,并在<strong>path</strong>环境变量中添加<strong>your_dir\opencv3.3.1\build\x64\vc14\bin</strong></p><h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>1.git clone项目到本地 <strong>（版本1.5.1）</strong></p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/apache/incubator-mxnet mxnet</code></pre><p>2.在mxnet目录下创建build目录</p><p>3.启动cmake-gui.exe进行mxnet.sln工程的生成</p><p>设置mxnet源码路径和mxnet编译路径,点击configure,选择visual studio 2015 win64</p><p>生成的配置中，仅仅勾选<strong>use_opencv,use_openmp,use_cpp_package</strong>即可，如图所示</p><p><img src="/images/note/11.jpg" srcset="/images/loading.gif" alt="11"></p><p>若提示找不到opencv路径，则手动设置opencv路径即可，如图所示</p><p><img src="/images/note/12.jpg" srcset="/images/loading.gif" alt="11"></p><p>重新点击configure,配置选项未显示红框且最终信息显示Configuring done，则配置成功</p><p>若显示红框，则将显示红框的勾去掉，再重新configure（只保留<strong>use_opencv,use_openmp,use_cpp_package</strong>的勾选）</p><p>点击generate,生成mxnet.sln，生成成功会在build目录下出现mxnet.sln工程，如图所示</p><p><img src="/images/note/13.jpg" srcset="/images/loading.gif" alt="11"></p><p>拷贝如下dll文件至mxnet\cpp-package\scripts目录下<br>libopenblas.dll<br>opencv_world331.dll opencv_ffmpeg331_64.dll<br>(来自opencv3.3.1安装目录)<br>libgcc_s_seh-1.dll libgfortran-3.dll libquadmath-0.dll<br>(来自mingw64_dll 下载地址：<a href="https://sourceforge.net/projects/openblas/files/v0.2.14/" target="_blank" rel="noopener">https://sourceforge.net/projects/openblas/files/v0.2.14/</a>)</p><p><img src="/images/note/17.jpg" srcset="/images/loading.gif" alt="11"></p><p>4.利用visual studio 2015 打开mxnet.sln 并执行编译</p><p><img src="/images/note/14.jpg" srcset="/images/loading.gif" alt="11"></p><p>右键ALL_BUILD,点击生成执行编译，编译成功后会在build/release生成mxnet.lib和mxnet.dll,同时会在mxnet\cpp-package\include\mxnet-cpp生成op.h头文件</p><p>如图所示</p><p><img src="/images/note/15.jpg" srcset="/images/loading.gif" alt="11"></p><p><img src="/images/note/16.jpg" srcset="/images/loading.gif" alt="11"></p><p><img src="/images/note/18.jpg" srcset="/images/loading.gif" alt="11"></p><p>5.若自动生成op.h头文件失败，则手动生成c++ op.h头文件</p><p>重新configure（只保留<strong>use_opencv,use_openmp</strong>的勾选）再点击generate,生成mxnet.sln 重新利用Visual Studio 2015编译</p><p>拷贝如下dll文件至mxnet\cpp-package\scripts目录下</p><p>mxnet.dll<br>libopenblas.dll<br>opencv_world331.dll opencv_ffmpeg331_64.dll<br>(来自opencv3.3.1安装目录)<br>libgcc_s_seh-1.dll libgfortran-3.dll libquadmath-0.dll<br>(来自mingw64_dll 下载地址：<a href="https://sourceforge.net/projects/openblas/files/v0.2.14/" target="_blank" rel="noopener">https://sourceforge.net/projects/openblas/files/v0.2.14/</a>)</p><p><img src="/images/note/17.jpg" srcset="/images/loading.gif" alt="11"></p><p>执行如下命令，生成op.h</p><pre><code class="hljs bash">python OpWrapperGenerator.py mxnet.dll</code></pre><p><strong>错误处理</strong><br>1.<a href="https://github.com/apache/incubator-mxnet/issues/14116" target="_blank" rel="noopener">https://github.com/apache/incubator-mxnet/issues/14116</a><br>···bash<br>Build config:<br>1&gt;——— Build started: Project: cpp_package_op_h, Configuration: Release x64 ———<br>1&gt;”Running: OpWrapperGenerator.py”<br>1&gt;D:/Projects/MXNet-versions/MxNet1-3-1/build/Release/libmxnet.dll<br>1&gt;argument “lrs” of operator “multi_sgd_update” has unknown type “, required”<br>1&gt;argument “wds” of operator “multi_sgd_update” has unknown type “, required”<br>1&gt;argument “lrs” of operator “multi_sgd_mom_update” has unknown type “, required”<br>1&gt;argument “wds” of operator “multi_sgd_mom_update” has unknown type “, required”<br>1&gt;argument “lrs” of operator “multi_mp_sgd_update” has unknown type “, required”<br>1&gt;argument “wds” of operator “multi_mp_sgd_update” has unknown type “, required”<br>1&gt;argument “lrs” of operator “multi_mp_sgd_mom_update” has unknown type “, required”<br>1&gt;argument “wds” of operator “multi_mp_sgd_mom_update” has unknown type “, required”<br>========== Build: 1 succeeded, 0 failed, 3 up-to-date, 0 skipped ==========<br><pre><code class="hljs awk">解决方案：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/i</span>ncubator-mxnet<span class="hljs-regexp">/pull/</span><span class="hljs-number">15144</span><span class="hljs-regexp">/files</span></code></pre></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mxnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake教程</title>
    <link href="/2019/08/07/cmake%E6%95%99%E7%A8%8B/"/>
    <url>/2019/08/07/cmake%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>1.hello world</strong> </p><p>main.cpp</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello, World!"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>CMakeLists.txt</p><pre><code class="hljs bash">cmake_minimum_required(VERSION 3.14) <span class="hljs-comment">#最低cmake版本</span>project(<span class="hljs-built_in">test</span>) <span class="hljs-comment">#定义项目名称</span><span class="hljs-built_in">set</span>(CMAKE_CXX_STANDARD 11) <span class="hljs-comment">#设置c++编译标准版本</span>add_executable(<span class="hljs-built_in">test</span> main.cpp)</code></pre><p>构建</p><pre><code class="hljs bash">cmake . <span class="hljs-comment">#.代表本目录</span>make</code></pre><p>Note:</p><p>1.project(name)会同时隐式定义NAME_BINARY_DIR 以及NAME_SOURCE_DIR变量</p><p>2.SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]]) 定义变量:set( SRC_LIST main.cpp test.cpp)</p><p>3.ADD_EXECUTABLE(test ${SRC_LIST}) 生成名为test的可执行文件 源文件为SRC_LIST</p><p>4.变量使用${}取值，在IF控制语句中直接使用变量名</p><p>指令(参数1 参数2 …) 指令不区分大小写 参数区分大小写</p><p>》〉》以上hello world 的编译为内部编译，无法删除中间文件</p><p>5.外部构建(通常的方式)</p><pre><code class="hljs bash">sudo mkdir build <span class="hljs-comment">#在工程目录任意位置 </span><span class="hljs-built_in">cd</span> buildcmake .. <span class="hljs-comment">#..代表父目录(包含CMakeLists.txt构建文件)</span>make</code></pre><p>6.ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) 当前工程添加源文件存放的子目录并指定目标二进制文件存放目录：</p><p>ADD_SUBDIRECTORY(src bin)</p><p>7.cmake -DCMAKE_INSTALL_PREFIX=/usr/local . #-DCMAKE_INSTALL_PREFIX指定安装目录</p><p>8.INSTALL指令 DCMAKE_INSTALL_PREFIX默认为/usr/local目录</p><p><strong>目标文件的安装</strong></p><p>INSTALL(<strong>TARGETS</strong> targets… </p><p>​                [</p><p>​                [ARCHIVE|LIBRARY|RUNTIME] </p><p>​                [DESTINATION (dir)]</p><p>​                [PERMISSIONS permissions…] </p><p>​                [CONFIGURATIONS [Debug|Release|…]</p><p>​                ]</p><p>​                [COMPONENT \<component\>] [OPTIONAL] ] […])</p><p>INSTALL(TARGETS myrun mylib mystaticlib </p><p>​               RUNTIME DESTINATION bin </p><p>​               LIBRARY DESTINATION lib </p><p>​               ARCHIVE DESTINATION libstatic ) </p><p>可执行文件 myrun 安装到${CMAKE_INSTALL_PREFIX}/bin 目录 </p><p>动态库 libmylib 安装到${CMAKE_INSTALL_PREFIX}/lib 目录 </p><p>静态库 libmystaticlib 安装到${CMAKE_INSTALL_PREFIX}/libstatic 目录</p><p><strong>普通文件的安装</strong></p><p>INSTALL(<strong>FILES</strong> files… </p><p>​              DESTINATION (dir)</p><p>​              [PERMISSIONS permissions…] [CONFIGURATIONS [Debug|Release|…]] [COMPONENT (component)] [RENAME (name)] [OPTIONAL])</p><p><strong>2.静态库与动态库构建</strong></p><p>ADD_LIBRARY(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 … sourceN)</p><p>工程目录 CMakeLists.txt</p><pre><code class="hljs crystal">PROJECT(HELLOLIB) ADD_SUBDIRECTORY(<span class="hljs-class"><span class="hljs-keyword">lib</span>)</span></code></pre><p>līb目录下 CMakeLists.txt</p><pre><code class="hljs bash">SET(LIBHELLO_SRC hello.c) ADD_LIBRARY(hello SHARED <span class="hljs-variable">$&#123;LIBHELLO_SRC&#125;</span>) <span class="hljs-comment">#动态库</span>ADD_LIBRARY(hello_static STATIC <span class="hljs-variable">$&#123;LIBHELLO_SRC&#125;</span>) <span class="hljs-comment">#静态库</span>SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME <span class="hljs-string">"hello"</span>) <span class="hljs-comment">#使得动态库和静态库同名</span>SET_TARGET_PROPERTIES(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1) <span class="hljs-comment">#防止同名时被清理</span>SET_TARGET_PROPERTIES(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1) <span class="hljs-comment">#防止同名时被清理</span>INSTALL(TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)</code></pre><p>构建并安装</p><pre><code class="hljs bash">sudo mkdir build <span class="hljs-built_in">cd</span> buildcmake -DCMAKE_INSTALL_PREFIX=/usr .. makemake install</code></pre><p>lib目录生成libhello.so libhello.a文件,并安装到/usr/bin目录</p><p><strong>3.外部共享库和头文件的使用</strong></p><pre><code class="hljs bash">INCLUDE_DIRECTORIES([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...) <span class="hljs-comment">#添加包含目录指令</span>INCLUDE_DIRECTORIES(/usr/include/hello)LINK_DIRECTORIES(directory1 directory2 ...) 添加共享库目录TARGET_LINK_LIBRARIES(target library1 library2 ...) <span class="hljs-comment">#为目标文件添加需要的共享库</span>TARGET_LINK_LIBRARIES(main libhello.so) <span class="hljs-comment">#动态库</span>TARGET_LINK_LIBRARIES(main libhello.a) <span class="hljs-comment">#静态库</span></code></pre><p><strong>4.cmake 常用指令</strong></p><p>ADD_DEFINITIONS(-D…)：向 C/C++编译器添加-D 定义</p><p>AUX_SOURCE_DIRECTORY(dir VARIABLE)：发现一个目录下所有的源代码文件并将列表存储在一个变量中</p><p>AUX_SOURCE_DIRECTORY(. SRC_LIST)</p><p>ADD_EXECUTABLE(main ${SRC_LIST})</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>make</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(7) 排序</title>
    <link href="/2019/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(7)%20%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(7)%20%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><strong>直接插入排序</strong></p><p>把$n$个待排序的元素假设为一个有序表和一个无序表，开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次即可完成排序过程</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">int</span> i, j, key;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i] &lt; <span class="hljs-built_in">array</span>[i - <span class="hljs-number">1</span>]) &#123;key = <span class="hljs-built_in">array</span>[i];<span class="hljs-comment">//设置为哨兵</span>            <span class="hljs-comment">//找到合适的插入位置并将比key大的元素后移</span><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; key &lt; <span class="hljs-built_in">array</span>[j] &amp;&amp; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">array</span>[j];<span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>] = key;<span class="hljs-comment">//插入</span>&#125;&#125;&#125;</code></pre><p><strong>折半插入排序</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSortbyHalf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> i,j,key,mid,low,high;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] &lt; <span class="hljs-built_in">array</span>[i<span class="hljs-number">-1</span>])&#123;            key = <span class="hljs-built_in">array</span>[i];            low = <span class="hljs-number">0</span>,high = i<span class="hljs-number">-1</span>;          <span class="hljs-comment">//找到插入的位置</span>            <span class="hljs-keyword">while</span>(low &lt;= high)&#123;                mid = (low + high) / <span class="hljs-number">2</span>;                <span class="hljs-keyword">if</span>(key &lt; <span class="hljs-built_in">array</span>[mid])                    high = mid - <span class="hljs-number">1</span>;                <span class="hljs-keyword">else</span>                    low = mid + <span class="hljs-number">1</span>;            &#125;          <span class="hljs-comment">//统一移动元素</span>            <span class="hljs-keyword">for</span>(j = i<span class="hljs-number">-1</span>;j &gt;= high+<span class="hljs-number">1</span>;j--)&#123;                <span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">array</span>[j];            &#125;            <span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>] = key;<span class="hljs-comment">//插入</span>        &#125;    &#125;&#125;</code></pre><p><strong>希尔排序</strong></p><p>增量序列 $d<em>1，d_2，\cdots，d_k$，其中 $d_1=n/2,d</em>{i+1}=[d_i/2],d_k = 1$；</p><p>按增量序列个数 $k$，对序列进行 $k$ 趟排序；</p><p>每趟排序，先根据对应的增量 $d_i$，将待排序序列分割为$d_i$个组，距离为$d_i$的元素为同一组，再对每个组进行直接插入排序，直到$d_i =1$,即所有元素已在同一组中，再进行一次直接插入排序</p><p><img src="\images\dataStructure\81.png" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">int</span> di, i,j, key;<span class="hljs-keyword">for</span> (di = n/<span class="hljs-number">2</span>; di &gt;= <span class="hljs-number">1</span>; di = di/<span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//设置增量</span>        <span class="hljs-comment">//分组并进行插入排序</span><span class="hljs-keyword">for</span> (i = di; i &lt; n; i++) &#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i] &lt; <span class="hljs-built_in">array</span>[i - di]) &#123;key = <span class="hljs-built_in">array</span>[i];<span class="hljs-keyword">for</span> (j = i - di; j &gt;= <span class="hljs-number">0</span> &amp;&amp; key &lt; <span class="hljs-built_in">array</span>[j]; j = j - di) &#123;<span class="hljs-built_in">array</span>[j + di] = <span class="hljs-built_in">array</span>[j];&#125;<span class="hljs-built_in">array</span>[j + di] = key;&#125;&#125;&#125;&#125;</code></pre><h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><p><strong>冒泡排序</strong></p><p>每次比较两个相邻的元素，如果其顺序错误就交换</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">int</span> key;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>;i++) &#123;<span class="hljs-comment">//LEN-i:每一次都已归位一个数,不再需要与已归位的数比较</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++) &#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[j] &gt; <span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>]) &#123;key = <span class="hljs-built_in">array</span>[j];<span class="hljs-built_in">array</span>[j] = <span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>];<span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>] = key;&#125;&#125;&#125;&#125;</code></pre><p><strong>快速排序</strong></p><p>1.设置两个变量$i,j$，初始化：$i=0，j=n-1$；<br>2.基准数$key=array[0]$；<br>3.从$j$开始向前搜索，即由后开始向前搜索$(j—)$，找到第一个小于$key$的值$array[j]$，将$array[j]$和$array[i]$的值交换；<br>4.从$i$开始向后搜索，即由前开始向后搜索$(i++)$，找到第一个大于key的$array[i]$，将$array[i]$和$array[j]$的值交换；<br>5.重复第3、4步，直到$i=j$；</p><p>经过一趟上述步骤后，基准数左边全小于基准数，基准数右边全大于基准数，通过分治法继续处理左、右</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<span class="hljs-keyword">if</span> (left &gt;= right)&#123;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">int</span> i = left;<span class="hljs-keyword">int</span> j = right;<span class="hljs-keyword">int</span> key = <span class="hljs-built_in">array</span>[left];<span class="hljs-comment">//基准数</span><span class="hljs-keyword">while</span> (i &lt; j)&#123;        <span class="hljs-comment">//向前寻找小于key的数</span><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; key &lt;= <span class="hljs-built_in">array</span>[j])&#123;j--;&#125;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">array</span>[j];        <span class="hljs-comment">//向后寻找大于key的数</span><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; key &gt;= <span class="hljs-built_in">array</span>[i])&#123;i++;&#125;<span class="hljs-built_in">array</span>[j] = <span class="hljs-built_in">array</span>[i];&#125;<span class="hljs-built_in">array</span>[i] = key;<span class="hljs-comment">//基准数归位</span>quickSort(<span class="hljs-built_in">array</span>, left, i - <span class="hljs-number">1</span>);<span class="hljs-comment">//分治处理左边</span>quickSort(<span class="hljs-built_in">array</span>, i + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//分治处理右边</span>&#125;</code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p><strong>简单选择排序</strong></p><p>(1)在未排序序列中找到最小/大元素，存放到排序序列的起始位置;(2)再从剩余未排序元素中继续寻找最小/大元素，放到已排序序列的末尾;重复第二步，直到所有元素均排序完毕</p><p><img src="\images\dataStructure\selectionSort.gif" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-keyword">int</span> <span class="hljs-built_in">min</span> = i;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[j] &lt; <span class="hljs-built_in">array</span>[<span class="hljs-built_in">min</span>])<span class="hljs-built_in">min</span> = j;&#125;<span class="hljs-keyword">if</span> (i != <span class="hljs-built_in">min</span>) &#123;<span class="hljs-keyword">int</span> temp = <span class="hljs-built_in">array</span>[i];<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">array</span>[<span class="hljs-built_in">min</span>];<span class="hljs-built_in">array</span>[<span class="hljs-built_in">min</span>] = temp;&#125;&#125;&#125;</code></pre><p><strong>堆排序</strong></p><p>堆是具有以下性质的完全二叉树：</p><p>1.每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；</p><p>2.每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆；</p><p><img src="\images\dataStructure\45.jpg" srcset="/images/loading.gif" alt=""></p><p>堆排序算法步骤：</p><p>1.构造初始堆，将无序序列构造为大顶堆，从倒数第一个非叶子结点开始调整,从左至右，从下至上进行调整；</p><p>倒数第$i$个非叶子结点索引$index=array.length/2^i-1(i=1,2,3\dots|2^i\leqslant  array.length)$</p><p><img src="\images\dataStructure\46.jpg" srcset="/images/loading.gif" alt=""></p><p>2.将堆顶元素与末尾元素进行交换，使末尾元素最大，然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素，如此反复进行交换、重建、交换…</p><p><img src="\images\dataStructure\47.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span>* b)</span></span>&#123;<span class="hljs-keyword">int</span> temp = *b;*b = *a;*a = temp;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">max_heapify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span></span>&#123;<span class="hljs-comment">//建立父节点指标和子结点指标</span><span class="hljs-keyword">int</span> dad = start;<span class="hljs-keyword">int</span> son = dad * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (son &lt;= <span class="hljs-built_in">end</span>)&#123;<span class="hljs-comment">//若子结点索引在范围内才做比较</span><span class="hljs-comment">//先比较两个子结点大小，选择最大的</span><span class="hljs-keyword">if</span> (son + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">end</span> &amp;&amp; <span class="hljs-built_in">array</span>[son] &lt; <span class="hljs-built_in">array</span>[son + <span class="hljs-number">1</span>])son++;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[dad] &gt; <span class="hljs-built_in">array</span>[son]) <span class="hljs-comment">//如果父节点大於子结点代表调整完毕，直接跳出函数</span><span class="hljs-keyword">return</span>;<span class="hljs-keyword">else</span>&#123;swap(&amp;<span class="hljs-built_in">array</span>[dad], &amp;<span class="hljs-built_in">array</span>[son]);dad = son;son = dad * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> len)</span></span>&#123;<span class="hljs-keyword">int</span> i;<span class="hljs-comment">//初始化，生成最大堆</span><span class="hljs-keyword">for</span> (i = len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)max_heapify(<span class="hljs-built_in">array</span>, i, len - <span class="hljs-number">1</span>);<span class="hljs-comment">//堆顶元素与末尾元素进行交换，再重新调整，直到排序完毕</span><span class="hljs-keyword">for</span> (i = len - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)&#123;swap(&amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>], &amp;<span class="hljs-built_in">array</span>[i]);max_heapify(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);&#125;&#125;</code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>假定含有$n$个元素的待排序表，则可视为$n$个有序的子表，每个子表长度为1，然后两两归并，得到[$n/2$]个长度为2或1的有序表；再两两归并$\cdots$,直到合并长度为$n$的有序表为止</p><p><img src="\images\dataStructure\82.png" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> temp[])</span></span>&#123;<span class="hljs-keyword">int</span> i = low, j = mid + <span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> m = mid, n = high;<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= n)&#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i] &lt;= <span class="hljs-built_in">array</span>[j])temp[k++] = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">else</span>temp[k++] = <span class="hljs-built_in">array</span>[j++];&#125;<span class="hljs-keyword">while</span> (i &lt;= m)temp[k++] = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">while</span> (j &lt;= n)temp[k++] = <span class="hljs-built_in">array</span>[j++];<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; k; i++)<span class="hljs-built_in">array</span>[low + i] = temp[i];&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> temp[])</span></span>&#123;<span class="hljs-keyword">if</span> (low &lt; high)&#123;<span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;mergesort(<span class="hljs-built_in">array</span>, low, mid, temp);    mergesort(<span class="hljs-built_in">array</span>, mid + <span class="hljs-number">1</span>, high, temp); merge(<span class="hljs-built_in">array</span>, low, mid, high, temp);&#125;&#125;</code></pre><hr><p><img src="\images\dataStructure\83.png" srcset="/images/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(6) 查找</title>
    <link href="/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(6)%20%E6%9F%A5%E6%89%BE/"/>
    <url>/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(6)%20%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h1><p>1.一般线性表</p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    ElemType *elem;<span class="hljs-comment">//0号单元留空</span>    <span class="hljs-keyword">int</span> length;&#125;STable;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(STable table,ElemType key)</span></span>&#123;    table.elem[<span class="hljs-number">0</span>] = key;<span class="hljs-comment">//哨兵</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = table.length;table.elem[i] != key; --i);    <span class="hljs-keyword">return</span> i;&#125;</code></pre><h1 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h1><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(SeqList <span class="hljs-built_in">list</span>,ElemType key)</span></span>&#123;    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;high = <span class="hljs-built_in">list</span>.length<span class="hljs-number">-1</span>;mid;    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;        mid = (low+high)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>.elem[mid] == key)            <span class="hljs-keyword">return</span> mid;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>.elem[mid] &lt; key)            low = mid+<span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span>            high = mid<span class="hljs-number">-1</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//查找失败</span>&#125;</code></pre><h1 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h1><p>$B$树中所有结点的子结点数的最大值称为$B$树的阶，一个 $m$ 阶的$B$树是一个有以下属性的树：</p><p><strong>1</strong>.每一个结点最多有 $m $个子结点，即每个结点至多含有$m-1$个关键字<br>2.每一个非叶子结点（除根结点）最少有 $⌈m/2⌉$ 个子结点,即至少含有$[m/2]-1$个关键字<br>3.如果根结点不是叶子结点，那么它至少有两个子结点<br>4.有 $k$ 个子结点的非叶子结点拥有 $k − 1$ 个键<br>5.所有的叶子结点都在同一层</p><p>非根内部结点的关键字个数$n$范围：$[m/2]-1 \leq n \leq m-1$,根结点关键字个数$n$范围：$1 \leq n\leq m-1$</p><p>每一个内部结点的键将结点的子树分开。</p><p>例如，如果一个内部结点有3个子结点（子树），那么它就必须有两个键： $a_1 $和 $a_2$ </p><p>左边子树的所有值都必须小于 $a_1$ ，中间子树的所有值都必须在 $a_1$ 和$a_2$ 之间，右边子树的所有值都必须大于$ a_2$ </p><p><img src="\images\dataStructure\44.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>B树的查找</strong></p><p>1.在$B$中找结点 (读入内存) 2.在结点内找关键字(通过顺序查找或折半查找查找等于key的关键字)</p><p><strong>B树的插入</strong></p><p>所有的插入都从根结点开始，要插入一个新的元素，首先搜索这棵树，找到新元素应该被添加到的叶子结点</p><p>将新元素插入到这一结点中的步骤如下：</p><p>如果结点拥有的元素数量小于最大值，那么有空间容纳新的元素，将新元素插入到这一结点，且保持结点中元素有序，否则这一结点已经满了，将它平均地分裂成两个结点：从叶子结点的元素和新的元素中选择出中位数；小于这一中位数的元素放入左边结点，大于这一中位数的元素放入右边结点，中位数作为分隔值.<br><strong>分隔值被插入到父结点中</strong>，这可能会造成父结点分裂，分裂父结点时可能又会使它的父结点分裂，以此类推.如果没有父结点（这一结点是根结点），就创建一个新的根结点（增加了树的高度）,即如果分裂一直上升到根节点，那么一个新的根节点会被创建，它有一个分隔值和两个子节点</p><blockquote><p>以5阶B树为例</p></blockquote><p>[]: <a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p><p>1.空树中插入39</p><p><img src="\images\dataStructure\45.png" srcset="/images/loading.gif" alt=""></p><p>2.继续插入22，97和41</p><p><img src="\images\dataStructure\46.png" srcset="/images/loading.gif" alt=""></p><p>3.继续插入53</p><p><img src="\images\dataStructure\47.png" srcset="/images/loading.gif" alt=""></p><p>插入后超过了最大允许的关键字个数4，需以中位数(41)为中心进行分裂</p><p><img src="\images\dataStructure\48.png" srcset="/images/loading.gif" alt=""></p><p>4.依次插入13，21，40，同样会造成分裂，结果如下图</p><p><img src="\images\dataStructure\49.png" srcset="/images/loading.gif" alt=""></p><p>5.依次插入30，27, 33 ；36，35，34 ；24，29</p><p><img src="\images\dataStructure\50.png" srcset="/images/loading.gif" alt=""></p><p>6.插入key值为26的记录</p><p><img src="\images\dataStructure\51.png" srcset="/images/loading.gif" alt=""></p><p>当前结点需要以27为中心分裂,并向父结点插入27</p><p><img src="\images\dataStructure\52.png" srcset="/images/loading.gif" alt=""></p><p>插入后导致当前结点（即根结点）也需要分裂</p><p><img src="\images\dataStructure\53.png" srcset="/images/loading.gif" alt=""></p><p><strong>B树的删除</strong></p><p>删除时，需要判断结点中关键字的个数$\geqslant [m/2]-1$</p><blockquote><p>5阶B树为例，结点最多有4个key,最少有2个key</p></blockquote><p>[]: <a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p><p><img src="\images\dataStructure\54.png" srcset="/images/loading.gif" alt=""></p><p>1.B树中删除21，删除后结点中的关键字个数仍然大于等2，删除结束</p><p><img src="\images\dataStructure\55.png" srcset="/images/loading.gif" alt=""></p><p>2.删除27，27位于非叶子结点中，利用27的后继28替代</p><p><img src="\images\dataStructure\56.png" srcset="/images/loading.gif" alt=""></p><p>删除后，当前叶子结点的关键字的个数小于2，而它的兄弟结点中有3个关键字，从兄弟结点中借取一个关键字</p><p><img src="\images\dataStructure\57.png" srcset="/images/loading.gif" alt=""></p><p>3.删除32</p><p><img src="\images\dataStructure\58.png" srcset="/images/loading.gif" alt=""></p><p>删除后，当前结点中只有一个关键字，而兄弟结点中也仅有2个关键字，只能让父结点中的30下移并和兄弟结点中的关键字合并，成为一个新的结点，当前结点的指针指向父结点</p><p><img src="\images\dataStructure\59.png" srcset="/images/loading.gif" alt=""></p><p>4.删除40</p><p><img src="\images\dataStructure\60.png" srcset="/images/loading.gif" alt=""></p><p>同理，当前结点的关键字数小于2，兄弟结点中没有多余关键字，所以父结点中的关键字下移，和兄弟结点(左右兄弟结点都可)的关键字合</p><p><img src="\images\dataStructure\61.png" srcset="/images/loading.gif" alt=""></p><p>当前结点关键字个数小于2，继续合并</p><p><img src="\images\dataStructure\62.png" srcset="/images/loading.gif" alt=""></p><p><strong>B+树</strong></p><p>1.每个分支结点最多有$m$个子结点</p><p>2.结点的子结点个数与关键字个数相等(或结点的子结点个数 = 关键字个数+1)</p><p>3.所有叶结点包含全部关键字及指向记录的指针，且叶结点中关键字按大小顺序排列，所有相邻结点按大小顺序互相链接</p><p>4.非根内部结点的关键字个数$n$范围：$[m/2] \leq n \leq m$,根结点关键字个数$n$范围：$1 \leq n\leq m$</p><p><img src="\images\dataStructure\63.png" srcset="/images/loading.gif" alt=""></p><p><strong>B+树的插入</strong></p><blockquote><p>以5阶B树为例</p></blockquote><p>1.空树中插入5</p><p><img src="\images\dataStructure\64.png" srcset="/images/loading.gif" alt=""></p><p>2.依次插入8，10，15</p><p><img src="\images\dataStructure\65.png" srcset="/images/loading.gif" alt=""></p><p>3.插入16</p><p>插入16后超过了关键字的个数限制，需进行分裂</p><p><img src="\images\dataStructure\66.png" srcset="/images/loading.gif" alt=""></p><p>4.插入17</p><p><img src="\images\dataStructure\67.png" srcset="/images/loading.gif" alt=""></p><p>5.插入18</p><p><img src="\images\dataStructure\68.png" srcset="/images/loading.gif" alt=""></p><p>当前结点的关键字个数大于限制的个数，需进行分裂</p><p><img src="\images\dataStructure\69.png" srcset="/images/loading.gif" alt=""></p><p>6.插入若干数据</p><p><img src="\images\dataStructure\70.png" srcset="/images/loading.gif" alt=""></p><p>7.插入7</p><p><img src="\images\dataStructure\71.png" srcset="/images/loading.gif" alt=""></p><p>当前结点的关键字个数大于限制的个数，需进行分裂</p><p><img src="\images\dataStructure\72.png" srcset="/images/loading.gif" alt=""></p><p>当前结点的关键字个数大于限制的个数，需进行分裂</p><p><img src="\images\dataStructure\73.png" srcset="/images/loading.gif" alt=""></p><p><strong>B+树的删除</strong></p><blockquote><p>以5阶B树为例</p></blockquote><p><img src="\images\dataStructure\74.png" srcset="/images/loading.gif" alt=""></p><p>1.删除22</p><p><img src="\images\dataStructure\75.png" srcset="/images/loading.gif" alt=""></p><p>2.删除15</p><p><img src="\images\dataStructure\76.png" srcset="/images/loading.gif" alt=""></p><p>删除后当前结点只有一个关键字，不满足条件，而兄弟结点有三个关键字，从兄弟结点中借关键字为9,同时更新将父结点中的关键字由10变为9，删除结束</p><p><img src="\images\dataStructure\77.png" srcset="/images/loading.gif" alt=""></p><p>3.删除7</p><p><img src="\images\dataStructure\78.png" srcset="/images/loading.gif" alt=""></p><p><img src="\images\dataStructure\79.png" srcset="/images/loading.gif" alt=""></p><p><img src="\images\dataStructure\80.png" srcset="/images/loading.gif" alt=""></p><h1 id="散列-hash-表"><a href="#散列-hash-表" class="headerlink" title="散列(hash)表"></a>散列(hash)表</h1><p><strong>散列函数</strong></p><p>一个把查找表中的关键字映射为该关键字对应的地址函数，记$Hash(key)=Address$</p><p>1.直接定址法 $Hash(key)=a\times key+b$，($a,b$未常数)</p><p>2.除留余数法 $Hash(key)=key\%p$，($p$为质数)</p><p>3.数字分析法 设关键字是$r$进制数，选取数码分布较为均匀的若干位作为散列地址</p><p>4.平方取中法 取关键字的平方值的中间几位作为散列地址</p><p>5.折叠法 将关键字分割成位数相同的块，取块的叠加和作为散列地址</p><p><strong>冲突处理</strong></p><p>散列函数可能会把两个或两个以上的的不同关键字映射到同一地址，这种情况称为”冲突”</p><p>设散列函数为$Hash(key),H_i$表示发生冲突后第$i$次探测的散列地址</p><p>1.开放定址法</p><script type="math/tex; mode=display">H_i=(Hash(key)+d_i)\%m</script><p>$m$表示散列表长度，$d_i$为增量序列</p><p>$d_i$的选取方法：</p><p>1) 线性探测法 $d_i=0,1,2,3,\cdots,m-1$</p><p>2) 平方探测法 $d_i=0^2,1^2,-1^2,2^2,-2^2,\cdots ,k^2,-k^2(k\leqslant m/2)$</p><p>3) 再散列法或双散列法 $d_i=Hash_2(key)$，即$H_i=(Hash(key)+i*Hash_2(key))\%m$($i$为冲突次数)</p><p>4) 伪随机序列法 $d_i=$伪随机数序列</p><p>2.拉链法</p><p>同义词存储在一个线性链表$L_i$中,散列地址为$i$的同义词链表$L_i$的头指针存放在散列表第$i$个单元中</p><p><strong>散列查找过程</strong></p><p>1.初始化：$address = Hash(key)$</p><p>2.若$L[address]=NULL$,则查找失败；若$L[address]\neq NULL$且$L[address]\neq key$，则$H_1=(address+1)\%m$,若$L[H_1]\neq NULL$且$L[H_1]\neq key$,则$H_2=(H_1+2)\%m$,若$L[H_2]\neq NULL$且$L[H_1]\neq key$,则$H_3=\cdots$</p><p>重复执行$H<em>{i+1}=(H_i+(i+1))\%m$ ($i=1,2,3,\cdots,m-1$),直到$L[H</em>{i+1}]=key或L[H_{i+1}]=NULL$</p><h1 id="字符串模式匹配"><a href="#字符串模式匹配" class="headerlink" title="字符串模式匹配"></a>字符串模式匹配</h1><p>1.简单的模式匹配算法</p><p>从主串S的指定字符开始，和模式串的第一个字符比较，若相等则继续逐个比较后续字符，直到模式串中的每个字符依次和主串的一个连续字符序列相等，则匹配成功；若比较过程中有某对字符不相等，则从主串的下一个字符重新与模式串的第一个字符相比较。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">matching</span><span class="hljs-params">(<span class="hljs-keyword">String</span> target, <span class="hljs-keyword">String</span> pattern, <span class="hljs-keyword">int</span> <span class="hljs-built_in">begin</span>)</span> </span>&#123;<span class="hljs-comment">// i为目标串target的索引</span><span class="hljs-keyword">int</span> i = <span class="hljs-built_in">begin</span>;<span class="hljs-comment">// j为模式串pattern的索引</span><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (target == null || pattern == null || <span class="hljs-built_in">begin</span> &gt; target.length()) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">while</span> (i &lt; target.length() &amp;&amp; j &lt; pattern.length())&#123;<span class="hljs-keyword">if</span> (target[i] == pattern[j]) &#123;i++;j++;&#125; <span class="hljs-keyword">else</span> &#123;i = i - j + <span class="hljs-number">1</span>;j = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">// 模式串是否存在于目标串</span><span class="hljs-keyword">if</span> (j == pattern.length()) &#123;<span class="hljs-keyword">return</span> i - pattern.length() ;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;</code></pre><p>2.KMP模式匹配算法</p><p>wait</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv3(2) 图像载入-显示-输出</title>
    <link href="/2019/07/10/opencv3(2)%20%E5%9B%BE%E5%83%8F%E8%BD%BD%E5%85%A5-%E6%98%BE%E7%A4%BA-%E8%BE%93%E5%87%BA/"/>
    <url>/2019/07/10/opencv3(2)%20%E5%9B%BE%E5%83%8F%E8%BD%BD%E5%85%A5-%E6%98%BE%E7%A4%BA-%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<ul><li>载入函数</li></ul><pre><code class="hljs cpp"><span class="hljs-function">Mat <span class="hljs-title">imread</span><span class="hljs-params">( <span class="hljs-keyword">const</span> String&amp; filename, <span class="hljs-keyword">int</span> flags = IMREAD_COLOR )</span></span>;IMREAD_UNCHANGED   = <span class="hljs-number">-1</span>, <span class="hljs-comment">//!&lt; If set, return the loaded image as is (with alpha channel, otherwise it gets cropped).</span>IMREAD_GRAYSCALE   = <span class="hljs-number">0</span>,  <span class="hljs-comment">//!&lt; If set, always convert image to the single channel grayscale image.</span>IMREAD_COLOR       = <span class="hljs-number">1</span>,  <span class="hljs-comment">//!&lt; If set, always convert image to the 3 channel BGR color image.</span>IMREAD_ANYDEPTH    = <span class="hljs-number">2</span>,  <span class="hljs-comment">//!&lt; If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.</span>IMREAD_ANYCOLOR    = <span class="hljs-number">4</span>,  <span class="hljs-comment">//!&lt; If set, the image is read in any possible color format.</span>Mat img = imread(<span class="hljs-string">"D:/learn/dota.jpg"</span>);</code></pre><ul><li>显示函数</li></ul><pre><code class="hljs cpp">imshow(<span class="hljs-string">"dota"</span>, img);</code></pre><ul><li>输出函数</li></ul><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">imwrite</span><span class="hljs-params">( <span class="hljs-keyword">const</span> String&amp; filename, InputArray img,              <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; params = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;())</span></span>;imwrite(<span class="hljs-string">"D:/new_dota.jpg"</span>, img);</code></pre><ul><li><p>实例</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/highgui/highgui.hpp&gt;  </span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//图像显示</span>Mat logo = imread(<span class="hljs-string">"D:/learn/logo.jpg"</span>);imshow(<span class="hljs-string">"logo"</span>, logo);<span class="hljs-comment">//图像混合</span>Mat img = imread(<span class="hljs-string">"D:/learn/dota.jpg"</span>);imshow(<span class="hljs-string">"img"</span>, img);Mat imgROI;imgROI = img(Rect(<span class="hljs-number">800</span>, <span class="hljs-number">350</span>, logo.cols, logo.rows));<span class="hljs-comment">//logo加载到背景图</span>addWeighted(imgROI,<span class="hljs-number">0.5</span>,logo,<span class="hljs-number">0.3</span>,<span class="hljs-number">0</span>,imgROI);imshow(<span class="hljs-string">"dota_logo"</span>, img);<span class="hljs-comment">//保存混合的图像</span>imwrite(<span class="hljs-string">"D:/learn/dota_logo.jpg"</span>,img);waitKey(<span class="hljs-number">0</span>);&#125;</code></pre><p><img src="/images/opencv3/18.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/opencv3/19.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/opencv3/20.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/opencv3/21.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>读取视频文件 调用摄像头 写入视频文件</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;namedWindow(<span class="hljs-string">"cap"</span>, cv::WINDOW_AUTOSIZE);VideoCapture cap;Mat frame;cap.open(<span class="hljs-number">0</span>);<span class="hljs-comment">//视频流写出</span>Size size = Size(cap.get(CV_CAP_PROP_FRAME_WIDTH), cap.get(CV_CAP_PROP_FRAME_HEIGHT));VideoWriter writer;writer.open(<span class="hljs-string">"test.avi"</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">10</span>, size);<span class="hljs-comment">//</span><span class="hljs-keyword">for</span> (;;)&#123;cap &gt;&gt; frame;imshow(<span class="hljs-string">"out"</span>, frame);writer &lt;&lt; frame;<span class="hljs-keyword">if</span> (waitKey(<span class="hljs-number">33</span>) &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;&#125;cap.release();<span class="hljs-comment">//waitKey(0);</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></li></ul><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>opencv3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv3(1-1) vs2015配置opencv3开发环境</title>
    <link href="/2019/07/10/opencv3(1-1)%20vs2015%E9%85%8D%E7%BD%AEopencv3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2019/07/10/opencv3(1-1)%20vs2015%E9%85%8D%E7%BD%AEopencv3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="vs2015配置opencv3开发环境"><a href="#vs2015配置opencv3开发环境" class="headerlink" title="vs2015配置opencv3开发环境"></a>vs2015配置opencv3开发环境</h2><p>官网地址:<a href="https://opencv.org/" target="_blank" rel="noopener">https://opencv.org/</a></p><ul><li><p>下载<br><img src="/images/opencv3/1.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/2.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></p></li><li><p>下载完成后双击安装,并配置环境变量<br><img src="/images/opencv3/3.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></p></li><li>打开VS2015,新建项目<br><img src="/images/opencv3/4.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/5.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><strong>配置opencv</strong><br><img src="/images/opencv3/6.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>添加包含目录<br><img src="/images/opencv3/7.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/8.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>添加库目录<br><img src="/images/opencv3/9.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/10.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>添加附加依赖项 将vc14下的lib都添加进来,以d结尾的lib文件为调试使用<br><img src="/images/opencv3/11.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/12.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>测试<br><img src="/images/opencv3/13.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/14.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;Mat img = imread(<span class="hljs-string">"D:/learn/dota.jpg"</span>);imshow(<span class="hljs-string">"dota"</span>, img); waitKey(<span class="hljs-number">6000</span>);&#125;</code></pre></li><li>运行<br><img src="/images/opencv3/15.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>结果<br><img src="/images/opencv3/16.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li></ul><hr><p><strong>opencv模块简介</strong><br><img src="/images/opencv3/17.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></p><ul><li>calib3d<br>相机校准和3维重建相关的内容,包括多视角几何算法、单个立体摄像头标定、物体姿态估计、立体相似性算法等</li><li>core<br>核心功能模块,包含opencv基本数据结构、动态数据结构、绘图函数、数组操作、辅助函数/系统函数/宏、OpenGL互操作</li><li>imgproc<br>图像处理模块,包含线性和非线性的图像滤波、图像几何变换、直方图、结构分和形状描述、运动分析、运动分析和对象跟踪、特征检测、目标检测</li><li>features2d<br>2D功能模块,包含特征检测和描述、特征检测器通用接口、描述符提取器、描述符匹配器、通用描述符匹配器接口、关键点绘制函数和匹配功能绘制函数</li><li>flann<br>高维近似近邻快速搜索算法库,包含快速近似最近邻搜索、聚类</li><li>gpu<br>运用GPU加速计算机视觉模块</li><li>highgui<br>高层GUI图形用户界面,包含媒体输入输出、视频捕捉、图像和视频编码解码、图形交互界面接口</li><li>legacy<br>废弃的代码库,用于向下兼容</li><li>ml<br>机器学习模块，包含统计模型、贝叶斯分类器、支持向量机、决策树、提升、随机树、神经网络</li><li>objdetect<br>目标检测模块,包含级联分类和LatentSVM</li><li>photo<br>图像修复和去噪</li><li>stitching<br>图像拼接模块,包含拼接流水线、特点寻找和匹配图像、估计旋转、自动校准、图片歪斜、接缝估测、曝光补偿、图片混合</li><li>superres<br>超分辨率技术模块</li><li>video<br>视频分析组件,包含运动估计、背景分离、对象跟踪</li><li>videostab<br>视频稳定组件</li></ul><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>opencv3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++教程(4) C++标准库</title>
    <link href="/2019/07/09/C++%E6%95%99%E7%A8%8B(4)%20C++%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/2019/07/09/C++%E6%95%99%E7%A8%8B(4)%20C++%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h3><p>Class Pair将两个value视为一个单元<br><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>&#123;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> U&gt;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pair</span>&#123;</span>T first;U second;...&#125;;&#125;</code></pre><br><img src="/images/pair.jpg" srcset="/images/loading.gif" alt=""></p><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>tuple可拥有任意类型任意数量的元素<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::tuple&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">char</span>,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; tuple(<span class="hljs-number">1</span>, <span class="hljs-number">2.3</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">"hello wolrd"</span>);</code></pre><br><img src="/images/tuple.jpg" srcset="/images/loading.gif" alt=""><br>tuple不允许迭代,运行时传入索引值将报错<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::get&lt;i&gt;(tuple);<span class="hljs-comment">//错误</span></code></pre></p><h3 id="Smart-Pointer-智能指针"><a href="#Smart-Pointer-智能指针" class="headerlink" title="Smart Pointer(智能指针)"></a>Smart Pointer(智能指针)</h3><p>Smart Pointer能够得知本身是否为指向某个对象的最后一个指针,当其为指向某个对象的最后一个指针且被删除时即会销毁所指对象</p><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p>共享式拥有 多个smart pointer指向同一对象,对象和资源在最后一个smart pointer销毁时被释放<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;memory&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt; x(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">"kyleson"</span>));<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt; y(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">"monica"</span>));(*x)[<span class="hljs-number">0</span>] = <span class="hljs-string">'K'</span>;y-&gt;replace(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">"J"</span>);<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; person;person.push_back(x);person.push_back(y);person.push_back(x);person.push_back(y);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ptr : person)<span class="hljs-built_in">cout</span> &lt;&lt; *ptr &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;*x = <span class="hljs-string">"Nonica"</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ptr : person)<span class="hljs-built_in">cout</span> &lt;&lt; *ptr &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"use_count:"</span> &lt;&lt; person[<span class="hljs-number">0</span>].use_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//所指对象当前拥有者(指针)数量</span>getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;Kyleson Jonica Kyleson JonicaNonica Jonica Nonica Jonicause_count:<span class="hljs-number">3</span></code></pre><br>当string的最后一个拥有者shared_ptr被销毁,所指对象随即调用delete<br>对象的delete不一定发生在 程序终点 , 将nullptr赋值给x或者调整vector大小使其只含有y,则都会调用delete</p><h4 id="自定义delete"><a href="#自定义delete" class="headerlink" title="自定义delete"></a>自定义delete</h4><pre><code class="hljs cpp"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt; x(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">"kyleson"</span>), [](<span class="hljs-built_in">string</span> *p)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"delete"</span> &lt;&lt; *p;<span class="hljs-keyword">delete</span> p;&#125;);</code></pre><p>当最后一个拥有者被销毁时,将调用该lambda函数</p><p>shared point的默认调用delete，而非delete [],当智能指针指向数组时需自定义delete<br><pre><code class="hljs cpp"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; p(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>], [](<span class="hljs-keyword">int</span> *p) &#123;<span class="hljs-keyword">delete</span>[] p; &#125;);<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; p(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>],<span class="hljs-built_in">std</span>::default_delete&lt;<span class="hljs-keyword">int</span>[]&gt;());<span class="hljs-comment">//利用unique_ptr提供的辅助函数</span></code></pre></p><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p>weak_ptr共享但不拥有某对象,一旦最末拥有该对象的shared_ptr失去拥有权,任何weak_ptr都会自动成空<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;memory&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-built_in">string</span> name;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; mother;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; father;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt;&gt; kids;Person(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;name,    <span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; m = <span class="hljs-literal">nullptr</span>,    <span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; f = <span class="hljs-literal">nullptr</span>) :   name(name), mother(m), father(f) &#123;&#125;;~Person()&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"delete "</span> &lt;&lt; name &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; initFamily(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;name) &#123;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; mom(<span class="hljs-keyword">new</span> Person(name + <span class="hljs-string">"'s mom"</span>));<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; dad(<span class="hljs-keyword">new</span> Person(name + <span class="hljs-string">"'s dad"</span>));<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; kid(<span class="hljs-keyword">new</span> Person(name, mom, dad));mom-&gt;kids.push_back(kid);dad-&gt;kids.push_back(kid);<span class="hljs-keyword">return</span> kid;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; p = initFamily(<span class="hljs-string">"kyleson"</span>);<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"kyleson's family exits"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"- kyleson is shared "</span> &lt;&lt; p.use_count() &lt;&lt; <span class="hljs-string">" times"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"- name of 1st kid of kyleson's mom:"</span>&lt;&lt; p-&gt;mother-&gt;kids[<span class="hljs-number">0</span>]-&gt;name &lt;&lt; <span class="hljs-built_in">endl</span>;p = initFamily(<span class="hljs-string">"Ninoca"</span>);<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"- Ninoca is shared "</span> &lt;&lt; p.use_count() &lt;&lt; <span class="hljs-string">" times"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;kyleson<span class="hljs-number">'</span>s family exits- kyleson is shared <span class="hljs-number">3</span> times- name of <span class="hljs-number">1</span>st kid of kyleson<span class="hljs-number">'</span>s mom:kyleson- Ninoca is shared <span class="hljs-number">3</span> times</code></pre><br>程序结束时,并未打印”delete kyleon”或“delete Ninoca”，即未执行析构函数,Person内部存在循环指向,其对象在程序结束时仍至少被一个shared_ptr指向.<br><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;weak_ptr&lt;Person&gt;&gt; kids;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"- name of 1st kid of kyleson's mom:"</span>&lt;&lt; p-&gt;mother-&gt;kids[<span class="hljs-number">0</span>].lock()-&gt;name &lt;&lt; <span class="hljs-built_in">endl</span>;kyleson<span class="hljs-number">'</span>s family exits- kyleson is shared <span class="hljs-number">1</span> times- name of <span class="hljs-number">1</span>st kid of kyleson<span class="hljs-number">'</span>s mom:kyleson<span class="hljs-keyword">delete</span> kyleson<span class="hljs-keyword">delete</span> kyleson<span class="hljs-number">'</span>s dad<span class="hljs-keyword">delete</span> kyleson<span class="hljs-number">'</span>s mom- Ninoca is shared <span class="hljs-number">1</span> times...</code></pre><br>使用weak_ptr将会解决循环指向问题,当改变p的指向后调用了析构函数,且当程序结束时”Ninoca”的析构函数也将被调用<br><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *x = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; sp1(x);<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; sp2(x);<span class="hljs-comment">//错误</span><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; sp3 = sp1;<span class="hljs-comment">//正确</span></code></pre><br>问题出在sp1和sp2意味着”两个指向团队”,都会在丢失x的拥有权时释放资源，因此相应的资源会被释放两次而导致错误<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><span class="hljs-keyword">public</span>:    ...<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setParentAndTheirKids</span><span class="hljs-params">(<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; m = <span class="hljs-literal">nullptr</span>, <span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; f = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;mother = m;father = f;<span class="hljs-keyword">if</span> (m != <span class="hljs-literal">nullptr</span>)m-&gt;kids.push_back(<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt;(<span class="hljs-keyword">this</span>));<span class="hljs-comment">//错误 引入了新的指向团队</span><span class="hljs-keyword">if</span> (f != <span class="hljs-literal">nullptr</span>)f-&gt;kids.push_back(<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt;(<span class="hljs-keyword">this</span>));<span class="hljs-comment">//错误 引入了新的指向团队</span>&#125;&#125;;</code></pre><br>根据this建立的shared_ptr同样建立了新的”指向团队”<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> :</span><span class="hljs-built_in">std</span>::enable_shared_from_this&lt;Person&gt;&#123;<span class="hljs-keyword">public</span>:    ...<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setParentAndTheirKids</span><span class="hljs-params">(<span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; m = <span class="hljs-literal">nullptr</span>, <span class="hljs-built_in">shared_ptr</span>&lt;Person&gt; f = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;mother = m;father = f;<span class="hljs-keyword">if</span> (m != <span class="hljs-literal">nullptr</span>)m-&gt;kids.push_back(shared_from_this());<span class="hljs-keyword">if</span> (f != <span class="hljs-literal">nullptr</span>)f-&gt;kids.push_back(shared_from_this());&#125;&#125;;</code></pre></p><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p>独占式拥有 同一时间只有一个smart pointer指向该对象</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++教程(3) 模板和泛型编程</title>
    <link href="/2019/07/06/C++%E6%95%99%E7%A8%8B(3)%20%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/"/>
    <url>/2019/07/06/C++%E6%95%99%E7%A8%8B(3)%20%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>通过 template <typename T>定义函数模板,T的类型由编译时根据模板函数的使用情况而定 即根据传入的实参推断T的类型.由此模板函数即可处理任何数据类型,而不用为每种数据类型编写重复的函数代码<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, <span class="hljs-keyword">const</span> T &amp;b)</span> </span>&#123;<span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">5</span>;<span class="hljs-keyword">double</span> c = <span class="hljs-number">2</span>, d = <span class="hljs-number">-1</span>;<span class="hljs-built_in">string</span> e = <span class="hljs-string">"A"</span>, f = <span class="hljs-string">"A"</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; compare(a, b) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; compare(c, d) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; compare(e, f) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果: <span class="hljs-number">-1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span></code></pre><br>模板函数返回值<br><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-function">T <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, <span class="hljs-keyword">const</span> T &amp;b)</span> </span>&#123;T temp = b;....<span class="hljs-keyword">return</span> temp;&#125;</code></pre><br>多个模板函数参数<br><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> U&gt;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, <span class="hljs-keyword">const</span> U &amp;b)</span> </span>&#123;....&#125;</code></pre><br>内联模板函数<br><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, <span class="hljs-keyword">const</span> T &amp;b)</span></span>;</code></pre></p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">class</span> <span class="hljs-title">Stack</span> &#123;</span><span class="hljs-keyword">private</span>:<span class="hljs-built_in">vector</span>&lt;T&gt; elems;<span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T <span class="hljs-keyword">const</span>&amp;)</span></span>; <span class="hljs-comment">//入栈</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;          <span class="hljs-comment">//出栈</span><span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;       <span class="hljs-comment">//栈顶元素</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> elems.empty();&#125;&#125;;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">void</span> <span class="hljs-title">Stack</span>&lt;T&gt;:</span>:push(T <span class="hljs-keyword">const</span>&amp; elem)&#123;elems.push_back(elem);&#125;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">void</span> <span class="hljs-title">Stack</span>&lt;T&gt;:</span>:pop()&#123;<span class="hljs-keyword">if</span> (elems.empty()) &#123;<span class="hljs-keyword">throw</span> out_of_range(<span class="hljs-string">"Stack&lt;&gt;::pop(): empty stack"</span>);&#125;elems.pop_back();&#125;<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">T</span> <span class="hljs-title">Stack</span>&lt;T&gt;:</span>:top() <span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">if</span> (elems.empty()) &#123;<span class="hljs-keyword">throw</span> out_of_range(<span class="hljs-string">"Stack&lt;&gt;::top(): empty stack"</span>);&#125;<span class="hljs-keyword">return</span> elems.back();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">try</span> &#123;Stack&lt;<span class="hljs-keyword">int</span>&gt;    intStack;  <span class="hljs-comment">// int 类型的栈 </span>Stack&lt;<span class="hljs-built_in">string</span>&gt; stringStack;    <span class="hljs-comment">// string 类型的栈 </span><span class="hljs-comment">// 操作 int 类型的栈 </span>intStack.push(<span class="hljs-number">7</span>);<span class="hljs-built_in">cout</span> &lt;&lt; intStack.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 操作 string 类型的栈 </span>stringStack.push(<span class="hljs-string">"hello"</span>);<span class="hljs-built_in">cout</span> &lt;&lt; stringStack.top() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;stringStack.pop();<span class="hljs-comment">//stringStack.pop();</span>&#125;<span class="hljs-keyword">catch</span> (exception <span class="hljs-keyword">const</span>&amp; ex) &#123;<span class="hljs-built_in">cerr</span> &lt;&lt; <span class="hljs-string">"Exception: "</span> &lt;&lt; ex.what() &lt;&lt; <span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>Note:T top() <strong>cons</strong>t; 表示函数Top()为只读操作,不能对类成员进行修改<br>默认模板参数<br><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>=<span class="hljs-title">int</span>&gt; <span class="hljs-title">class</span> <span class="hljs-title">Stack</span> &#123;</span>...&#125;</code></pre></p><h3 id="成员模板"><a href="#成员模板" class="headerlink" title="成员模板"></a>成员模板</h3><p>普通类里定义模板函数或模板内部类<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> &#123;</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(T &amp;)</span></span>;&#125;;<span class="hljs-comment">//定义</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">void</span> Car::run(T &amp; a,)&#123;...&#125;</code></pre><br>类模板里定义独立的成员模板<br><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> &#123;</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> U&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">(U a, U b)</span></span>;&#125;;<span class="hljs-comment">//定义</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> U&gt;<span class="hljs-keyword">void</span> Car&lt;T&gt;::run(U a, U b)&#123;...&#125;</code></pre></p><h3 id="函数模板显式实参"><a href="#函数模板显式实参" class="headerlink" title="函数模板显式实参"></a>函数模板显式实参</h3><p>显示模板实参在调用时由用户指出<br><pre><code class="hljs cpp">template &lt;typename T1,typename T2,typename T3&gt;T3 sum(T1,T2)；//T3为显示模板实参double a = 2.0,b = 3.0;auto val = sum&lt;int&gt;(a,b);//指定显示模板实参T3为int，T2,T3由a，b推断得出</code></pre></p><h3 id="可变参数模板"><a href="#可变参数模板" class="headerlink" title="可变参数模板"></a>可变参数模板</h3><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ... Args&gt;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(T &amp;t, <span class="hljs-keyword">const</span> Args&amp; ... rest)</span></span>;foo(<span class="hljs-number">1</span>,<span class="hljs-string">'A'</span>);foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'C'</span>);</code></pre><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++教程(2) 面向对象编程</title>
    <link href="/2019/07/05/C++%E6%95%99%E7%A8%8B(2)%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2019/07/05/C++%E6%95%99%E7%A8%8B(2)%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义和声明"><a href="#定义和声明" class="headerlink" title="定义和声明"></a>定义和声明</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>; <span class="hljs-comment">//声明函数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> a = <span class="hljs-number">6</span>, b = <span class="hljs-number">9</span>;<span class="hljs-keyword">int</span> c = add(a, b);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//定义函数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">int</span> c = a + b;<span class="hljs-keyword">return</span> c;&#125;</code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> <span class="hljs-comment">//副本传递</span><span class="hljs-comment">//副本传递时,修改val不影响原来的val值</span><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;val)</span> <span class="hljs-comment">//引用传递</span><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *val)</span> <span class="hljs-comment">//指针传递</span><span class="hljs-comment">//指针和引用传递时,修改val会影响原来的val值</span><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> args ...)</span></span>;<span class="hljs-comment">//可变参数</span></code></pre><pre><code class="hljs cpp">#实例 数字交换<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">int</span> &amp;)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *, <span class="hljs-keyword">int</span> *)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> a = <span class="hljs-number">6</span>, b = <span class="hljs-number">9</span>;func1(a, b);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"func1 ----&gt; a:"</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" b:"</span>&lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//a,b未交换</span>func2(a, b);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"func2 ----&gt; a:"</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" b:"</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//a,b被交换</span>func3(&amp;a, &amp;b);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"func3 ----&gt; a:"</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" b:"</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//a,b被交换</span>getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;temp = a;a = b;b = temp;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;temp = a;a = b;b = temp;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> *b)</span> </span>&#123;<span class="hljs-keyword">int</span> *temp = <span class="hljs-number">0</span>;temp = a;a = b;b = temp;&#125;结果:func1 ----&gt; a:<span class="hljs-number">6</span> b:<span class="hljs-number">9</span>func2 ----&gt; a:<span class="hljs-number">9</span> b:<span class="hljs-number">6</span>func3 ----&gt; a:<span class="hljs-number">9</span> b:<span class="hljs-number">6</span></code></pre><h3 id="函数地址作为函数参数"><a href="#函数地址作为函数参数" class="headerlink" title="函数地址作为函数参数"></a>函数地址作为函数参数</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">int</span> &amp;)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">void</span>(*pf)(<span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">int</span> &amp;))</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> a = <span class="hljs-number">6</span>, b = <span class="hljs-number">9</span>;<span class="hljs-keyword">void</span>(*pf)(<span class="hljs-keyword">int</span> &amp;, <span class="hljs-keyword">int</span> &amp;);pf = swap;(*pf)(a,b);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"a:"</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" b:"</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//a,b被交换</span><span class="hljs-keyword">int</span> c = <span class="hljs-number">17</span>, d = <span class="hljs-number">29</span>;func1(c,d,pf);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"c:"</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">" d:"</span> &lt;&lt; d &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">// c,d被交换</span>getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;c,<span class="hljs-keyword">int</span> &amp;d,<span class="hljs-keyword">void</span> (*pf)(<span class="hljs-keyword">int</span> &amp;,<span class="hljs-keyword">int</span> &amp;))</span> </span>&#123;(*pf)(c,d);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;temp = a;a = b;b = temp;&#125;结果:a:<span class="hljs-number">9</span> b:<span class="hljs-number">6</span>c:<span class="hljs-number">29</span> d:<span class="hljs-number">17</span></code></pre><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>常规函数的调用过程<br>程序执行到”函数指令”代码处时,立即存储”函数指令”代码的内存地址,并将函数参数复制到堆栈,然后跳到函数起点的内存单元((函数的内存地址,非”函数指令”代码地址)执行函数代码,函数执行结束后跳回保存的”函数指令”内存地址处,即跳回到程序执行函数指令的那一行,然后继续执行余下的指令.<br>内联函数调用过程<br>程序执行到”函数指令”代码处时,编译器将调用的函数代码替换掉该函数指令,无需再跳转到函数的位置去执行.速度比常规函数调用快,但内存开销大,假设程序有10个地方条用了同一个内联函数,则程序中将包含该内联函数代码的10个副本.<br><img src="/images/func.png" srcset="/images/loading.gif" alt=""><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;     <span class="hljs-keyword">return</span> (x &gt; y) ? x : y;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Max (20,10):"</span> &lt;&lt; Max(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;     <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Max (0,200): "</span> &lt;&lt; Max(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Max(100,1010): "</span> &lt;&lt; Max(<span class="hljs-number">100</span>, <span class="hljs-number">1010</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果:Max (<span class="hljs-number">20</span>,<span class="hljs-number">10</span>): <span class="hljs-number">20</span>Max (<span class="hljs-number">0</span>,<span class="hljs-number">200</span>): <span class="hljs-number">200</span>Max (<span class="hljs-number">100</span>,<span class="hljs-number">1010</span>): <span class="hljs-number">1010</span></code></pre></p><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><p>带默认参数的函数 必须从右至左添加默认值<br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">double</span> c = <span class="hljs-number">3.14</span>)</span></span>; <span class="hljs-comment">//合法</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>,<span class="hljs-keyword">double</span> c)</span></span>; <span class="hljs-comment">//非法</span>#调用时具有默认参数的参数可选func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);</code></pre></p><hr><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h3><p>person.h 声明类person的头文件<br>若在类中声明函数暨定义,则函数当作内联函数处理<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span> &#123;</span><span class="hljs-keyword">public</span>:person();person(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name);<span class="hljs-built_in">std</span>::<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">print_info</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name,<span class="hljs-keyword">int</span> year)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_name</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-comment">//当作内联函数处理</span><span class="hljs-keyword">private</span>:<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name;&#125;;</code></pre><br>person.cpp 定义类person中的函数和变量<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"person.h"</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>person::person()&#123;&#125;;person::person(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name)&#123;person::name = name;&#125;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> person::print_info(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> year)&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"your name is "</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">" and your age is "</span> &lt;&lt; year &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-string">"hi "</span> + name;&#125;<span class="hljs-keyword">void</span> person::print_name()&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; person::name &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">void</span> person::print()&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"hello person "</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;&#125;</code></pre><br>main.cpp 使用person类<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"person.h"</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;person p1;p1.print();<span class="hljs-function">person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">"kyleson"</span>)</span></span>;p2.print_name();<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> info = p2.print_info(<span class="hljs-string">"kyleson"</span>,<span class="hljs-number">19</span>);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; info &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果:hello personkylesonyour name is kyleson <span class="hljs-keyword">and</span> your age is <span class="hljs-number">19</span>hi kyleson</code></pre></p><h3 id="常量成员函数"><a href="#常量成员函数" class="headerlink" title="常量成员函数"></a>常量成员函数</h3><p>Date类中的成员函数(+const)表示函数为只读函数,不能对类Date的成员和状态进行修改<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> &#123;</span><span class="hljs-keyword">int</span> d, m, y;<span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">day</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> d; &#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">month</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;&#125;;<span class="hljs-keyword">int</span> Date::month() <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> Date::m;&#125;</code></pre></p><h3 id="mutable成员"><a href="#mutable成员" class="headerlink" title="mutable成员"></a>mutable成员</h3><p>mutable修饰的成员仍可被常量成员函数修改<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> &#123;</span><span class="hljs-keyword">int</span> d, m, y;<span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">day</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> d; &#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">month</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-keyword">private</span>:<span class="hljs-keyword">int</span> century;<span class="hljs-keyword">mutable</span> <span class="hljs-keyword">int</span> cache;&#125;;<span class="hljs-keyword">int</span> Date::month() <span class="hljs-keyword">const</span> &#123;Date::century = <span class="hljs-number">0</span>;<span class="hljs-comment">//错误,month()函数不可修改century的值</span>Date::cache = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> Date::m;&#125;</code></pre></p><h3 id="自引用"><a href="#自引用" class="headerlink" title="自引用"></a>自引用</h3><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> &#123;</span><span class="hljs-keyword">int</span> d = <span class="hljs-number">12</span>, m = <span class="hljs-number">6</span>, y =<span class="hljs-number">2018</span>;<span class="hljs-keyword">public</span>:<span class="hljs-function">Date&amp; <span class="hljs-title">add_day</span><span class="hljs-params">()</span></span>&#123; d++; &#125;;<span class="hljs-function">Date&amp; <span class="hljs-title">add_month</span><span class="hljs-params">()</span></span>&#123; m++; &#125;;<span class="hljs-function">Date&amp; <span class="hljs-title">add_year</span><span class="hljs-params">()</span> </span>&#123; y++; &#125;;<span class="hljs-keyword">private</span>:<span class="hljs-keyword">int</span> cache;<span class="hljs-keyword">mutable</span> <span class="hljs-keyword">int</span> modied;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;Date date;date.add_year().add_month().add_day();getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>类的析构函数是类的一种特殊的成员函数,在每次删除所创建的对象时执行<br>析构函数的名称与类的名称完全相同,由波浪号(~)作为其前缀,析构函数不会返回任何值,也不能带有任何参数.析构函数有助于在跳出程序(比如关闭文件、释放内存等）前释放资源.<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>&#123;</span>  <span class="hljs-keyword">public</span>:     Line(); <span class="hljs-comment">// 构造函数声明</span>     ~Line(); <span class="hljs-comment">// 析构函数声明</span>&#125;;Line::Line(<span class="hljs-keyword">void</span>)&#123;     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Object is being created"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;Line::~Line(<span class="hljs-keyword">void</span>)&#123;     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Object is being deleted"</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<span class="hljs-comment">// 程序的主函数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;     Line line;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果:Object is being createdObject is being deleted</code></pre></p><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>访问类的 private 和 protected 成员<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&#123;</span>     <span class="hljs-keyword">double</span> width;     <span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printWidth</span><span class="hljs-params">(Box box)</span></span>;     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setWidth</span><span class="hljs-params">(<span class="hljs-keyword">double</span> wid)</span></span>;&#125;;<span class="hljs-keyword">void</span> Box::setWidth(<span class="hljs-keyword">double</span> wid)&#123;     width = wid;&#125;<span class="hljs-comment">//注意：printWidth() 不是任何类的成员函数</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printWidth</span><span class="hljs-params">(Box box)</span></span>&#123;     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Width of box : "</span> &lt;&lt; box.width &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    Box box;    box.setWidth(<span class="hljs-number">10.0</span>);printWidth(box);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></p><h3 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&#123;</span><span class="hljs-keyword">public</span>:       Box(<span class="hljs-keyword">double</span> length = <span class="hljs-number">2.0</span>)&#123;       length = length; &#125; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Box box)</span></span>&#123;       <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt; length &gt; box. length; &#125;<span class="hljs-keyword">private</span>:      <span class="hljs-keyword">double</span> length; &#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;     <span class="hljs-function">Box <span class="hljs-title">Box1</span><span class="hljs-params">(<span class="hljs-number">3.3</span>)</span></span>;      <span class="hljs-function">Box <span class="hljs-title">Box2</span><span class="hljs-params">(<span class="hljs-number">8.5</span>)</span></span>;      <span class="hljs-keyword">if</span>(Box1.compare(Box2))&#123;          <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Box2 is smaller than Box1"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;     &#125;<span class="hljs-keyword">else</span>&#123;         <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Box2 is equal to or larger than Box1"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="指向类的指针"><a href="#指向类的指针" class="headerlink" title="指向类的指针"></a>指向类的指针</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&#123;</span><span class="hljs-keyword">public</span>:     Box(<span class="hljs-keyword">double</span> h = <span class="hljs-number">2.0</span>)&#123;         height = h; &#125; <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Volume</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> length * breadth *height; &#125;<span class="hljs-keyword">private</span>:       <span class="hljs-keyword">double</span> height; &#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;      <span class="hljs-function">Box <span class="hljs-title">Box1</span><span class="hljs-params">(<span class="hljs-number">3.3</span>)</span></span>;       Box *ptrBox;       ptrBox = &amp;Box1;      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Volume of Box1: "</span> &lt;&lt; ptrBox-&gt;Volume() &lt;&lt; <span class="hljs-built_in">endl</span>;      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><p>静态成员在类的所有对象中是共享的, 无论创建多少个类的对象，静态成员都只有一个副本<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&#123;</span><span class="hljs-keyword">public</span>: <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> objectCount; Box(<span class="hljs-keyword">double</span> h = <span class="hljs-number">2.0</span>)&#123; height = h; objectCount++; &#125; <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Volume</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> length * breadth *height; &#125;<span class="hljs-keyword">private</span>:  <span class="hljs-keyword">double</span> height; &#125;;<span class="hljs-keyword">int</span> Box::objectCount = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;     <span class="hljs-function">Box <span class="hljs-title">Box1</span><span class="hljs-params">(<span class="hljs-number">3.3</span>)</span></span>;      <span class="hljs-function">Box <span class="hljs-title">Box2</span><span class="hljs-params">(<span class="hljs-number">8.5</span>)</span></span>;      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Total objects: "</span> &lt;&lt; Box::objectCount &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//objectCount = 2</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">// 基类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span>  <span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setWidth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w)</span> </span>&#123;width = w;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h)</span> </span>&#123;height = h;&#125;  <span class="hljs-keyword">protected</span>:<span class="hljs-keyword">int</span> width;<span class="hljs-keyword">int</span> height;&#125;;<span class="hljs-comment">// 派生类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> :</span> <span class="hljs-keyword">public</span> Shape &#123;  <span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> (width * height); &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;Rectangle Rect;Rect.setWidth(<span class="hljs-number">5</span>);Rect.setHeight(<span class="hljs-number">7</span>);<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Total area:"</span> &lt;&lt; Rect.getArea() &lt;&lt; <span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><pre><code class="hljs cpp"><span class="hljs-comment">// 基类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span>...&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaintCost</span> &#123;</span>...&#125;;<span class="hljs-comment">// 多继承</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> :</span> <span class="hljs-keyword">public</span> Shape, <span class="hljs-keyword">public</span> PaintCost &#123;...&#125;;</code></pre><h3 id="虚函数和纯虚函数-virtual-修饰符"><a href="#虚函数和纯虚函数-virtual-修饰符" class="headerlink" title="虚函数和纯虚函数 virtual 修饰符"></a>虚函数和纯虚函数 virtual 修饰符</h3><p>类中被声明为虚函数的函数在基类中实现也可被派生类重写.<br>类中被声明为纯虚函数的函数在基类中只能声明,定义纯虚函数是为定义一个接口,必须由派生类实现,且这个类是抽象类<br><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span> <span class="hljs-comment">//虚函数</span>     <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;       <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Parent class area :"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> :</span> <span class="hljs-keyword">public</span> Shape &#123; <span class="hljs-comment">//重写的虚函数</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Rectangle class area :"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> (width * height); &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span> <span class="hljs-comment">//纯虚函数 由派生类实现</span> <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多个派生类根据需要对基类的虚函数进行了不同的实现,在函数调用时会根据派生类的不同进行相应的调用<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt; </span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span>  <span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Parent class area :"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> :</span> <span class="hljs-keyword">public</span> Shape &#123;  <span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Rectangle class area "</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> :</span> <span class="hljs-keyword">public</span> Shape &#123;  <span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Triangle class area "</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;Shape *shape;Rectangle rec;Triangle tri;shape = &amp;rec;shape-&gt;area();shape = &amp;tri;shape-&gt;area();getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果:Rectangle <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">area</span> <span class="hljs-title">Triangle</span> <span class="hljs-title">class</span> <span class="hljs-title">area</span></span></code></pre></p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> &#123;</span>  <span class="hljs-keyword">public</span>:<span class="hljs-keyword">int</span> d = <span class="hljs-number">12</span>, m = <span class="hljs-number">6</span>, y = <span class="hljs-number">2018</span>;Date <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Date &amp;a);<span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>++();&#125;;Date Date::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Date &amp; a)&#123;Date c;c.d = <span class="hljs-keyword">this</span>-&gt;d + a.d;c.m = <span class="hljs-keyword">this</span>-&gt;m + a.m;c.y = <span class="hljs-keyword">this</span>-&gt;y + a.y;<span class="hljs-keyword">return</span> c;&#125;<span class="hljs-keyword">void</span> Date::<span class="hljs-keyword">operator</span>++()&#123;<span class="hljs-keyword">this</span>-&gt;y++;<span class="hljs-keyword">this</span>-&gt;m++;<span class="hljs-keyword">this</span>-&gt;d++;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;Date a,b;Date c = a + b;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; c.y &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;Date d;++d;<span class="hljs-comment">//++d == d.operator++();</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; d.y;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><pre><code class="hljs cpp"><span class="hljs-comment">//捕获并处理异常</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">task_master</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">auto</span> result = do_task();&#125;<span class="hljs-keyword">catch</span>(some_error)&#123;<span class="hljs-comment">//todo </span>&#125;&#125;<span class="hljs-comment">//抛出异常</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_task</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">if</span>(...)<span class="hljs-keyword">return</span> result;<span class="hljs-keyword">else</span><span class="hljs-keyword">throw</span> some_error&#123;&#125;;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>; <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">division</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;   <span class="hljs-keyword">if</span>( b == <span class="hljs-number">0</span> )&#123;      <span class="hljs-keyword">throw</span> <span class="hljs-string">"Division by zero condition!"</span>;   &#125;   <span class="hljs-keyword">return</span> (a/b);&#125; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;   <span class="hljs-keyword">int</span> x = <span class="hljs-number">50</span>;   <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;   <span class="hljs-keyword">double</span> z = <span class="hljs-number">0</span>;    <span class="hljs-keyword">try</span> &#123;     z = division(x, y);     <span class="hljs-built_in">cout</span> &lt;&lt; z &lt;&lt; <span class="hljs-built_in">endl</span>;   &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* msg) &#123;     <span class="hljs-built_in">cerr</span> &lt;&lt; msg &lt;&lt; <span class="hljs-built_in">endl</span>;   &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>C++标准异常<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;exception&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>; <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyException</span> :</span> <span class="hljs-keyword">public</span> exception&#123;  <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * <span class="hljs-title">what</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> <span class="hljs-title">throw</span> <span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"C++ Exception"</span>;  &#125;&#125;; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">try</span>&#123;    <span class="hljs-keyword">throw</span> MyException();  &#125;<span class="hljs-keyword">catch</span>(MyException&amp; e)&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"MyException caught"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">std</span>::exception&amp; e)&#123;    <span class="hljs-comment">//其他的错误</span>  &#125;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++教程(1) 基础</title>
    <link href="/2019/07/05/C++%E6%95%99%E7%A8%8B(1)%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/07/05/C++%E6%95%99%E7%A8%8B(1)%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="C-尝鲜"><a href="#C-尝鲜" class="headerlink" title="C++尝鲜"></a>C++尝鲜</h2><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"how old are you ?"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; num;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"you are"</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">" years old"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt; 引入输入输出流</span></span>----------------------------------------<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> 标准输出 <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; 变量; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; 变量 &lt;&lt; <span class="hljs-built_in">string</span> &lt;&lt; <span class="hljs-built_in">endl</span>; 拼接<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; 变量 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; 添加换行----------------------------------------<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> 标准输入<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; 变量</code></pre></h2><h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h2><p><strong>声明和定义变量</strong><br>多个文件使用同一个变量,声明和定义必须分离,且变量的定义只能出现在一个文件中,其他使用到该变量的文件则必须对其声明,不能重复定义<br>(头文件 climits定义了基本数据类型的最大最小值符号常量)</p><pre><code class="hljs cpp">声明变量: <span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i;定义变量 :<span class="hljs-keyword">int</span> j; <span class="hljs-keyword">int</span> j = <span class="hljs-number">3.14</span>;<span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;  初始化后的<span class="hljs-keyword">extern</span>标记的变量不再是声明变量而是定义变量</code></pre><p><strong>声明常量</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> month = <span class="hljs-number">12</span>;</code></pre><p><strong>auto关键字</strong><br>auto根据初始化值的类型推断变量的类型</p><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> n =<span class="hljs-number">100</span>;<span class="hljs-keyword">auto</span> x =<span class="hljs-number">1.5</span> ;<span class="hljs-keyword">auto</span> str = <span class="hljs-string">"kyeleson"</span></code></pre><p><strong>引用 左值引用&amp; 右值引用&amp;&amp;</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> val = <span class="hljs-number">1024</span>; <span class="hljs-keyword">int</span> &amp;ref_val = ival;<span class="hljs-keyword">int</span> i = ref_val; i 被初始化为val的值</code></pre><p>ref_val指向val<br>引用即别名,并非引用对象,仅仅为所存在的对象声明一个新名字<br>引用的初始值必须是一个对象,只能被初始化一次,不可修改<br>一个变量可以定义多个引用<br>对引用的操作与对变量的直接操作完全一样，即修改引用ref_val等同于修改val</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> val = <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> &amp;ref_val = val;ref_val = <span class="hljs-number">32</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;结果:<span class="hljs-number">32</span></code></pre><p>右值引用—&gt;临时对象,绑定到右值,可修改且不会再被利用<br>利用廉价的移动操作代替昂贵的拷贝操作以此优化性能</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> &amp;&amp;<span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-string">"hello"</span>)</span></span>;<span class="hljs-comment">//右值引用</span><span class="hljs-comment">//旧式swap函数</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">string</span> <span class="hljs-title">swap</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">a</span> ,<span class="hljs-title">T</span> &amp;<span class="hljs-title">b</span>)&#123;</span>T temp = a;<span class="hljs-comment">//拷贝a值</span>a = b;<span class="hljs-comment">//拷贝b值</span>b = temp;<span class="hljs-comment">//拷贝temp值</span>&#125;<span class="hljs-comment">//右值引用版</span><span class="hljs-comment">//temp为右值引用 临时对象</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">string</span> <span class="hljs-title">swap</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">a</span> ,<span class="hljs-title">T</span> &amp;<span class="hljs-title">b</span>)&#123;</span>    <span class="hljs-comment">//move(x) == static_cast&lt;T&amp;&amp;&gt;(x)</span>T temp = move(a);<span class="hljs-comment">//直接读取a右值</span>a = move(b);<span class="hljs-comment">//直接读取b右值</span>b = move(temp);<span class="hljs-comment">//直接读取temp右值</span>&#125;</code></pre><p><strong>数组</strong></p><pre><code class="hljs cpp">一维数组<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">5</span>];<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;；<span class="hljs-keyword">double</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">4</span>]&#123; <span class="hljs-number">1.2</span>,<span class="hljs-number">3.4</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">4.5</span> &#125;; <span class="hljs-comment">//C++11</span><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'\0'</span> &#125;；<span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = &#123; <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'\0'</span> &#125;；<span class="hljs-comment">//C风格</span><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] =&#123;<span class="hljs-string">'A'</span>,<span class="hljs-string">'b'</span>&#125;; <span class="hljs-comment">// C++自动添加'\0'</span><span class="hljs-keyword">char</span> str[] = <span class="hljs-string">"hello"</span>;多维数组<span class="hljs-keyword">int</span> zippo[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[][];非法<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[][<span class="hljs-number">4</span>];合法声明n维数组时除了最左边的方括号可以留空外,其他都需要填写数值zippo == &amp;zippo[<span class="hljs-number">0</span>];zippo[<span class="hljs-number">0</span>] == &amp;zippo[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == zippo; [ zippo和zippo[<span class="hljs-number">0</span>]起始于同一地址 具有相同的数值 ]*&amp;zippo[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == **zippo == zippo[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]zippo[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] == *(*(zippo+<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>)</code></pre><p><strong>字符串</strong><br>(字符串处理:直到遇到’\0’才结束)</p><pre><code class="hljs cpp"><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'\0'</span> &#125;；<span class="hljs-comment">//C风格</span><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = &#123; <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'\0'</span> &#125;；<span class="hljs-comment">//C风格</span><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] =&#123;<span class="hljs-string">'A'</span>,<span class="hljs-string">'b'</span>&#125;; <span class="hljs-comment">// C++自动添加'\0'</span><span class="hljs-keyword">char</span> str[] = <span class="hljs-string">"hello"</span>;<span class="hljs-comment">// C++自动添加'\0'</span>(<span class="hljs-keyword">char</span>[<span class="hljs-keyword">int</span>] 定义的字符串是字符串常量 不可使用直接修改)#<span class="hljs-meta"># string类</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-built_in">string</span> str = <span class="hljs-string">"hello"</span>;str = <span class="hljs-string">"world"</span>; <span class="hljs-comment">//可修改</span><span class="hljs-built_in">string</span> str = &#123;<span class="hljs-string">"hello world"</span>&#125;;<span class="hljs-built_in">string</span> str&#123;<span class="hljs-string">"hello world"</span>&#125;;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">'A'</span>)</span></span>; <span class="hljs-comment">//c = "AAAAA"</span></code></pre><p><strong>结构体</strong></p><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span>&#123;</span><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-keyword">int</span> year;<span class="hljs-keyword">char</span> sex;&#125;;person p = &#123;<span class="hljs-string">"kyleson"</span>,<span class="hljs-number">19</span>,<span class="hljs-string">'男'</span>&#125;;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; p1.name &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;person *pp = &amp;p;<span class="hljs-comment">//pp-&gt;name == (*pp).name</span>C++结构体中可以定义函数 C语言则不可<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sample</span>&#123;</span><span class="hljs-keyword">int</span> a;<span class="hljs-keyword">int</span> b;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> a + b;&#125;&#125;;sample s = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span> &#125;;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; s.add() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</code></pre><p>每个struct只能有唯一的定义<br>对于两个struct,即使成员相同其本身仍是不同的类型</p><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addr</span>&#123;</span><span class="hljs-keyword">int</span> num;&#125;;addr x;addr y = x;<span class="hljs-comment">//错误,类型不匹配</span><span class="hljs-keyword">int</span> i = x;<span class="hljs-comment">//错误,类型不匹配</span></code></pre><p><strong>联合体 union</strong><br>union是特殊的struct,其所有成员都分配在同一地址空间,即在相同的内存位置存储不同的数据类型,union实际占用的空间大小与其最大的成员相同,并且在同一时刻union只保存一个成员的值</p><pre><code class="hljs cpp"><span class="hljs-keyword">union</span> value&#123;   <span class="hljs-keyword">char</span> sex;   <span class="hljs-keyword">int</span> sex_num;&#125;value val;val.sex = <span class="hljs-string">'男'</span>;<span class="hljs-comment">//根据类型需求设置成员及值</span></code></pre><p><strong>枚举</strong><br>enum Name{…}枚举值隐式转换为整数类型,枚举值名字与枚举本身位于同一作用域</p><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> color&#123; red,blue,black,white &#125;;color brand = red;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; brand &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;brand = <span class="hljs-number">10</span>;<span class="hljs-comment">// 错误 非枚举类型</span>brand = color(blue);brand = color(<span class="hljs-number">4</span>);<span class="hljs-keyword">int</span> c = red;<span class="hljs-comment">//隐式转换为int</span><span class="hljs-keyword">enum</span> bit&#123;one = <span class="hljs-number">10</span>,two = <span class="hljs-number">22</span>,three&#125;;bit b = three; <span class="hljs-comment">//three = 23</span></code></pre><p>enum class Name{…}限定作用域的强类型枚举,枚举值不会隐式转换为其他类型,枚举值名字位于枚举局部作用域</p><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>&#123;</span>red,green,yellow&#125;;Color c = Color::red;<span class="hljs-comment">//局部作用域</span>Color color = red;<span class="hljs-comment">//错误</span><span class="hljs-keyword">int</span> c = Color::red;<span class="hljs-comment">//错误</span></code></pre><p>指定枚举初始类型<br><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">color</span>:</span><span class="hljs-keyword">char</span>&#123;red,green,yellow&#125;;</code></pre><br><strong>指针</strong><br>指向对象的对象[存储指向对象的地址],在生命周期内可指向不同的对象</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *p; <span class="hljs-comment">//p指向int类型对象的指针</span><span class="hljs-keyword">int</span> val = <span class="hljs-number">19</span>;<span class="hljs-keyword">int</span> *ip = &amp;val;ip是指向变量val的指针,存储变量val的地址 此处&amp;:取地址符 非引用<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; ip ---&gt; val的地址值<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *ip ---&gt; val的值 <span class="hljs-number">42</span></code></pre><p>指针的值(状态):指向一个对象、指向紧邻对象所占空间的下一个位置、空指针、无效指针<br>利用指针访问对象:操作符 *</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> num = <span class="hljs-number">12</span>; <span class="hljs-keyword">int</span> * p = &amp;num; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;打印结果:<span class="hljs-number">12</span></code></pre><p>空指针:不指向任何对象 </p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *p = <span class="hljs-literal">nullptr</span>;<span class="hljs-keyword">int</span> *p =<span class="hljs-number">0</span>;</code></pre><p>通过new分配内存</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;*p = <span class="hljs-number">10</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">delete</span> p;</code></pre><p>void* 指针:存放任意对象的地址</p><pre><code class="hljs cpp"><span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14</span>,*pd = &amp;pi ;<span class="hljs-keyword">void</span> pv = &amp;pi;pv == pd ? --&gt; <span class="hljs-literal">true</span>note：不能直接操作<span class="hljs-keyword">void</span>*指针所指向的对象,对象类型未知</code></pre><p>指针的指针:指向指针的指针,存储指针的本身的地址</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> val = <span class="hljs-number">1024</span>;<span class="hljs-keyword">int</span> *p = &amp;val; <span class="hljs-comment">//指向一个int类型的变量</span><span class="hljs-keyword">int</span> **pp = &amp;p;<span class="hljs-comment">//指向一个int类型的指针变量</span></code></pre><p><img src="/images/pointer.jpg" srcset="/images/loading.gif" alt=""><br>指向常量的指针,不允许被修改</p><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> *p1 = &amp;pi;<span class="hljs-keyword">double</span> *p2 = &amp;pi;<span class="hljs-comment">// 错误 p2被定义为普通指针</span>*p1 = <span class="hljs-number">42</span>; <span class="hljs-comment">//错误 不允许赋值</span></code></pre><p>const指针:常量指针,指针本身也是常量,必须被初始化</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> errNum = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> curErr = &amp;errNum; <span class="hljs-comment">//curErr一直指向errNum对象</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> *<span class="hljs-keyword">const</span> pip = &amp;pi ;<span class="hljs-comment">// pip指向常量对象的常量指针</span><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;curErr = &amp;num; <span class="hljs-comment">//错误 指向的对象不允许被改变</span>*curErr = <span class="hljs-number">1</span>; <span class="hljs-comment">//正确 指向的对象非常量,其值可被修改</span>*pip = <span class="hljs-number">1</span>; <span class="hljs-comment">//错误 指向的对象为常量,其值不能被修改</span></code></pre><p>函数指针 指向函数的指针,保存着函数代码起始处的地址</p><pre><code class="hljs cpp">函数：<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toUpper</span><span class="hljs-params">(<span class="hljs-keyword">char</span>*)</span></span>;指向函数的指针：<span class="hljs-keyword">void</span> (*pf) (<span class="hljs-keyword">char</span>*);pf = toUpper; 函数指针赋值<span class="hljs-keyword">char</span> mis[<span class="hljs-number">6</span>]=<span class="hljs-string">"hello"</span>;#把toUpper作用于mis(*pf)(mis);pf(mis)<span class="hljs-keyword">bool</span> (*pf)(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;,<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;)</code></pre><p><strong> 指针和数组</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;;<span class="hljs-built_in">array</span>本身是指向<span class="hljs-built_in">array</span>第一个元素的指针<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt; *<span class="hljs-built_in">array</span>; ---&gt; <span class="hljs-number">1</span><span class="hljs-keyword">char</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span> &#125;;<span class="hljs-keyword">char</span> str1 = <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">char</span> str2 = *<span class="hljs-built_in">array</span>;<span class="hljs-keyword">char</span> str4 = <span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>];<span class="hljs-keyword">char</span> str3 = *(<span class="hljs-built_in">array</span> +<span class="hljs-number">1</span>);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; str1 &lt;&lt; str2 &lt;&lt; str3 &lt;&lt; str4 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;输出:a a b b<span class="hljs-keyword">char</span> *start = begin(<span class="hljs-built_in">array</span>); <span class="hljs-comment">//指向array首元素的指针</span><span class="hljs-keyword">char</span> *end = end(<span class="hljs-built_in">array</span>); <span class="hljs-comment">//指向array尾元素下一位置的指针 默认的空字符</span><span class="hljs-keyword">int</span> *pts[<span class="hljs-number">10</span>]; <span class="hljs-comment">//pts:含有10个整型指针的数组</span><span class="hljs-keyword">int</span>(*ptr)[<span class="hljs-number">10</span>]; <span class="hljs-comment">//ptr:指向(含有10个整型的数组)的指针</span><span class="hljs-keyword">char</span> *name = <span class="hljs-string">"kyleson"</span>;<span class="hljs-keyword">char</span> str[<span class="hljs-number">5</span>] = <span class="hljs-string">"ABC"</span>;<span class="hljs-keyword">char</span> *p = str;<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<span class="hljs-keyword">int</span> *pa = <span class="hljs-built_in">array</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; *name &lt;&lt; *(name + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//值: kyleson k y</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; p &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//值: ABC A</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; pa &lt;&lt; *pa &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//值: 000000F0E032F900 1</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">string</span> ----&gt; (字符串处理:直到遇到<span class="hljs-string">'\0'</span>才结束)</code></pre><p><strong>类型别名 typedef</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> wages; <span class="hljs-comment">//wages是double的同义词</span><span class="hljs-keyword">typedef</span> wages base,*p; <span class="hljs-comment">//base是wages的同义词,p是double* 的同义词</span>wage hourly,weekly; <span class="hljs-comment">//等价于double hourly,weekly;</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span>* pstr; <span class="hljs-comment">//复合类型,指向char的指针</span><span class="hljs-keyword">const</span> pstr str = <span class="hljs-number">0</span>; <span class="hljs-comment">//指向char的常量指针,并不是指向常量char的指针</span><span class="hljs-keyword">const</span> pstr* ps; <span class="hljs-comment">//指向[指向char类型的常量指针]的指针</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str ;<span class="hljs-comment">//指向常量char的指针</span></code></pre><p><strong>类型指示符 decltype</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">decltype</span>(fun()) sum = x ; <span class="hljs-comment">//sum的类型是函数fun()的返回类型</span></code></pre><p><strong>vector 对象的集合</strong></p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; strs;<span class="hljs-comment">//定义空集合</span><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; vetor = &#123;<span class="hljs-string">"a"</span>,<span class="hljs-string">"person"</span>,<span class="hljs-string">"hi"</span>&#125;;<span class="hljs-comment">// 列表初始化</span><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v_num(<span class="hljs-number">10</span>,<span class="hljs-number">9</span>); <span class="hljs-comment">//创建指定数量的元素 每个元素被赋值为9</span><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ten_num(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10个元素 每个元素被初始化为0</span>strs.push_back(<span class="hljs-string">"hello"</span>);<span class="hljs-comment">//添加元素</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1)Faster R-CNN implemented by Keras</title>
    <link href="/2019/07/04/(1)Faster%20R-CNN%20%20implemented%20by%20Keras/"/>
    <url>/2019/07/04/(1)Faster%20R-CNN%20%20implemented%20by%20Keras/</url>
    
    <content type="html"><![CDATA[<p><strong>训练数据</strong><br>训练数据集下载地址:<br>1.下载class-descriptions-boxable.csv 即 V4下的Metadata ClassNames (训练数据集的所有类别)<br><a href="https://storage.googleapis.com/openimages/web/download.html" target="_blank" rel="noopener">https://storage.googleapis.com/openimages/web/download.html</a><br>2.下载train-images-boxable.csv和train-annotations-bbox.csv (已标记的图片集)<br><a href="https://www.figure-eight.com/dataset/open-images-annotated-with-bounding-boxes/" target="_blank" rel="noopener">https://www.figure-eight.com/dataset/open-images-annotated-with-bounding-boxes/</a><br>note:原始训练集有600个类别,数据量庞大,只抽取其中两个类别的图片集作为训练数据集,如Car,Person</p><p><img src="\images\object-detection\open-image-files.jpg" srcset="/images/loading.gif" alt=""></p><hr><p><strong>数据集预览</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> random<span class="hljs-keyword">from</span> skimage <span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> shutil <span class="hljs-keyword">import</span> copyfile<span class="hljs-keyword">import</span> cv2<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfbase_path = <span class="hljs-string">'D:/data/open-image-v4'</span><span class="hljs-comment">#数据集下载的主目录</span>images_boxable_fname = <span class="hljs-string">'train-images-boxable.csv'</span>annotations_bbox_fname = <span class="hljs-string">'train-annotations-bbox.csv'</span>class_descriptions_fname = <span class="hljs-string">'class-descriptions-boxable.csv'</span></code></pre><p>原始图片预览</p><pre><code class="hljs python">images_boxable = pd.read_csv(os.path.join(base_path, images_boxable_fname))images_boxable.head()</code></pre><p><img src="\images\object-detection\1.jpg" srcset="/images/loading.gif" alt=""></p><p>图片标记数据预览</p><pre><code class="hljs python">annotations_bbox = pd.read_csv(os.path.join(base_path, annotations_bbox_fname))annotations_bbox.head()</code></pre><p><img src="\images\object-detection\2.jpg" srcset="/images/loading.gif" alt=""></p><p>类别预览</p><pre><code class="hljs python">class_descriptions = pd.read_csv(os.path.join(base_path, class_descriptions_fname))class_descriptions.head()</code></pre><p><img src="\images\object-detection\3.jpg" srcset="/images/loading.gif" alt=""></p><p>通过annotations_bbox将目标/类别在原图上标记出来</p><pre><code class="hljs python">image_name = images_boxable[<span class="hljs-string">'image_name'</span>][<span class="hljs-number">5</span>]image_url = images_boxable[<span class="hljs-string">'image_url'</span>][<span class="hljs-number">5</span>]print(image_name,image_url)</code></pre><p>e17acd05b631d330.jpg <a href="https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/e17acd05b631d330.jpg" target="_blank" rel="noopener">https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/e17acd05b631d330.jpg</a></p><pre><code class="hljs python">img = io.imread(image_url) <span class="hljs-comment">#读取网络图片</span>height, width, _ = img.shapeprint(img.shape)plt.figure(figsize=(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>))plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)plt.title(<span class="hljs-string">'Original Image'</span>)plt.imshow(img)img_id = image_name[:<span class="hljs-number">16</span>]bboxs = annotations_bbox[annotations_bbox[<span class="hljs-string">'ImageID'</span>]==img_id]img_bbox = img.copy()<span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> bboxs.iterrows():    xmin = row[<span class="hljs-string">'XMin'</span>]    xmax = row[<span class="hljs-string">'XMax'</span>]    ymin = row[<span class="hljs-string">'YMin'</span>]    ymax = row[<span class="hljs-string">'YMax'</span>]    xmin = int(xmin*width)    xmax = int(xmax*width)    ymin = int(ymin*height)    ymax = int(ymax*height)    label_name = row[<span class="hljs-string">'LabelName'</span>]    class_series = class_descriptions[class_descriptions[<span class="hljs-string">'name'</span>]==label_name]    class_name = class_series[<span class="hljs-string">'class'</span>].values[<span class="hljs-number">0</span>]    cv2.rectangle(img_bbox,(xmin,ymin),(xmax,ymax),(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">2</span>)    font = cv2.FONT_HERSHEY_SIMPLEX    cv2.putText(img_bbox,class_name,(xmin,ymin<span class="hljs-number">-10</span>), font, <span class="hljs-number">1</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">2</span>)plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)plt.title(<span class="hljs-string">'Image with Bounding Box'</span>)plt.imshow(img_bbox)plt.show()</code></pre><p><img src="\images\object-detection\4.jpg" srcset="/images/loading.gif" alt=""></p><hr><p><strong>训练集构造(检测car、person)</strong></p><p>抽取数据类别,Car,Person</p><pre><code class="hljs python">car = class_descriptions[class_descriptions[<span class="hljs-string">'class'</span>]==<span class="hljs-string">'Car'</span>]person = class_descriptions[class_descriptions[<span class="hljs-string">'class'</span>]==<span class="hljs-string">'Person'</span>]print(car)print(person)</code></pre><p>570  /m/0k4j   Car<br>68  /m/01g317  Person</p><p>抽取car、person原始图片下载地址和对应的标记框数据</p><pre><code class="hljs python"><span class="hljs-comment">#car、person全部标记框数据</span>car_bbox = annotations_bbox[annotations_bbox[<span class="hljs-string">'LabelName'</span>]==car[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]]person_bbox = annotations_bbox[annotations_bbox[<span class="hljs-string">'LabelName'</span>]==person[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]]car_ids = car_bbox[<span class="hljs-string">'ImageID'</span>]person_ids = person_bbox[<span class="hljs-string">'ImageID'</span>]<span class="hljs-comment">#一张图片包含多个标记框,去掉重复的原始图片id</span>car_ids = np.unique(car_ids)person_ids = np.unique(person_ids)print(<span class="hljs-string">'car_ids:'</span>+str(len(car_ids)),<span class="hljs-string">'person_ids:'</span>+str(len(person_ids)))</code></pre><p>car_ids:89465 car_ids:248384</p><p>随机选取1000张car和1000张person图片作为训练集</p><pre><code class="hljs python"><span class="hljs-comment">#打乱次序</span>copy_car_ids = car_ids.copy()random.seed(<span class="hljs-number">1</span>)random.shuffle(car_ids)copy_person_ids = person_ids.copy()random.seed(<span class="hljs-number">1</span>)random.shuffle(person_ids)n = <span class="hljs-number">1000</span>sub_car_ids = copy_car_ids[:n]sub_person_ids = copy_person_ids[:n]print(sub_car_ids[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>],sub_person_ids[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>])</code></pre><p>[‘17729c78b866181e’ ‘7b77dbbc71105e1c’ ‘c9a719e92a035033’<br> ‘58539243ddf350d1’ ‘b4bd75496b4880d8’ ‘6b54b697b13d6573’<br> ‘1e8eab50c0f6ff3a’ ‘ec6ff911833016f3’ ‘a10c03baa942e135’<br> ‘81c73298cc8d5349’] [‘763f5e853b1895df’ ‘d469ba5b2e558fc7’ ‘5348a30462ad2308’<br> ‘751439461f7a5fd3’ ‘5734bee1abe8c58e’ ‘730c2135df540687’<br> ‘14920852dd7e8c93’ ‘6bce959fa9db8fbc’ ‘254dbd00353a1d22’<br> ‘f7b5eabe2c2713c8’]</p><p>获取原始图片下载地址</p><pre><code class="hljs python">sub_car_urls = [images_boxable[images_boxable[<span class="hljs-string">'image_name'</span>]==name+<span class="hljs-string">'.jpg'</span>] <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> sub_car_ids]sub_person_urls = [images_boxable[images_boxable[<span class="hljs-string">'image_name'</span>]==name+<span class="hljs-string">'.jpg'</span>] <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> sub_person_ids]print(sub_car_urls[<span class="hljs-number">0</span>].values[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])  print(sub_car_urls[<span class="hljs-number">0</span>].values[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])</code></pre><p>17729c78b866181e.jpg<br><a href="https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/17729c78b866181e.jpg" target="_blank" rel="noopener">https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/17729c78b866181e.jpg</a></p><p>保存urls到磁盘供复用 </p><pre><code class="hljs python">sub_car_urls_csv = pd.DataFrame()sub_person_urls_csv = pd.DataFrame()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):    sub_car_urls_csv = sub_car_urls_csv.append(sub_car_urls[i], ignore_index = <span class="hljs-literal">True</span>)    sub_person_urls_csv = sub_person_urls_csv.append(sub_person_urls[i], ignore_index = <span class="hljs-literal">True</span>)sub_car_urls_csv.to_csv(os.path.join(<span class="hljs-string">'D:/data/open-image-v4'</span>,<span class="hljs-string">'sub_car_urls.csv'</span>),index=<span class="hljs-literal">False</span>)sub_person_urls_csv.to_csv(os.path.join(<span class="hljs-string">'D:/data/open-image-v4'</span>,<span class="hljs-string">'sub_person_urls.csv'</span>),index=<span class="hljs-literal">False</span>)</code></pre><p>下载图片到磁盘(D:/data/open-image-v4/下新建train-data和test-data文件夹,再分别在train-data和test-data下新建文件夹car和person)</p><pre><code class="hljs python">sub_car_pd = pd.read_csv(os.path.join(base_path, <span class="hljs-string">'sub_car_urls.csv'</span>))sub_person_pd = pd.read_csv(os.path.join(base_path, <span class="hljs-string">'sub_person_urls.csv'</span>))print(sub_car_pd[<span class="hljs-string">'image_name'</span>][<span class="hljs-number">0</span>])print(sub_car_pd[<span class="hljs-string">'image_url'</span>][<span class="hljs-number">0</span>])<span class="hljs-comment">#建议开启多线程下载</span><span class="hljs-comment">#训练图片</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">800</span>):    img_car = io.imread(sub_car_pd[<span class="hljs-string">'image_url'</span>][i])    car_saved_path = os.path.join(<span class="hljs-string">'D:/data/open-image-v4/train-data/car'</span>,sub_car_pd[<span class="hljs-string">'image_name'</span>][i])    io.imsave(car_saved_path, img_car)    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">800</span>):    img_person = io.imread(sub_person_pd[<span class="hljs-string">'image_url'</span>][j])    person_saved_path = os.path.join(<span class="hljs-string">'D:/data/open-image-v4/train-data/person'</span>,sub_person_pd[<span class="hljs-string">'image_name'</span>][j])    io.imsave(person_saved_path, img_person)<span class="hljs-comment">#测试图片</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">800</span>,<span class="hljs-number">1000</span>):    img_car = io.imread(sub_car_pd[<span class="hljs-string">'image_url'</span>][i])    car_saved_path = os.path.join(<span class="hljs-string">'D:/data/open-image-v4/test-data/car'</span>,sub_car_pd[<span class="hljs-string">'image_name'</span>][i])    io.imsave(car_saved_path, img_car)    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">800</span>,<span class="hljs-number">1000</span>):    img_person = io.imread(sub_person_pd[<span class="hljs-string">'image_url'</span>][j])    person_saved_path = os.path.join(<span class="hljs-string">'D:/data/open-image-v4/test-data/person'</span>,sub_person_pd[<span class="hljs-string">'image_name'</span>][j])    io.imsave(person_saved_path, img_person)</code></pre><p>0000048549557964.jpg<br><a href="https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/0000048549557964.jpg" target="_blank" rel="noopener">https://requestor-proxy.figure-eight.com/figure_eight_datasets/open-images/train/0000048549557964.jpg</a></p><p>下载完成后,如图所示</p><p><img src="\images\object-detection\5.jpg" srcset="/images/loading.gif" alt=""></p><p><img src="\images\object-detection\6.jpg" srcset="/images/loading.gif" alt=""></p><p>将train-data/car、train-data/person合并到同一文件夹train-data/all下,train-test同理<br>note:由于一张图片可能同时包含car和person,因此合并时会将重复的图片剔除而只保留一张</p><pre><code class="hljs python">file_names = [<span class="hljs-string">'car'</span>,<span class="hljs-string">'person'</span>]train_path = <span class="hljs-string">'D:/data/open-image-v4/train-data'</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(file_names)):    train_images = os.listdir(os.path.join(train_path,file_names[i]))    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(train_images)):        original_path = os.path.join(os.path.join(train_path, label_names[i]), train_images[j])        new_path = os.path.join(os.path.join(train_path, <span class="hljs-string">'all'</span>), train_images[j])        copyfile(original_path, new_path)print(<span class="hljs-string">'all_train_images'</span>,len(os.listdir(os.path.join(train_path, <span class="hljs-string">'all'</span>))))      test_path = <span class="hljs-string">'D:/data/open-image-v4/test-data'</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(file_names)):    test_images = os.listdir(os.path.join(test_path,file_names[i]))    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(test_images)):        original_path = os.path.join(os.path.join(test_path, label_names[i]), test_images[j])        new_path = os.path.join(os.path.join(test_path, <span class="hljs-string">'all'</span>), test_images[j])        copyfile(original_path, new_path)      print(<span class="hljs-string">'all_test_images'</span>,len(os.listdir(os.path.join(test_path, <span class="hljs-string">'all'</span>))))</code></pre><p>all_train_images 1558<br>all_test_images 401</p><p>构造包含了标记框的训练集和测试集 train.csv和test.csv</p><pre><code class="hljs python">class_descriptions = pd.read_csv(<span class="hljs-string">"D:/data/open-image-v4/class-descriptions-boxable.csv"</span>)car = class_descriptions[class_descriptions[<span class="hljs-string">'class'</span>]==<span class="hljs-string">'Car'</span>]person = class_descriptions[class_descriptions[<span class="hljs-string">'class'</span>]==<span class="hljs-string">'Person'</span>]print(car,<span class="hljs-string">'\n'</span>+car[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>])print(person,<span class="hljs-string">'\n'</span>+person[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>])</code></pre><p>570  /m/0k4j   Car<br>/m/0k4j<br>68  /m/01g317  Person<br>/m/01g317</p><p>抽取car、person的标记框数据</p><pre><code class="hljs python">annotations_bbox = pd.read_csv(<span class="hljs-string">'D:/data/open-image-v4/train-annotations-bbox.csv'</span>)car_bbox = annotations_bbox[annotations_bbox[<span class="hljs-string">'LabelName'</span>]==car[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]]person_bbox = annotations_bbox[annotations_bbox[<span class="hljs-string">'LabelName'</span>]==person[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]]annotations_bbox = pd.concat([car_bbox,person_bbox])print(annotations_bbox.shape)</code></pre><p>(1282796, 13)</p><pre><code class="hljs python">train_df = pd.DataFrame(columns=[<span class="hljs-string">'FileName'</span>, <span class="hljs-string">'XMin'</span>, <span class="hljs-string">'YMin'</span>, <span class="hljs-string">'XMax'</span>, <span class="hljs-string">'YMax'</span>, <span class="hljs-string">'ClassName'</span>])train_path = <span class="hljs-string">'D:/data/open-image-v4/train-data/all'</span>train_images = os.listdir(train_path)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(train_images)):    sys.stdout.write(<span class="hljs-string">'Parse train_imgs '</span> + str(i+<span class="hljs-number">1</span>) + <span class="hljs-string">'; Number of boxes: '</span> + str(len(train_df)) + <span class="hljs-string">'\r'</span>)    sys.stdout.flush()    img_name = train_images[i]    img_id = img_name[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>]    tmp_df = annotations_bbox[annotations_bbox[<span class="hljs-string">'ImageID'</span>]==img_id]    <span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> tmp_df.iterrows():        labelName = row[<span class="hljs-string">'LabelName'</span>]        <span class="hljs-keyword">if</span> labelName == car[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]:            className = <span class="hljs-string">'car'</span>        <span class="hljs-keyword">elif</span> labelName == person[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]:            className = <span class="hljs-string">'person'</span>        train_df = train_df.append(&#123;<span class="hljs-string">'FileName'</span>: img_name,                                             <span class="hljs-string">'XMin'</span>: row[<span class="hljs-string">'XMin'</span>],                                             <span class="hljs-string">'YMin'</span>: row[<span class="hljs-string">'YMin'</span>],                                             <span class="hljs-string">'XMax'</span>: row[<span class="hljs-string">'XMax'</span>],                                             <span class="hljs-string">'YMax'</span>: row[<span class="hljs-string">'YMax'</span>],                                             <span class="hljs-string">'ClassName'</span>:className&#125;,ignore_index=<span class="hljs-literal">True</span>)train_df.to_csv(os.path.join(<span class="hljs-string">'D:/data/open-image-v4/train-data'</span>, <span class="hljs-string">'train.csv'</span>),index=<span class="hljs-literal">False</span>)</code></pre><p>Parse train_imgs 1557; Number of boxes: 5722</p><pre><code class="hljs python">test_df = pd.DataFrame(columns=[<span class="hljs-string">'FileName'</span>, <span class="hljs-string">'XMin'</span>, <span class="hljs-string">'YMin'</span>, <span class="hljs-string">'XMax'</span>, <span class="hljs-string">'YMax'</span>, <span class="hljs-string">'ClassName'</span>])test_path = <span class="hljs-string">'D:/data/open-image-v4/test-data/all'</span>test_images = os.listdir(test_path)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(test_images)):    sys.stdout.write(<span class="hljs-string">'Parse train_imgs '</span> + str(i+<span class="hljs-number">1</span>) + <span class="hljs-string">'; Number of boxes: '</span> + str(len(test_df)) + <span class="hljs-string">'\r'</span>)    sys.stdout.flush()    img_name = test_images[i]    img_id = img_name[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>]    tmp_df = annotations_bbox[annotations_bbox[<span class="hljs-string">'ImageID'</span>]==img_id]    <span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> tmp_df.iterrows():        labelName = row[<span class="hljs-string">'LabelName'</span>]        <span class="hljs-keyword">if</span> labelName == car[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]:            className = <span class="hljs-string">'car'</span>        <span class="hljs-keyword">elif</span> labelName == person[<span class="hljs-string">'name'</span>].values[<span class="hljs-number">0</span>]:            className = <span class="hljs-string">'person'</span>        test_df = test_df.append(&#123;<span class="hljs-string">'FileName'</span>: img_name,                                             <span class="hljs-string">'XMin'</span>: row[<span class="hljs-string">'XMin'</span>],                                             <span class="hljs-string">'YMin'</span>: row[<span class="hljs-string">'YMin'</span>],                                             <span class="hljs-string">'XMax'</span>: row[<span class="hljs-string">'XMax'</span>],                                             <span class="hljs-string">'YMax'</span>: row[<span class="hljs-string">'YMax'</span>],                                             <span class="hljs-string">'ClassName'</span>:className&#125;,ignore_index=<span class="hljs-literal">True</span>)test_df.to_csv(os.path.join(<span class="hljs-string">'D:/data/open-image-v4/test-data'</span>, <span class="hljs-string">'test.csv'</span>),index=<span class="hljs-literal">False</span>)</code></pre><p>Parse train_imgs 401; Number of boxes: 1413</p><pre><code class="hljs python">train_df.head()</code></pre><p><img src="\images\object-detection\7.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs css"><span class="hljs-selector-tag">test_df</span><span class="hljs-selector-class">.head</span>()</code></pre><p><img src="\images\object-detection\8.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VGG16Net</title>
    <link href="/2019/07/03/VGG16Net/"/>
    <url>/2019/07/03/VGG16Net/</url>
    
    <content type="html"><![CDATA[<p><img src="\images\dp-net\VGG16_Summary_Table.jpg" srcset="/images/loading.gif" alt=""></p><p><img src="\images\dp-net\vgg16-neural-network.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<span class="hljs-comment">#模型</span>model = keras.Sequential()<span class="hljs-comment"># 1st Layer</span>model.add(layers.Conv2D(input_shape=(<span class="hljs-number">224</span>,<span class="hljs-number">224</span>,<span class="hljs-number">3</span>),filters=<span class="hljs-number">64</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">64</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'same'</span>))<span class="hljs-comment"># 2nd Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">128</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">128</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'same'</span>))<span class="hljs-comment"># 3rd Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">256</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">256</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">256</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'same'</span>))<span class="hljs-comment"># 4th Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'same'</span>))<span class="hljs-comment"># 5th Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Conv2D(filters=<span class="hljs-number">512</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'same'</span>))<span class="hljs-comment"># Passing it to a Fully Connected layer</span>model.add(layers.Flatten())<span class="hljs-comment"># 7th Fully Connected Layer</span>model.add(layers.Dense(<span class="hljs-number">4096</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dropout(<span class="hljs-number">0.5</span>))<span class="hljs-comment"># 7th Fully Connected Layer</span>model.add(layers.Dense(<span class="hljs-number">4096</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dropout(<span class="hljs-number">0.5</span>))<span class="hljs-comment"># Output Layer</span>model.add(layers.Dense(<span class="hljs-number">1000</span>,activation=<span class="hljs-string">'softmax'</span>))model.summary()</code></pre><pre><code class="hljs markdown"><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-section">Layer (type)                 Output Shape              Param #   =================================================================</span>conv2d_31 (Conv2D)           (None, 224, 224, 64)      1792      <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_32 (Conv2D)           (None, 224, 224, 64)      36928     <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>max<span class="hljs-emphasis">_pooling2d_</span>13 (MaxPooling (None, 112, 112, 64)      0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_33 (Conv2D)           (None, 112, 112, 128)     73856     <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_34 (Conv2D)           (None, 112, 112, 128)     147584    <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>max<span class="hljs-emphasis">_pooling2d_</span>14 (MaxPooling (None, 56, 56, 128)       0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_35 (Conv2D)           (None, 56, 56, 256)       295168    <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_36 (Conv2D)           (None, 56, 56, 256)       590080    <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_37 (Conv2D)           (None, 56, 56, 256)       590080    <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>max<span class="hljs-emphasis">_pooling2d_</span>15 (MaxPooling (None, 28, 28, 256)       0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_38 (Conv2D)           (None, 28, 28, 512)       1180160   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_39 (Conv2D)           (None, 28, 28, 512)       2359808   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_40 (Conv2D)           (None, 28, 28, 512)       2359808   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>max<span class="hljs-emphasis">_pooling2d_</span>16 (MaxPooling (None, 14, 14, 512)       0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_41 (Conv2D)           (None, 14, 14, 512)       2359808   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_42 (Conv2D)           (None, 14, 14, 512)       2359808   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>conv2d_43 (Conv2D)           (None, 14, 14, 512)       2359808   <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>max<span class="hljs-emphasis">_pooling2d_</span>17 (MaxPooling (None, 7, 7, 512)         0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>flatten_3 (Flatten)          (None, 25088)             0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>dense_11 (Dense)             (None, 4096)              102764544 <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>dropout_8 (Dropout)          (None, 4096)              0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>dense_12 (Dense)             (None, 4096)              16781312  <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span>dropout_9 (Dropout)          (None, 4096)              0         <span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-section">dense_13 (Dense)             (None, 1000)              4097000   =================================================================</span>Total params: 138,357,544Trainable params: 138,357,544Non-trainable params: 0<span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span><span class="hljs-strong">_____</span></code></pre><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统(3) 内存管理</title>
    <link href="/2019/06/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(3)%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2019/06/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(3)%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>操作系统对内存的划分和动态分配。</p><ul><li>内存空间的分配与回收</li><li>地址转换：逻辑地址和物理地址的转换</li><li>内存空间扩充：虚拟存储技术</li><li>存储保护：保证各道作业在各自的存储空间运行，互不干扰</li></ul><p><strong>内存连续分配管理</strong></p><ol><li><p>单一连续分配：内存分为系统区和用户区，只能用于单用户、单任务操作系统中</p></li><li><p>固定分区分配：将用户内存空间划分为若干个固定大小(分区相等或不等)的区域</p></li><li><p>动态分区分配：根据进程大小动态建立分区，并使分区大小正好适合进程的需要</p><p>分配策略，根据算法找到满足进程需要的空闲分区</p><ul><li><p>首次适应：空闲分区以地址递增的次序链接</p><p>(缺点：低地址出现较多小的空闲分区，查找都需经过这些分区，增加了查找开销)</p></li><li><p>最佳适应：空闲分区以容量递增的次序链接</p><p>(缺点：产生最多的外部碎片)</p></li><li><p>最坏适应：空闲分区以容量递减的次序链接</p><p>(缺点：可能会导致没有可用的大内存块)</p></li><li><p>邻近适应：分配内存时从上次查找结束的地址位置继续查找</p></li></ul></li></ol><p><img src="\images\system\4.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>内存非连续分配管理</strong></p><p>wait….</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alexnet</title>
    <link href="/2019/06/28/Alexnet/"/>
    <url>/2019/06/28/Alexnet/</url>
    
    <content type="html"><![CDATA[<p><img src="\images\dp-net\AlexNet_Summary_Table.jpg" srcset="/images/loading.gif" alt=""></p><p><img src="\images\dp-net\AlexNet-1.png" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs py"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<span class="hljs-comment">#模型</span>model = keras.Sequential()<span class="hljs-comment"># 1st Convolutional Layer</span>model.add(layers.Conv2D(input_shape=(<span class="hljs-number">227</span>,<span class="hljs-number">227</span>,<span class="hljs-number">3</span>),filters=<span class="hljs-number">96</span>,kernel_size=[<span class="hljs-number">11</span>,<span class="hljs-number">11</span>],strides=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),padding=<span class="hljs-string">'valid'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'valid'</span>))<span class="hljs-comment"># 2nd Convolutional Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">256</span>,kernel_size=[<span class="hljs-number">5</span>,<span class="hljs-number">5</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'valid'</span>))<span class="hljs-comment"># 3rd Convolutional Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">384</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))<span class="hljs-comment"># 4th Convolutional Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">384</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))<span class="hljs-comment"># 5th Convolutional Layer</span>model.add(layers.Conv2D(filters=<span class="hljs-number">256</span>,kernel_size=[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],strides=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),padding=<span class="hljs-string">'same'</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.MaxPool2D(pool_size=(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),strides=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),padding=<span class="hljs-string">'valid'</span>))<span class="hljs-comment"># Passing it to a Fully Connected layer</span>model.add(layers.Flatten())<span class="hljs-comment"># 6th Fully Connected Layer</span>model.add(layers.Dense(<span class="hljs-number">4096</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dropout(<span class="hljs-number">0.5</span>))<span class="hljs-comment"># 7th Fully Connected Layer</span>model.add(layers.Dense(<span class="hljs-number">4096</span>,activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dropout(<span class="hljs-number">0.5</span>))<span class="hljs-comment"># Output Layer</span>model.add(layers.Dense(<span class="hljs-number">1000</span>,activation=<span class="hljs-string">'softmax'</span>))model.summary()</code></pre><pre><code class="hljs cpp">_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_25 (Conv2D)           (None, <span class="hljs-number">55</span>, <span class="hljs-number">55</span>, <span class="hljs-number">96</span>)        <span class="hljs-number">34944</span>     _________________________________________________________________max_pooling2d_13 (MaxPooling (None, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">96</span>)        <span class="hljs-number">0</span>         _________________________________________________________________conv2d_26 (Conv2D)           (None, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">256</span>)       <span class="hljs-number">614656</span>    _________________________________________________________________max_pooling2d_14 (MaxPooling (None, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">256</span>)       <span class="hljs-number">0</span>         _________________________________________________________________conv2d_27 (Conv2D)           (None, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">384</span>)       <span class="hljs-number">885120</span>    _________________________________________________________________conv2d_28 (Conv2D)           (None, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">384</span>)       <span class="hljs-number">1327488</span>   _________________________________________________________________conv2d_29 (Conv2D)           (None, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">256</span>)       <span class="hljs-number">884992</span>    _________________________________________________________________max_pooling2d_15 (MaxPooling (None, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">256</span>)         <span class="hljs-number">0</span>         _________________________________________________________________flatten_3 (Flatten)          (None, <span class="hljs-number">9216</span>)              <span class="hljs-number">0</span>         _________________________________________________________________dense_12 (Dense)             (None, <span class="hljs-number">4096</span>)              <span class="hljs-number">37752832</span>  _________________________________________________________________dropout_9 (Dropout)          (None, <span class="hljs-number">4096</span>)              <span class="hljs-number">0</span>         _________________________________________________________________dense_13 (Dense)             (None, <span class="hljs-number">4096</span>)              <span class="hljs-number">16781312</span>  _________________________________________________________________dropout_10 (Dropout)         (None, <span class="hljs-number">4096</span>)              <span class="hljs-number">0</span>         _________________________________________________________________dense_14 (Dense)             (None, <span class="hljs-number">1000</span>)              <span class="hljs-number">4097000</span>   _________________________________________________________________dropout_11 (Dropout)         (None, <span class="hljs-number">1000</span>)              <span class="hljs-number">0</span>         _________________________________________________________________dense_15 (Dense)             (None, <span class="hljs-number">1000</span>)              <span class="hljs-number">1001000</span>   =================================================================Total params: <span class="hljs-number">63</span>,<span class="hljs-number">379</span>,<span class="hljs-number">344</span>Trainable params: <span class="hljs-number">63</span>,<span class="hljs-number">379</span>,<span class="hljs-number">344</span>Non-trainable params: <span class="hljs-number">0</span>_________________________________________________________________</code></pre><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-rtmp流媒体服务</title>
    <link href="/2019/06/26/nginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/"/>
    <url>/2019/06/26/nginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装ffmpeg</p><pre><code class="hljs bash"><span class="hljs-comment">#安装h264视频编解码库</span>sudo apt-get updatesudo apt-get install libx264-dev<span class="hljs-comment">#安装ffmpeg</span><span class="hljs-comment">#通过源安装&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>sudo add-apt-repository ppa:djcj/hybrid <span class="hljs-comment">#添加源</span>sudo apt-get updatesudo apt-get install ffmpegsudo ffmpeg -version <span class="hljs-comment">#验证是否安装成功</span><span class="hljs-comment">#源码安装&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>wget http://ffmpeg.org/releases/ffmpeg-3.0.9.tar.bz2sudo tar jxvf ffmpeg-3.0.9.tar.bz2<span class="hljs-built_in">cd</span> ffmpeg-3.0.9/sudo ./configure --<span class="hljs-built_in">enable</span>-shared --<span class="hljs-built_in">enable</span>-pthreads --<span class="hljs-built_in">enable</span>-gpl  --<span class="hljs-built_in">enable</span>-avresample $ --<span class="hljs-built_in">enable</span>-libx264 --<span class="hljs-built_in">enable</span>-libtheora  --<span class="hljs-built_in">disable</span>-yasmsudo make   sudo make install</code></pre></li><li><p>安装nginx</p><pre><code class="hljs bash"><span class="hljs-comment">#源码安装&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class="hljs-comment">#安装依赖</span>sudo apt-get install build-essentialsudo apt-get install libtoolsudo apt-get updatesudo apt-get install libpcre3 libpcre3-devsudo apt-get install zlib1g-devsudo apt-get install openssl<span class="hljs-comment">#安装</span>sudo mkdir nginx<span class="hljs-built_in">cd</span> nginxgit <span class="hljs-built_in">clone</span> https://github.com/arut/nginx-rtmp-module.gitsudo wget http://nginx.org/download/nginx-1.12.0.tar.gzsudo tar -zxvf nginx-1.12.0.tar.gz<span class="hljs-built_in">cd</span> nginx-1.12.0/sudo ./configure --prefix=/usr/<span class="hljs-built_in">local</span>/nginx --with-http_ssl_module --add-module=../nginx-rtmp-modulesudo makesudo make install<span class="hljs-comment">#启动：</span>sudo /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx<span class="hljs-comment">#or</span>sudo /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.conf</code></pre></li><li><p>配置Nginx流媒体服务器</p><pre><code class="hljs bash"><span class="hljs-comment">#停止</span>sudo /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx -s stop sudo vim /usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.conf<span class="hljs-comment">#添加</span>rtmp &#123;    server &#123;            listen 1935;            chunk_size 4096;             application live &#123;                    live on;                    record on;                    &#125;    &#125;&#125;<span class="hljs-comment">#重新启动</span>sudo /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx</code></pre></li><li><p>ffmpeg 推流</p><pre><code class="hljs bash">ffmpeg -re -i /home/test.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://localhost/live</code></pre></li><li><p>客户端拉流</p><p>使用vlc打开网络串流,输入流媒体服务器地址:rtmp://服务器IP:1935/live/ ,即可播放</p></li></ol><p><strong>nginx的删除</strong></p><pre><code class="hljs bash">$ sudo service nginx stop$ sudo apt-get --purge remove nginx$ sudo apt-get autoremove$ dpkg --get-selections|grep nginx<span class="hljs-comment">#结果:nginx-common</span>$ sudo apt-get --purge remove nginx-common</code></pre><p><code>版权</code>声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(4) 树与二叉树</title>
    <link href="/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(4)%20%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(4)%20%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>树的定义:树是$N(N\geqslant 0)$个结点的有限集合。特别的，当$N=0$时，称为空树。</p><p>任意非空树满足的条件：</p><ul><li>有且仅有一个特定的称为<strong>根</strong>的结点</li><li>当$N&gt;1$时，其余结点可分为$m$个互不相交的有限集合$T_1,T_2,\dots,T_m$,其中每个集合本身又是一棵树，并且称为根结点的子树</li></ul><p>树是一种递归的数据结构</p><ul><li>根结点无前驱结点，除根结点外的其余所有结点有且仅有一个前驱结点</li><li>树中所有结点可以有零个或多个后继结点</li></ul><p><strong>基本术语</strong></p><p><img src="\images\dataStructure\2.jpg" srcset="/images/loading.gif" alt=""></p><ol><li>结点$K$,结点$A,B,E$为到结点$K$的唯一路径上的结点，$A,B$为$K$的<strong>祖先结点</strong>，$K$为$A,B$的子孙结点；$E$为$K$的<strong>双亲结点</strong>，$K$为$E$的<strong>孩子结点</strong>，有相同双亲的结点为<strong>兄弟结点</strong>，如$K$和$L$互为兄弟节点；</li><li>树中一个子结点的个数称为该结点的度，树中结点的最大度数称为树的度；</li><li>度大于$0$的结点称为分支结点,如$B,C,D$,度为$0$的结点称为叶子结点，如$K,L,M$；</li><li>树的深度为树中结点的最大层数，如图的树形结构深度为4</li><li>两个结点之间的路径为两个结点之间所经过的结点序列，路径长度为路径上经过的边的个数，如$A$到$K$的路径长度为3；</li><li>森林是$m$课互不相交的树的集合；</li></ol><h1 id="二叉树概念"><a href="#二叉树概念" class="headerlink" title="二叉树概念"></a>二叉树概念</h1><p>定义:每个结点至多只有两颗子树的树形结构，即二叉树中不存在度大于2的结点，二叉树有左右之分，次序不可颠倒。</p><p><strong>二叉树的形态</strong>：</p><p><img src="\images\dataStructure\3.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>满二叉树：</strong>一颗高度为$h$，并且含有$2^h-1$个结点的二叉树</p><p>对于编号$i$结点，如果有双亲，其双亲为[$i/2$]，如果孩子结点，左孩子为$2i$,右孩子为$2i+1$</p><p><img src="\images\dataStructure\4.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>完全二叉树</strong>：设深度为$h$，有$n$个结点的二叉树，当且仅当其每一个结点都与深度为$h$的满二叉树中编号为$1\sim n$的结点<strong>一一对应</strong>，称为完全二叉树。</p><p>特点：</p><ol><li>若$i\leqslant[n/2] $,则结点$i$为分支节点，否则为叶子节点；</li><li>如果有度为1的结点，只可能有一个，且该结点只有左孩子无右孩子；</li></ol><p><strong>平衡二叉树</strong>：树上<strong>任一结点</strong>的左子树和右子树的深度差不超过1</p><p><strong>二叉树的性质：</strong></p><ol><li>非空二叉树上叶子结点数等于度为2的结点数加1，即$N_0=N_2+1$</li><li>非空二叉树上第$K$层至多有$2^{k-1}个结点(K\geqslant 1)$</li><li>深度为$h$的二叉树至多有$2^{h}-1$个结点</li><li>对于具有$1 \sim n$编号的完全二叉树，具有如下关系<ul><li>当$i&gt;1$时，结点$i$的双亲结点编号为$[i/2]$,当$i$为偶数时其为双亲结点的左孩子，当$i$为奇数时其为双亲结点的右孩子</li><li>当$2i\leqslant n $时，结点$i$的左孩子编号为$2i$，否则无左孩子</li><li>当$2i+1\leqslant n $时，结点$i$的左孩子编号为$2i +1$，否则无右孩子</li><li>结点$i$所在深度为$[\log _2{i}+1]$</li></ul></li><li>具有$n$个结点的完全二叉树的深度为$[\log _2{(n+1)}]$或$[\log _2{n}]+1$</li></ol><p><strong>二叉树的顺序存储</strong></p><p>将完全二叉树上编号为$i$的结点元素存储在某个数组下标为$i-1$的分量中。</p><p>对于一般的二叉树，使用0表示不存在的空结点，下标从1开始。</p><p><img src="\images\dataStructure\5.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>二叉树的链式存储</strong></p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">biTreeNode</span>&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">biTreeNode</span> *<span class="hljs-title">left</span>,*<span class="hljs-title">right</span>;</span><span class="hljs-comment">//左右孩子指针</span>&#125;biTreeNode,*biTree;</code></pre><h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><ol><li><p>先序遍历</p><p>访问根结点$\rightarrow$先序遍历左子树$\rightarrow $先序遍历右子树</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BiTree tree)</span></span>&#123;    <span class="hljs-keyword">if</span>(tree != null)&#123;        visit(tree);        preOrder(tree-&gt;left);        preOrder(tree-&gt;right);    &#125;&#125;</code></pre></li><li><p>中序遍历</p><p>中序遍历左子树$\rightarrow$访问根结点$\rightarrow $中序遍历右子树</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(BiTree tree)</span></span>&#123;    <span class="hljs-keyword">if</span>(tree != null)&#123;        inOrder(tree-&gt;left);        visit(tree);        inOrder(tree-&gt;right);    &#125;&#125;</code></pre></li><li><p>后序遍历</p><p>后序遍历左子树$\rightarrow$后序遍历右子树$\rightarrow $访问根结点</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(BiTree tree)</span></span>&#123;    <span class="hljs-keyword">if</span>(tree != null)&#123;        postOrder(tree-&gt;left);        postOrder(tree-&gt;right);        visit(tree);    &#125;&#125;</code></pre><p><img src="\images\dataStructure\6.jpg" srcset="/images/loading.gif" alt=""></p><ul><li>先序遍历：1 2 4 6 3 5 </li><li>中序遍历：2 6 4 1 3 5</li><li>后序遍历：6 4 2 5 3 1</li></ul></li><li><p>非递归遍历算法</p><pre><code class="hljs c++"><span class="hljs-comment">//中序遍历非递归算法</span><span class="hljs-keyword">void</span> inOrder*(BiTree tree)&#123;    initStack(<span class="hljs-built_in">stack</span>);<span class="hljs-comment">//初始化栈</span>    BiTree p = tree;<span class="hljs-comment">//遍历指针</span>    <span class="hljs-keyword">while</span>(p || !isEmpty(<span class="hljs-built_in">stack</span>))&#123;        <span class="hljs-keyword">if</span>(p)&#123;            push(<span class="hljs-built_in">stack</span>,p);            p = p-&gt;left;        &#125;        <span class="hljs-keyword">else</span>&#123;            pop(<span class="hljs-built_in">stack</span>,p);            visit(p);            p = p-&gt;right;        &#125;    &#125;&#125;</code></pre></li><li><p>层次遍历</p><p>按图中箭头的顺序进行遍历，先访问第一层，再访问第二层,$\dots$</p><p><img src="\images\dataStructure\7.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(BiTree tree)</span></span>&#123;initQueue(<span class="hljs-built_in">queue</span>);    biTree p;    enQueue(<span class="hljs-built_in">queue</span>,tree);<span class="hljs-comment">//根节点入队</span>    <span class="hljs-keyword">while</span>(!isEmpty(<span class="hljs-built_in">queue</span>))&#123;        deQueue(<span class="hljs-built_in">queue</span>,p);<span class="hljs-comment">//队头元素出队</span>        visit(p);        <span class="hljs-keyword">if</span>(p-&gt;left != null)            enQueue(<span class="hljs-built_in">queue</span>,p-&gt;left);        <span class="hljs-keyword">if</span>(p-&gt;right != null)            enQueue(<span class="hljs-built_in">queue</span>,p-&gt;right);    &#125;&#125;</code></pre></li><li><p>根据遍历序列构造二叉树</p><ul><li>二叉树的先序序列和中序序列可以唯一确定一颗二叉树。先序序列中，第一结点为根节点，在中序序列中，根结点将其分为两个子序列，根据该子序列在先序序列中找到对应的左子序列和右子序列，其先序序列中，左子序列第一个结点为左子树的根节点，右子序列的第一个结点为右子树的根结点，如此递归。</li><li>二叉树的后序序列和中序序列可以唯一确定一颗二叉树。后序序列的最后一个结点为根节点。</li><li>层次遍历序列和中序序列可以唯一确定一颗二叉树。</li></ul><p>求先序序列$ABCDEFGHI$和中序遍历$BCAEDGHFI$所确定的二叉树</p><p><img src="\images\dataStructure\8.jpg" srcset="/images/loading.gif" alt=""></p></li></ol><h1 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><p>二叉树线索化时通常规定，若无左子树，令leftChild指向其前驱结点，leftTag = 1；若无右子树，令right-child指向其后继结点,rightTag = 1。</p><p><strong>线索二叉树的存储结构</strong></p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">threadNode</span>&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">threadNode</span> *<span class="hljs-title">leftChild</span>,<span class="hljs-title">rightChild</span>;</span>    <span class="hljs-keyword">int</span> leftTag,rightTag;&#125;</code></pre><p><strong>线索二叉树的构造</strong></p><pre><code class="hljs c++"><span class="hljs-comment">//中序遍历-二叉树线索化</span><span class="hljs-comment">//指针pre指向中序遍历时上一个刚刚访问过的结点</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inThreadNode</span><span class="hljs-params">(threadNode &amp;p,threadNode &amp;pre)</span></span>&#123;    <span class="hljs-keyword">if</span>(p != null)&#123;        inThreadNode(p-&gt;leftChild,pre);<span class="hljs-comment">//递归线索化左子树</span>        <span class="hljs-keyword">if</span>(p-&gt;leftChild == null)&#123; <span class="hljs-comment">//建立前驱线索</span>            p-&gt;leftChild = pre;            p-&gt;leftTag = <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">if</span>(pre != null &amp;&amp; pre-&gt;rightCihld == null)&#123;<span class="hljs-comment">//建立后继线索</span>            pre-&gt;rightChild = p;            pre-&gt;rightTag = <span class="hljs-number">1</span>;        &#125;        pre = p;        inthreadNode(p-&gt;rightChild,pre);<span class="hljs-comment">//递归线索化右子树</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createInThreadNode</span><span class="hljs-params">(threadNode T)</span></span>&#123;    threadNode pre = null;    <span class="hljs-keyword">if</span>(T != null)&#123;        inThreadNode(T,pre);        pre-&gt;rightChild = null;<span class="hljs-comment">//处理遍历的最后一个结点</span>        pre-&gt;rightTag = <span class="hljs-number">1</span>;    &#125;&#125;</code></pre><p><img src="\images\dataStructure\9.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>线索二叉树的遍历</strong></p><ul><li><p>求中序线索二叉树中中序序列的第一个结点</p><pre><code class="hljs c++"><span class="hljs-function">threadNode * <span class="hljs-title">firstNode</span><span class="hljs-params">(threadNode *p)</span></span>&#123;    <span class="hljs-keyword">while</span>(p-&gt;leftTag == <span class="hljs-number">0</span>)        p = p-&gt;leftChild;    <span class="hljs-keyword">return</span> p;&#125;</code></pre></li><li><p>求中序线索二叉树中结点p在中序序列下的后继结点</p><pre><code class="hljs c++"><span class="hljs-function">threadNode * <span class="hljs-title">nextNode</span><span class="hljs-params">(threadNode *p)</span></span>&#123;    <span class="hljs-keyword">if</span>(p-&gt;rightTag == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> firstNode(p-&gt;rightChild);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> p-&gt;rightChild;&#125;</code></pre></li><li><p>遍历算法</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> * <span class="hljs-title">inThreadNode</span><span class="hljs-params">(threadNode *T)</span></span>&#123;    <span class="hljs-keyword">for</span>(threadNode *p = firstNode(T);p != <span class="hljs-literal">NULL</span>;p = nextNode(p))        visit(p);&#125;</code></pre></li></ul><h1 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h1><ol><li><p>双亲表示法</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>ElemType data;<span class="hljs-comment">//数据</span><span class="hljs-keyword">int</span> parent;<span class="hljs-comment">//双亲位置域</span>&#125;Node;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    Node nodes[MAX_TREE_SIZE];    <span class="hljs-keyword">int</span> n;<span class="hljs-comment">//结点数</span>&#125;Tree;</code></pre><p><img src="\images\dataStructure\10.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>孩子表示法</p><p>将每个结点的孩子结点都用单链表链接起来形成一个线性结构</p><p><img src="\images\dataStructure\11.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>孩子兄弟表示法</p><p>以二叉链表作为树的存储结构，每个结点包括：结点值、指向结点第一个孩子的指针、指向结点下一个兄弟结点的指针</p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>ElemType data;<span class="hljs-comment">//数据</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">firstChild</span>,*<span class="hljs-title">nextSibling</span>;</span><span class="hljs-comment">//第一个孩子和兄弟指针</span>&#125;Node,*Node;</code></pre><p><img src="\images\dataStructure\12.jpg" srcset="/images/loading.gif" alt=""></p></li></ol><p><strong>树、森林与二叉树的转换</strong></p><p>树转换为二叉树的规则：每个结点的左指针指向它的第一个孩子结点，右指针指向它在树中的相邻兄弟结点，由于根结点没有兄弟，因此由树转换而来的二叉树没有右子树。</p><p><img src="\images\dataStructure\13.jpg" srcset="/images/loading.gif" alt=""></p><h1 id="树与二叉树的应用"><a href="#树与二叉树的应用" class="headerlink" title="树与二叉树的应用"></a>树与二叉树的应用</h1><ol><li><p>并查集</p></li><li><p>二叉排序树</p><p><strong>定义</strong>：</p><ul><li>若左子树非空，则左子树上所有结点关键值均小于根节点的关键值</li><li>若右子树非空，则右子树上所有结点关键值均大于根节点的关键值</li><li>左右子树本身也为一颗二叉排序树</li></ul><p><img src="\images\dataStructure\14.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>二叉排序树的查找</strong></p><p>从根节点开始，若给定值与根结点关键值相等则查找成功；若根结点大于给定值则在左子树中查找；若根结点小于给定值则在右子树中查找</p><pre><code class="hljs c++"><span class="hljs-comment">//查找函数返回指向关键值为key的结点指针p</span><span class="hljs-function">biTreeNode * <span class="hljs-title">biTreeNodeSearch</span><span class="hljs-params">(biTree tree,ElemType key)</span></span>&#123;    <span class="hljs-keyword">while</span>(tree != <span class="hljs-literal">NULL</span> &amp;&amp; key != tree-&gt;data)&#123;        <span class="hljs-keyword">if</span>(key &lt; tree-&gt;data)            tree = tree-&gt;leftChild;        <span class="hljs-keyword">else</span>            tree = tree-&gt;rightChild;    &#125;    <span class="hljs-keyword">return</span> tree;&#125;</code></pre><p><strong>二叉排序树的插入</strong></p><p>若原二叉树为空，则直接插入结点；若根结点大于给定值则插入到左子树中；若根结点小于给定值则插入到右子树中</p><pre><code class="hljs c++">![<span class="hljs-number">15</span>](F:\jiaopaner\source\images\dataStructure\<span class="hljs-number">15.</span>jpg)<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">biTreeNodeInsert</span><span class="hljs-params">(biTree tree,ElemType key)</span></span>&#123;    <span class="hljs-keyword">if</span>(tree == null)&#123;        tree = (biTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(biTreeNode));        tree-&gt;data = key;        tree-&gt;leftChild=  tree-rightChild = <span class="hljs-literal">NULL</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key == tree-&gt;data)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &lt; tree-&gt;data)        <span class="hljs-keyword">return</span> biTreeNodeInsert(tree-&gt;lefgChild,key);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; tree-&gt;data)        <span class="hljs-keyword">return</span> biTreeNodeInsert(tree-&gt;rightChild,key);&#125;</code></pre><p><strong>二叉排序树的删除</strong></p><ul><li><p>删除的结点为叶结点，则直接删除，不会破坏二叉树的排序性质</p></li><li><p>若删除结点$z$只有一颗左子树(或右子树)，则让$z$的左子树(或右子树)成为$z$结点的父结点的子树，即代替$z$的位置</p><p><img src="\images\dataStructure\15.jpg" srcset="/images/loading.gif" alt=""></p><p><img src="\images\dataStructure\16.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>若删除结点$z$有左、右子树，则令$z$的右子树中中序第一个子女代替$z$，并转换相应的位置</p><p><img src="\images\dataStructure\17.jpg" srcset="/images/loading.gif" alt=""></p></li></ul></li><li><p>平衡二叉树</p><p>定义：任意结点的左右子树高度差不超过1的二叉排序树</p><p><strong>平衡二叉树的插入</strong></p><p>平衡二叉树插入新结点会破坏平衡性，因此插入新结点后需要做调整，以重新达到平衡性</p><p><img src="\images\dataStructure\18.jpg" srcset="/images/loading.gif" alt=""></p><p>平衡性调整策略</p><ul><li><p>LL平衡旋转(右单旋转)</p><p>在根结点$A$的左孩子(L)结点$B$的左子树(L)结点$BL$上插入了结点,破坏了平衡性的调整策略，$B$结点右上旋转代替$A$成为根结点，$A$结点成为$B$的右子树根结点，且$B$的右子树作为$A$结点的左子树</p><p><img src="\images\dataStructure\19.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>RR平衡旋转(左单旋转)</p><p>在根结点$A$的右孩子(R)结点$C$的右子树(R)结点$CR$上插入了结点,破坏了平衡性的调整策略，$C$结点左上旋转代替$A$成为根结点，$A$结点成为$C$的左子树根结点，且$C$的左子树作为$A$结点的右子树</p><p><img src="\images\dataStructure\20.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>LR平衡旋转(先左后右双旋转)</p><p>在根结点$A$的左孩子(L)结点$B$的右子树(R)结点$BR$上插入了结点,破坏了平衡性的调整策略</p><p><img src="\images\dataStructure\21.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>RL平衡旋转(先右后左双旋转)</p><p>在根结点$A$的右孩子(R)结点$C$的左子树(L)结点$CR$上插入了结点,破坏了平衡性的调整策略</p><p><img src="\images\dataStructure\22.jpg" srcset="/images/loading.gif" alt=""></p></li></ul></li><li><p><strong>哈夫曼树和哈夫曼编码</strong></p><p>树结点赋予权值，从根结点到任意结点的路径长度(经过的边数)与该结点权值的乘积称为该结点的带权路径长度，树中所有<strong>叶结点</strong>的带权路径长度之和称为该树的带权路径长度$WPL$。</p><script type="math/tex; mode=display">WPL=\sum_{i=1}^{n}w_i\times l_i</script><p>其中$w_i$为第$i$个叶结点的权值，$l_i$为根结点到第$i$个叶结点的路径长度</p><p>在含有$n$个带权叶子结点的二叉树中，其中$WPL$最小的二叉树称为哈夫曼树(最优二叉树)</p><p><img src="\images\dataStructure\23.jpg" srcset="/images/loading.gif" alt=""></p><p>$WPL(a)=7\times2+5\times2+2\times2+4\times2=36$</p><p>$WPL(b)=7\times3+5\times3+1\times2+4\times2=46$</p><p>$WPL(c)=7\times1+5\times2+2\times3+4\times3=35$</p><p>$c$树为哈夫曼树</p><p><strong>哈夫曼树的构造</strong></p><ul><li>将$n$个带权结点作为$n$课仅含一个结点的二叉树，构成森林$F$</li><li>构造一个新结点$P$，并从$F$中选取两棵权值最小的树作为新结点的左、右子树，将新结点的权值置为左、右子树权值之和</li><li>从$F$中删除上述选取的两棵树，同时将新结点$P$加入$F$中</li><li>重复2、3步骤，直至$F$中只剩下一棵树</li></ul><p><img src="\images\dataStructure\24.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>哈夫曼编码</strong></p><p>对频率高的字符赋予短编码，对频率低的字符赋予长编码，从而使字符平均编码长度减短</p><p>哈夫曼编码：对每个字符当作一个独立的结点，其权值为字符出现的次数，构造哈夫曼树</p><p><img src="\images\dataStructure\25.jpg" srcset="/images/loading.gif" alt=""></p></li></ol><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(3) 栈和队列</title>
    <link href="/2019/06/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(3)%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2019/06/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(3)%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><strong>栈</strong>：只允许在一端进行插入或删除操作的线性表。</p><p>栈顶：允许插入和删除的一端。栈底：固定的，不允许插入和删除的一端。</p><p>特性：先进后出。</p><h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    ElemType data[MaxSize];<span class="hljs-comment">//存放栈中元素</span>    <span class="hljs-keyword">int</span> top;<span class="hljs-comment">//栈顶指针 空栈 top=-1</span>&#125; Stack;#初始化<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initStack</span><span class="hljs-params">(Stack &amp;s)</span></span>&#123;    s.top = <span class="hljs-number">-1</span>;&#125;#判断栈空<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">stackEmpty</span><span class="hljs-params">(Stack &amp;s)</span></span>&#123;    <span class="hljs-keyword">if</span>(s.top == <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;#进栈<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">push</span><span class="hljs-params">(Stack &amp;s,ElemType x)</span></span>&#123;    <span class="hljs-keyword">if</span>(s.top == MaxSize<span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    s.data[++s.top] = x;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;#出栈<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(Stack &amp;s,ElemType &amp;x)</span></span>&#123;    <span class="hljs-keyword">if</span>(s.top == <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    x = s.data[s.top--];    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;#读取栈顶元素<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">getTop</span><span class="hljs-params">(Stack &amp;s,ElemType &amp;x)</span></span>&#123;    <span class="hljs-keyword">if</span>(s.top == <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    x = s.data[s.top];    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h2><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span>&#125; *LinkStack;</code></pre><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><strong>队列</strong>：只允许在表的一端进行插入，在表的另一端进行删除。</p><p>队头：允许删除的一端。队尾：允许插入的一端。</p><p>特性：先进先出</p><h2 id="队列的顺序存储结构"><a href="#队列的顺序存储结构" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    ElemType data[MaxSize];<span class="hljs-comment">//存放队列元素</span>    <span class="hljs-keyword">int</span> front,rear;<span class="hljs-comment">//队头指针、队尾指针</span>&#125;Queue;</code></pre><p><strong>循环队列</strong></p><pre><code class="hljs c++">#初始化<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(Queue &amp;<span class="hljs-built_in">queue</span>)</span></span>&#123;    <span class="hljs-built_in">queue</span>.rear = <span class="hljs-built_in">queue</span>.front = <span class="hljs-number">0</span>;&#125;#判断队列空<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(Queue <span class="hljs-built_in">queue</span>)</span></span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>.rear == <span class="hljs-built_in">queue</span>.front)        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;#入队<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(Queue &amp;<span class="hljs-built_in">queue</span>,ElemType x)</span></span>&#123;    <span class="hljs-keyword">if</span>((<span class="hljs-built_in">queue</span>.rear+<span class="hljs-number">1</span>)%MaxSize == <span class="hljs-built_in">queue</span>.front)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//队列满</span>    <span class="hljs-built_in">queue</span>.data[<span class="hljs-built_in">queue</span>.rear] = x;    <span class="hljs-built_in">queue</span>.rear = (<span class="hljs-built_in">queue</span>.rear+<span class="hljs-number">1</span>) % MaxSize;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;#出队<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deQueue</span><span class="hljs-params">(Queue &amp;<span class="hljs-built_in">queue</span>,ElemType &amp;x)</span></span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>.rear+<span class="hljs-number">1</span> == <span class="hljs-built_in">queue</span>.front)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//队列空</span>    x = <span class="hljs-built_in">queue</span>.data[<span class="hljs-built_in">queue</span>.font];    <span class="hljs-built_in">queue</span>.front = (<span class="hljs-built_in">queue</span>.front+<span class="hljs-number">1</span>) % MaxSize;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h2><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>&#125;<span class="hljs-title">LinkNode</span>;</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    LinkNode *front,*rear;&#125;LinkQueue;#初始化<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;<span class="hljs-built_in">queue</span>)</span></span>&#123;    <span class="hljs-built_in">queue</span>.front = <span class="hljs-built_in">queue</span>.rear=(LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));    <span class="hljs-built_in">queue</span>.front.next = null;&#125;#判断队列空<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(LinkQueue <span class="hljs-built_in">queue</span>)</span></span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>.front == <span class="hljs-built_in">queue</span>.rear)        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;#入队<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(LinkQueue &amp;<span class="hljs-built_in">queue</span>,ElemType x)</span></span>&#123;    s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));    s-&gt;data = x;    s-&gt;next = null;    <span class="hljs-built_in">queue</span>.rear-&gt;next = s;    <span class="hljs-built_in">queue</span>.rear = s;&#125;#出队<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deQueue</span><span class="hljs-params">(LinkQueue &amp;<span class="hljs-built_in">queue</span>,ElemType &amp;x)</span></span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>.front == <span class="hljs-built_in">queue</span>.rear)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    p = <span class="hljs-built_in">queue</span>.front-&gt;next;    x = p-&gt;data;    <span class="hljs-built_in">queue</span>.front-&gt;next = p-&gt;next;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>.rear == p)        <span class="hljs-built_in">queue</span>.rear = <span class="hljs-built_in">queue</span>.front;    <span class="hljs-built_in">free</span>(p);    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h1 id="栈和队列的应用"><a href="#栈和队列的应用" class="headerlink" title="栈和队列的应用"></a>栈和队列的应用</h1>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统(2) 进程管理</title>
    <link href="/2019/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(2)%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2019/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(2)%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h1><p>在多道程序环境下，允许多个程序并发执行，因此失去封闭性并具有间断性和不可再现性的特征，为此引入进程，更好地描述和控制程序的并发执行，实现操作系统的并发性和共享性。</p><p><strong>进程控制块(PCB)</strong>：描述进程的基本情况和运行状态，进而控制和管理进程。</p><p>PCB是进程存在的唯一标志。创建进程实质是创建PCB，撤销进程实质是撤销PCB。</p><p><strong>进程映像</strong>：由程序段、相关数据段、PCB组成。</p><p><strong>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</strong></p><p><strong>特征</strong></p><ul><li>动态性：进程是程序的一次执行，具有生命周期。动态性是进程最基本的特征。</li><li>并发性、独立性、异步性、结构性</li></ul><p><strong>进程的状态与转换</strong></p><p><img src="\images\system\1.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>进程创建过程</strong></p><p>终端用户登录、作业调度、系统提供服务、用户程序的应用等请求都会引起进程的创建。</p><ol><li>为新进程分配唯一的进程标识号，申请空白的PCB；</li><li>为进程分配资源，分配进程的程序、数据和用户栈必要的内存空间；</li><li>初始化PCB，初始化标志信息、处理机状态信息、处理机控制信息、设置进程优先级；</li><li>将新进程插入到就绪队列等待调度；</li></ol><p><strong>进程终止过程</strong></p><p>正常结束、异常结束(存储区越界、保护错、非法指令、特权指令错、I/O故障)、外界干预等都会引起进程的终止。</p><ol><li>根据被终止进程标识符检索PCB，读取该进程的状态；</li><li>若被终止的进程处于执行状态则立即终止，将处理机资源分配给其他进程；</li><li>若有子进程，将其所有的子进程终止；</li><li>释放该进程的所有资源；</li><li>将PCB从所在队列中删除</li></ol><p>进程的创建、撤销以及要求系统设备完成的I/O操作都是利用系统调用而进入内核。</p><p><strong>进程的切换</strong></p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器；</li><li>更新PCB信息；</li><li>进程的PCB移入相应的队列，如就绪、阻塞；</li><li>选择另一个进程，并更新其PCB；</li><li>更新内存管理的数据结构；</li><li>恢复处理机上下文；</li></ol><p><strong>进程的通信</strong></p><ul><li><p>共享存储</p><p>通过对共享空间进行读写操作实现进程间的信息交换</p></li><li><p>消息传递</p><p>进程间的数据交换以格式化的消息为单位</p></li><li><p>管道通信</p><p>消息传递的特殊方式，所谓管道是指连接一个读进程和一个写进程以实现进程之间通信的一个共享文件。</p><p>写进程以字符流的形式将大量的数据写入管道。</p></li></ul><p><strong>线程</strong></p><p>线程是基本的CPU执行单元，线程是进程中的一个实体，是被系统独立调度和分派的基本单位。线程不拥有系统资源，只拥有在运行中必不可少的资源，可与同属同一进程的其他线程共享进程所拥有的全部资源。同一进程中的多个线程可以并发执行。</p><p>在传统操作系统中，拥有资源和独立调度的基本单位都是进程，引入多线程的操作系统中，线程是独立调度的基本单位，进程是拥有资源的基本单位。</p><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><p>处理及调度是对处理机进行分配，即从进程就绪队列中按照一定的算法选择进程并为其分配处理机，以实现进程并发执行。</p><p><strong>调度层次</strong></p><ul><li>作业调度：只调入/调出一次；</li><li>中级调度：内存调度，提高内存利用率和系统吞吐量，进程的挂起/就绪；</li><li>进程调度：按照某种算法调度进程执行； </li></ul><p>进程调度和切换程序是操作系统的内核程序。</p><p><strong>进程调度方式</strong></p><ul><li>非剥夺方式/非抢占方式：一旦将CPU分配给某个进程，只有当该进程执行完或转换到等待状态时才会进行进程的切换。实现简单、开销小，适用于大多数批处理系统，但不适用于实时和分时系统。</li><li>剥夺调度方式/抢占方式：若有某个更紧迫的进程需要调度，则立即暂定正在运行的进程，将处理机分配给更为紧迫的进程。剥夺原则：优先权、短进程优先、时间片原则。</li></ul><p><strong>调度的基本原则</strong></p><ol><li><p>CPU利用率</p></li><li><p>系统吞吐量：单位时间内CPU完成的作业数量；</p></li><li><p>周转时间：作业提交到作业完成的时间；</p><p>周转时间 = 作业完成时间 - 作业提交时间</p><p>带权周转时间 = $\frac{作业周转时间}{作业实际运行时间}$</p></li><li><p>等待时间</p></li><li><p>响应时间</p></li></ol><p><strong>调度算法</strong></p><ul><li><p>先来先服务(FCFS)调度算法：每次从就绪队列中选择最先进入该队列的进程进行执行，直到进程完成或因某种原因阻塞才释放处理机；算法简单、效率低，对长作业有利，利于CPU繁忙型作业、不利于I/O繁忙型作业。</p></li><li><p>短作业优先(SJF)调度算法：每次从就绪队列中选择一个估计运行时间最短的进程进行执行。对长作业不利、未考虑作业紧迫度，平均等待时间、平均周转时间最少。</p></li><li><p>优先级调度算法：每次从就绪队列中选择优先级最高的进程进行执行。</p></li><li><p>高响应比优先调度算法：同时考虑每个进程的等待时间和估计的运行时间，在进行进程调度前先计算就绪队列中每个进程的响应比，选择响应比最高的进程进行执行。</p><p>响应比$R_p=\frac{等待时间+要求服务的时间}{要求服务的时间}$</p></li><li><p>时间片轮转调度算法：总是选择就绪队列中第一个进程进行执行(先来先服务)，但仅能运行一个时间片，时间片用完即使进程并未完成运行，也必须释放处理机给下一个就绪进程。被剥夺的进程则重新排队，等待调度。</p></li><li><p>多级反馈队列调度算法：</p><ol><li>设置多个队列，赋予每个队列不同的优先级，第1级队列优先级最高，依次降低;</li><li>赋予每个队列不同的进程执行时间片，第1级队列时间片最短，依次递增；</li><li>新进程首先进入第1级队列末尾排队，按照先来先服务调度算法等待调度，若该进程能在第1级的时间片内完成，则撤离系统，否则转入下一级队列末尾排队，依次类推。</li><li>仅当第1级队列为空时才调度第2级队列的进程执行，依次类推。若处理正在执行第$i$级队列中的进程，当新进程进入优先级较高的$i-1$级别队列时，则新进程抢占处理机，当前第$i$级进程转入第$i$级末尾重新排队。</li></ol></li></ul><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><p>协调进程之间互相制约的关系。</p><ol><li>临界资源：一次仅允许一个进程使用的资源称为临界资源。对临界资源的访问必须互斥进行。</li><li>同步：需要在某些位置上协调进程之间的<strong>工作次序</strong>而等待、传递信息所产生的制约关系。</li><li><p>互斥：当一个进程使用临界资源时，其他要求进入临界区的进程必须等待。</p><p><strong>准则</strong>：</p></li></ol><ul><li>空闲让进：临界区空闲时，允许一个请求进入临界区的进程立即进入临界区</li><li>忙则等待：当已有进程进入临界区，其他试图进入临界区的进程必须等待<ul><li>有限等待：对访问请求的进程，应保证在有限时间内进入临界区</li></ul></li><li>让权等待：当进程不能进入临界区时，应立即释放处理器，防止进程忙等待</li></ul><p><strong>互斥的基本方法</strong></p><p>1.软件实现方法</p><p><strong>单标志法</strong></p><p>设置公用整型变量turn,用于指示被允许进入临界区的进程编号，进程必须交替进入临界区，否则违背空闲让进</p><pre><code class="hljs c++"><span class="hljs-comment">//P0进程</span><span class="hljs-keyword">while</span>(<span class="hljs-built_in">turn</span>!=<span class="hljs-number">0</span>); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span><span class="hljs-built_in">turn</span> = <span class="hljs-number">1</span>;remainder section;<span class="hljs-comment">//P1进程</span><span class="hljs-keyword">while</span>(<span class="hljs-built_in">turn</span>!=<span class="hljs-number">1</span>); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span><span class="hljs-built_in">turn</span> = <span class="hljs-number">0</span>;remainder section;</code></pre><p><strong>双标志法</strong></p><p>设置$flag[k]$,进入临界区前先检查进程$P_k$是否进入临界区,进程之间不需要交替进入，缺点为进程$p_i和p_j$可能同时进入临界区，违背忙等待</p><pre><code class="hljs c++"><span class="hljs-comment">//Pi进程</span><span class="hljs-keyword">while</span>(flag[j] == <span class="hljs-literal">true</span>); <span class="hljs-comment">//等待</span>flag[i] = <span class="hljs-literal">true</span>;critical section;<span class="hljs-comment">//临界区</span>flag[i] = <span class="hljs-literal">false</span>;remainder section;<span class="hljs-comment">//Pj进程</span><span class="hljs-keyword">while</span>(flag[i] == <span class="hljs-literal">true</span>); <span class="hljs-comment">//等待</span>flag[j] = <span class="hljs-literal">true</span>;critical section;<span class="hljs-comment">//临界区</span>flag[j] = <span class="hljs-literal">false</span>;remainder section;</code></pre><p>设置$flag[k]$,进入临界区前先设置本身进程标志为true,再检查进程$P_k$是否进入临界区,缺点是由于进程互相“谦让”容易形成饥饿现象，即进程都无法进入临界区</p><pre><code class="hljs c++"><span class="hljs-comment">//Pi进程</span>flag[i] = <span class="hljs-literal">true</span>;<span class="hljs-keyword">while</span>(flag[j] == <span class="hljs-literal">true</span>); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span>flag[i] = <span class="hljs-literal">false</span>;remainder section;<span class="hljs-comment">//Pj进程</span>flag[j] = <span class="hljs-literal">true</span>;<span class="hljs-keyword">while</span>(flag[i] == <span class="hljs-literal">true</span>); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span>flag[j] = <span class="hljs-literal">false</span>;remainder section;</code></pre><p><strong>Peterson 算法</strong></p><p>进入临界区前先设置本身进程标志为true,再设置turn标志，最后检查进程$P_k$是否进入临界区</p><pre><code class="hljs c++"><span class="hljs-comment">//Pi进程</span>flag[i] = <span class="hljs-literal">true</span>;<span class="hljs-built_in">turn</span> = j;<span class="hljs-keyword">while</span>(flag[j] == <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">turn</span> == j); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span>flag[i] = <span class="hljs-literal">false</span>;remainder section;<span class="hljs-comment">//Pj进程</span>flag[j] = <span class="hljs-literal">true</span>;<span class="hljs-built_in">turn</span> = i;<span class="hljs-keyword">while</span>(flag[i] == <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">turn</span> == i); <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span>flag[j] = <span class="hljs-literal">false</span>;remainder section;</code></pre><p>2.硬件实现方法</p><p><strong>中断屏蔽</strong></p><p>CPU只在发生中断时引起进程切换，屏蔽中断能够保证当前运行的进程将临界区的代码顺利执行完毕</p><p><strong>硬件指令</strong></p><p>TestAndSet指令(原子操作)，为每个临界资源设置共享布尔变量lock,true表示资源正被占用</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">TestAndSet</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> *lock)</span></span>&#123;    <span class="hljs-keyword">bool</span> old;    old = *lock;    *lock = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> old;&#125;<span class="hljs-comment">//进程</span><span class="hljs-keyword">while</span>(TestAndSet(&amp;lock)) <span class="hljs-comment">//等待</span>critical section;<span class="hljs-comment">//临界区</span>lock = <span class="hljs-literal">false</span>;remainder section;</code></pre><p><strong>Swap指令</strong></p><pre><code class="hljs c++">Swap(<span class="hljs-keyword">bool</span> *x,<span class="hljs-keyword">bool</span> *y)&#123;    <span class="hljs-keyword">bool</span> temp;    temp = *x;    *x = *y;    *y = temp;&#125;<span class="hljs-comment">//进程</span>key = <span class="hljs-literal">true</span>;<span class="hljs-comment">//为每个进程设置局部布尔变量</span><span class="hljs-keyword">while</span>(key != <span class="hljs-literal">false</span>) <span class="hljs-comment">//等待</span>    Swap(*lock,&amp;key)critical section;<span class="hljs-comment">//临界区</span>lock = <span class="hljs-literal">false</span>;remainder section;</code></pre><p><strong>信号量</strong></p><p>1.整型信号量：定义为表示资源数目的整型量$S$</p><pre><code class="hljs c++"><span class="hljs-comment">//申请资源</span>wait(S)&#123;    <span class="hljs-keyword">while</span>(S &lt;= <span class="hljs-number">0</span>);    S = S<span class="hljs-number">-1</span>;&#125;<span class="hljs-comment">//释放资源</span>signal(S)&#123;    S = S+<span class="hljs-number">1</span>;&#125;</code></pre><p>2.记录型信号量：定义为表示资源数目的整型量$value$和进程链表$L$(用于链接等待该资源的进程)</p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    <span class="hljs-keyword">int</span> value;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">process</span> *<span class="hljs-title">L</span>;</span>&#125;semaphore;<span class="hljs-comment">//申请资源</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(semaphore S)</span></span>&#123;    S.value--;    <span class="hljs-keyword">if</span>(S.value &lt; <span class="hljs-number">0</span>)&#123;        add <span class="hljs-keyword">this</span> <span class="hljs-built_in">process</span> to S.L;        block(S.L);<span class="hljs-comment">//进程阻塞，放弃处理机</span>    &#125;&#125;<span class="hljs-comment">//释放资源</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal</span><span class="hljs-params">(semaphore S)</span></span>&#123;    S.value++;    <span class="hljs-keyword">if</span>(S.value &lt;= <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//仍有进程等待</span>        <span class="hljs-built_in">remove</span> a <span class="hljs-built_in">process</span> P from S.L;        wakeup(P);<span class="hljs-comment">//唤醒进程</span>    &#125;&#125;</code></pre><p>利用信号量实现进程同步</p><pre><code class="hljs c++"><span class="hljs-comment">//进程Py中的y语句需要使用进程Px中x语句的运行结果</span>semaphore S = <span class="hljs-number">0</span>；Px()&#123;...x；singal(S);<span class="hljs-comment">//通知进程Py,语句x已完成</span>...&#125;Py()&#123;...wait(S);<span class="hljs-comment">//检查语句x是否已完成</span>y；...&#125;</code></pre><p>利用信号量实现进程互斥</p><pre><code class="hljs c++">semaphore S = <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化信号量 资源数量</span>Px()&#123;...    wait(S);<span class="hljs-comment">//访问资源，加锁</span>x；<span class="hljs-comment">//临界区</span>singal(S);<span class="hljs-comment">//访问结束，解锁</span>...&#125;Py()&#123;...wait(S);<span class="hljs-comment">//访问资源，加锁</span>y；<span class="hljs-comment">//临界区</span>singal(S);<span class="hljs-comment">//访问结束，解锁</span>...&#125;</code></pre><p>利用信号量实现前驱关系</p><p><img src="\images\system\2.jpg" srcset="/images/loading.gif" alt=""></p><p>$a:S1 \rightarrow S2,b:S1\rightarrow S3;c:S2 \rightarrow S4,d:S2\rightarrow S5;$</p><p>$e:S3 \rightarrow S6,f:S4\rightarrow S6,g:S5 \rightarrow S6$</p><pre><code class="hljs c++">semaphore a=b=c=d=e=f=g=<span class="hljs-number">0</span>;<span class="hljs-comment">//</span>S1()&#123;...singal(a);singal(b);<span class="hljs-comment">//S1完成</span>&#125;S2()&#123;...wait(a);...singal(c);singal(d);<span class="hljs-comment">//S2完成</span>&#125;S3()&#123;...wait(b);...singal(e);<span class="hljs-comment">//S3完成</span>&#125;S4()&#123;...wait(c);...singal(f);<span class="hljs-comment">//S4完成</span>&#125;S5()&#123;...wait(d);...singal(g);<span class="hljs-comment">//S5完成</span>&#125;S6()&#123;wait(e);    wait(f);    wait(g);...&#125;</code></pre><p><strong>经典同步问题</strong></p><ol><li><p>生产消费者问题</p><pre><code class="hljs c++">semaphore mutex = <span class="hljs-number">1</span>;<span class="hljs-comment">//临界区互斥信号量</span>semaphore empty = n;<span class="hljs-comment">//空闲缓冲区数</span>semaphore full = <span class="hljs-number">0</span>;<span class="hljs-comment">//满缓冲区数</span><span class="hljs-comment">//生产者进程</span>producer()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        produce an item in nextp;        wait(empty);<span class="hljs-comment">//获取空缓冲区单元</span>        wait(mutex);<span class="hljs-comment">//进入临界区</span>        add nextp ti <span class="hljs-built_in">buffer</span>;<span class="hljs-comment">//将数据放入缓冲区</span>        singal(mutex);        singal(full);    &#125;&#125;<span class="hljs-comment">//消费者进程</span>consumer()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(full);        wait(mutex);        <span class="hljs-built_in">remove</span> an item from <span class="hljs-built_in">buffer</span>;        singal(mutex);        singal(empty);        consume the item;    &#125;&#125;<span class="hljs-comment">//empty和full的wait操作必须在mutex前</span></code></pre></li></ol><ol><li><p>读者-写者问题</p><ul><li>允许多个读者同时对共享文件进行读操作</li><li>只允许一个写者向共享文件写数据</li><li>写者完成写操作之前不允许其他读者进行读操作</li><li>写者执行写操作之前，应让已有读者和写者全部退出</li></ul><pre><code class="hljs c++"><span class="hljs-comment">//读进程优先</span><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//当前读者数量</span>semaphore mutex = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于更新count时的互斥</span>semaphore rw = <span class="hljs-number">1</span>;<span class="hljs-comment">//互斥访问共享文件</span><span class="hljs-comment">//写者进程</span>writer()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(rw);        writing;        signal(rw);    &#125;&#125;<span class="hljs-comment">//读者进程</span>reader()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(mutex);        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)<span class="hljs-comment">//第一个读者读取时</span>            wait(rw);<span class="hljs-comment">//阻止写进程写操作</span>        count++;        signal(mutex);        reading;        wait(mutex);<span class="hljs-comment">//读取完毕</span>        count--;        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)<span class="hljs-comment">//当最后一个读进程读取完毕</span>            signal(rw)        signal(mutex);    &#125;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-comment">//写进程优先</span><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//当前读者数量</span>semaphore mutex = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于更新count时的互斥</span>semaphore rw = <span class="hljs-number">1</span>;<span class="hljs-comment">//互斥访问共享文件</span>semaphore w = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于实现写优先</span><span class="hljs-comment">//写者进程</span>writer()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(w)        wait(rw);        writing;        signal(rw);        signal(w);    &#125;&#125;<span class="hljs-comment">//读者进程</span>reader()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(w);<span class="hljs-comment">//无写进程时进入</span>        wait(mutex);        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)<span class="hljs-comment">//第一个读者读取时</span>            wait(rw);<span class="hljs-comment">//阻止写进程写操作</span>        count++;        signal(mutex);        signal(w);        reading;        wait(mutex);<span class="hljs-comment">//读取完毕</span>        count--;        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)<span class="hljs-comment">//当最后一个读进程读取完毕</span>            signal(rw)        signal(mutex);    &#125;&#125;</code></pre></li></ol><ol><li><p>哲学家进餐问题</p><pre><code class="hljs c++">semaphore chopstick[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//五根筷子</span>semaphore mutex =  <span class="hljs-number">1</span>;<span class="hljs-comment">//设置取筷子的信号量</span><span class="hljs-comment">//i号哲学家进程</span>Pi()&#123;    <span class="hljs-keyword">do</span>&#123;        wait(mutex);        wait(chopstick[i]);<span class="hljs-comment">//取左边筷子</span>        wait(chopstick[(i+<span class="hljs-number">1</span>]%<span class="hljs-number">5</span>);<span class="hljs-comment">//取右边筷子</span>        signal(mutex);        eat;        signal(chopstick[i]);        signal(chopstick[(i+<span class="hljs-number">1</span>]%<span class="hljs-number">5</span>);        think;    &#125;&#125;</code></pre></li></ol><ol><li><p>吸烟者问题w</p><pre><code class="hljs c++"><span class="hljs-keyword">int</span> <span class="hljs-built_in">random</span>;semaphore offerTobaccoAndPaper;<span class="hljs-comment">//烟草和纸</span>semaphore offerTobaccoAndGlue;<span class="hljs-comment">//烟草和胶水</span>semaphore offerPaperAndGlue;<span class="hljs-comment">//纸和胶水</span>semaphore finish = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录抽烟完成</span><span class="hljs-comment">//供应者进程</span>provider()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        <span class="hljs-built_in">random</span> = rand.<span class="hljs-built_in">random</span>(<span class="hljs-number">3</span>);<span class="hljs-comment">//1-3的整数随机数</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">random</span> == <span class="hljs-number">1</span>)&#123;            signal(offerTobaccoAndPaper);<span class="hljs-comment">//提供烟草和纸</span>        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">random</span> == <span class="hljs-number">1</span>)&#123;            signal(offerTobaccoAndGlue);<span class="hljs-comment">//提供烟草和胶水</span>        &#125;        <span class="hljs-keyword">else</span>&#123;            signal(offerPaperAndGlue);<span class="hljs-comment">//提供纸和胶水</span>        &#125;        wait(finish);    &#125;&#125;<span class="hljs-comment">//拥有烟草者进程</span><span class="hljs-built_in">process</span>()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(offerPaperAndGlue);        ...        signal(finish);    &#125;&#125;<span class="hljs-comment">//拥有纸者进程</span><span class="hljs-built_in">process</span>()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(offerTobaccoAndGlue);        ...        signal(finish);    &#125;&#125;<span class="hljs-comment">//拥有胶水者进程</span><span class="hljs-built_in">process</span>()&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        wait(offerTobaccoAndPaper);        ...        signal(finish);    &#125;&#125;</code></pre></li></ol><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>定义：多个进程因竞争不可剥夺资源而造成的互相等待，若无外力作用，进程都将无法向前推进。</p><p>产生死锁的必要条件(同时满足)</p><ul><li>互斥条件：某资源仅由一个进程占有</li><li>不剥夺条件：进程所获得资源在未使用完毕前，不可直接剥夺</li><li>请求和保持条件：进程已获得资源A，同时提出对资源B的请求，单资源B被其他进程占有，此失请求进程被阻塞，但对其资源A保持不放</li><li>循环等待条件：$p<em>i$等待的资源被$p</em>{i+1}$占有,$\dots$,$p_n$等待的资源被$p_0$占有</li></ul><p>死锁处理策略</p><ol><li>预防死锁：设置限制条件，破环产生死锁的必要条件</li><li>避免死锁：资源动态分配中，用某种方法防止系统进入不安全状态</li><li>死锁检测及解除：允许死锁发生，通过系统检测及时地解除死锁</li></ol><p><strong>银行家算法</strong></p><p>可利用资源矢量Available：每类资源可用的数目</p><p>最大需求矩阵Max：每个进程对每类资源的最大需求</p><p>分配矩阵Allocation：每个进程已分配到每类资源数目</p><p>需求矩阵Need：每个进程尚需的每类资源数目 $Need = Max - Allocation$</p><p>假设系统中有5个进程$p_0,p_1,p_2,p_3,p_4$和三类资源${A,B,C}$,各类资源数目分别为$10、5、7$,在$t_0$时刻资源分配情况如下表，求资源分配安全序列。</p><p><img src="\images\system\3.jpg" srcset="/images/loading.gif" alt=""></p><ol><li><p>求出Need矩阵</p><script type="math/tex; mode=display">\begin{bmatrix}7 & 5 & 3\\ 3 & 2 & 2\\ 9 & 0 & 2\\ 2 & 2 & 2\\ 4 & 3 & 3\end{bmatrix}(MAX)-\begin{bmatrix}0 & 1 & 0\\ 2 & 0 & 0\\ 3 & 0 & 2\\ 2 & 1 & 1\\ 0 & 0 & 2\end{bmatrix}(Allocation)=\begin{bmatrix}7 & 4 & 3\\ 1 & 2 & 2\\ 6 & 0 & 0\\ 0 & 1 & 1\\ 4 & 3 & 1\end{bmatrix}(Need)</script></li><li><p>Available向量与Need矩阵各行进行比较，找出比Available向量小的行，如$$</p><script type="math/tex; mode=display">p_1(1,2,2)<(3,2,2)\\p_3(0,1,1)<(3,2,2)</script><p>选择$p_1$(或$p_3$)加入安全序列</p></li><li><p>释放$p_1$所占有的资源，即把$p_1$的Allocation与Available向量相加,等到新的Available向量</p><script type="math/tex; mode=display">(2,0,0)+(3,3,2)=(5,3,2)=Available(new)</script></li><li><p>再用更新后的Available向量和Need向量矩阵重复步骤2</p></li></ol><p>安全序列：$[p_1,p_3,p_4,p_2,p_0]$</p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统(1) 概述</title>
    <link href="/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1)%20%E6%A6%82%E8%BF%B0/"/>
    <url>/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1)%20%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源分配，以提供给用户和其他软件方便的接口和环境的程序集合。</p><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p><strong>并发</strong>：两个或多个事件在同一时间间隔内发生。</p><p><strong>共享</strong></p><ul><li>互斥共享：一段时间内只允许一个进程访问资源，其余进程必须等待；</li><li>同时访问：进程交替的对资源进行访问，即分时共享；</li></ul><p><strong>虚拟</strong>：物理上的若干个实体变为若干个逻辑上的对应物，如虚拟内存、虚拟处理器等。</p><p>虚拟技术：时分复用技术，如处理器的分时共享；空分复用技术，如虚拟存储器。</p><p><strong>异步</strong>：为允许多个程序并发执行，进程的执行并非一贯到底，而是走走停停，以不可预知的速度向前推进。</p><h1 id="目标和功能"><a href="#目标和功能" class="headerlink" title="目标和功能"></a>目标和功能</h1><p><strong>作为计算机系统的管理者</strong>:处理及管理、存储器管理、文件管理、设备管理。</p><p><strong>作为用户与计算机硬件件的接口</strong>：命令接口(联机命令接口、脱机命令接口)、程序接口(系统调用、广义指令)。</p><h1 id="操作系统发展分类"><a href="#操作系统发展分类" class="headerlink" title="操作系统发展分类"></a>操作系统发展分类</h1><ol><li><strong>手工操作阶段</strong>：用户独占全机、CPU等待手工操作</li><li><strong>批处理阶段</strong><ul><li>单道批处理系统：系统对作业的处理成批处理,内存中始终保留一道作业；</li><li>多道批处理系统：允许多个程序同时进入内存并在CPU上交替运行，由作业调度程序自动选择作业运行；</li><li>分时操作系统：共享主机、人机交互</li><li>实时操作系统：及时性和可靠性</li><li>网络操作系统和分布式操作系统</li><li>个人操作系统</li></ul></li></ol><h1 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h1><p>操作系统内核工作在核心态，用户程序工作在用户态，从用户态转为核心态的唯一途径是中断或异常。</p><p>访管指令在用户态执行，产生中断事件，转为核心态，但其不是特权指令，特权指令在和心态执行。</p><p><strong>时钟管理</strong>：实现进程的切换。</p><p><strong>中断机制</strong>：进程管理和调度、系统功能调用、设备驱动、文件访问。</p><ul><li>外中断：外设请求、人为干预</li><li>内中断(异常)：指令中断、硬件故障、软件中断</li></ul><p><strong>原语</strong>：底层公用小程序，处于操作系统最底层、程序的运行具有原子性、运行时间短。</p><p><strong>系统控制的数据结构和处理</strong>：作业控制块、进程控制块、设备控制块、链表、消息队列、缓冲区、内存分配表等。</p><p>系统调用需出发trap命令,进入中断处理的程序在核心态执行，属于操作系统程序。</p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(2) 线性表</title>
    <link href="/2019/05/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(2)%20%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2019/05/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(2)%20%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>线性表是具有相同数据类型的$n$个数据元素的有限序列<br>除第一个元素,每个元素有且仅有一个直接前驱,除最后一个元素,每个元素有且仅有一个后继 </p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储称为顺序表,用一组地址连续的存储单元依次存储线性表中的数据元素，因此逻辑上相邻的两个元素在物理位置上也相邻</p><p><strong>顺序表描述</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>ElemType data[MaxSize];<span class="hljs-comment">//顺序表元素 静态分配</span><span class="hljs-keyword">int</span> length;<span class="hljs-comment">//当前长度</span>&#125;SqList;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 100</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>ElemType *data;<span class="hljs-comment">//顺序表元素 动态分配数组的指针</span><span class="hljs-keyword">int</span> MaxSize,length;<span class="hljs-comment">//数组最大容量和当前元素个数</span>&#125;SqList;L.data = (ElemType *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType) * InitSize);<span class="hljs-comment">//c</span>L.data = <span class="hljs-keyword">new</span> ElemType(InitSize);<span class="hljs-comment">//C++</span></code></pre><br>顺序表最主要的特点是随机访问,通过首地址和元素序号可在O(1)的时间复杂度内找到指定的元素</p><p><strong>插入操作</strong><br>在顺序表L的第i个位置插入新元素e</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-keyword">int</span> i, ElemType e)</span> </span>&#123;<span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; L.length+<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-keyword">if</span> (L.length &gt; = MaxSize)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = L.length; index &gt;= i; index--)L.data[index] = L.data[index - <span class="hljs-number">1</span>];L.data[i<span class="hljs-number">-1</span>] = e;L.length++;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p><strong>删除操作</strong><br>删除顺序表L中第i个位置的元素,删除的元素用引用变量e返回<br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-keyword">int</span> i, ElemType &amp;e)</span> </span>&#123;<span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; L.length)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;e = L.data[i - <span class="hljs-number">1</span>];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = i; index &lt; L.length; index++)L.data[index<span class="hljs-number">-1</span>] = L.data[index];L.length--;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><br><strong>按值查找</strong><br>在顺序表L中查找一个元素值等于e的元素,并返回其位置(非索引)</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList L,ElemType e)</span> </span>&#123;<span class="hljs-keyword">int</span> index;<span class="hljs-keyword">for</span> (index = <span class="hljs-number">0</span>; index &lt; L.length; index++)<span class="hljs-keyword">if</span> (L.data[index] == e)<span class="hljs-keyword">return</span> index + <span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>1.长度为$n$的顺序表$L$,编写一个时间复杂度为<script type="math/tex">O(n)</script>、空间复杂度为<script type="math/tex">O(1)</script>的算法，该算法删除线性表中所以值为x的数据元素。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delX</span><span class="hljs-params">(Sqlist &amp;L,ElemType x)</span></span>&#123;    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span> ;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; L.length;i++)&#123;        <span class="hljs-keyword">if</span>(L[i] != x)&#123;            L.data[k] = L.data[i];            k++;        &#125;    &#125;    L.length = k;&#125;</code></pre><p>2.从有序顺序表中删除所有其值重复的元素，使表中所有的值均不相同。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delSame</span><span class="hljs-params">(Sqlist &amp;L)</span></span>&#123;    <span class="hljs-keyword">if</span>(L.length = <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">int</span> i,j;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>,j = <span class="hljs-number">1</span>;j &lt; L.length;j++)&#123;        <span class="hljs-keyword">if</span>(L.data[i] != L.data[j])            L.data[++i] = L.data[j];    &#125;    L.length = i;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p>3.将两个有序顺序表合并成一个新的有序顺序表，并由函数返回其结果顺序表。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(Sqlist A,Sqlist B,Sqlist &amp;C)</span></span>&#123;    <span class="hljs-keyword">if</span>(A.length + B.length &gt; C.maxSize)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>,k = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length)&#123;        <span class="hljs-keyword">if</span>(A.data[i] &lt;= B.data[j])            C.data[k++] = A.data[i++];        <span class="hljs-keyword">else</span>            C.data[k++] = B.data[j++]    &#125;    <span class="hljs-keyword">while</span>(i &lt; A.length)&#123;        C.data[k++] = A.data[i++];    &#125;    <span class="hljs-keyword">while</span>(j &gt; B.length)&#123;        C.data[k++] = B.data[j++];    &#125;    C.length = k+<span class="hljs-number">1</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p>4.线性表<script type="math/tex">(a_1,a_2,...,a_n)</script>中的元素递增有序存储于计算机内，设计算法完成在最短的时间内在表中查找数值为x的元素，若存在则将其与后继元素交换，否则插入表中并使表中元素仍然递增有序。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">searchExchangeInsert</span><span class="hljs-params">(Sqlist &amp;L,ElemType x)</span></span>&#123;    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>,high = n <span class="hljs-number">-1</span>,mid;    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;        mid = (low + high) / <span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(L.data[mid] == x)            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.data[mid] &lt; x)            low = mid + <span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span>            high = mid - <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">if</span>(L.data[mid] == x &amp;&amp; mid != (n<span class="hljs-number">-1</span>))&#123;        ElemType temp = L.data[mid];        L.data[mid] = L.data[mid+<span class="hljs-number">1</span>];        L.[mid+<span class="hljs-number">1</span>] = temp;    &#125;    <span class="hljs-keyword">if</span>(low &gt; high)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n- <span class="hljs-number">1</span>;i &gt; high;i--)            L.data[i+<span class="hljs-number">1</span>] = L.data[i];        L.data[i+<span class="hljs-number">1</span>] = x;    &#125;&#125;</code></pre><p>5.设将<script type="math/tex">n(n>1)</script>个整数存放到一维数组R中。设计一个高效的算法将R中保存的序列循环左移<script type="math/tex">p(0<p<n)</script>个位置，即将R中的数据由<script type="math/tex">(x_0,x_1,...,x_{n-1})</script>变换为<script type="math/tex">(x_p,x_{p+1},...,x_{n-1},x_0,x_1,...,x_{p-1})</script></p><p>算法思想:</p><p>令<script type="math/tex">A=(x_0,x_1,...,x_{p-1}),B=(x_p,x_{p+1},...,x_{n-1}),C=BA</script>,<script type="math/tex">A^{-1}=(x_{p-1},x_{p-2},...,x_1,x_0)</script></p><script type="math/tex; mode=display">AB \rightarrow A^{-1}B\rightarrow A^{-1}B^{-1}\rightarrow (A^{-1}B^{-1})^{-1}\rightarrow BA</script><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> R[],<span class="hljs-keyword">int</span> from,<span class="hljs-keyword">int</span> to)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (to-from+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;i++)&#123;        <span class="hljs-keyword">int</span> temp = R[from+i];        R[from+i] = R[to-i];        R[to-i] = temp;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Converse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> R[],<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span>&#123;    Reverse(R,<span class="hljs-number">0</span>,p<span class="hljs-number">-1</span>);    Reverse(R,p,n<span class="hljs-number">-1</span>);    Reverse(R,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);&#125;</code></pre><p>6.长度为L的升序序列S，处在第[L/2]个位置的输称为S的中位数，两个序列的中位数是含它们所有元素升序序列的中位数，现有两个等长的升序序列A和B，设计算法找出序列A和序列B的中位数。</p><p>算法思想：</p><p>设<script type="math/tex">a</script>为A的中位数，<script type="math/tex">b</script>为B的中位数</p><ol><li>若<script type="math/tex">a=b</script>，则<script type="math/tex">a</script>或<script type="math/tex">b</script>即为所求中位数；</li><li>若<script type="math/tex">a<b</script>，舍弃序列A中较小的一半，同时舍弃序列B中较大的一半，两次舍弃的长度相等；</li><li>若<script type="math/tex">a>b</script>，舍弃序列A中较大的一半，同时舍弃序列B中较小的一半，两次舍弃的长度相等；</li><li>在保留的两个升序序列中,重复1，2，3,直到两个序列只含有一个元素为止，较小者为所求中位数；</li></ol><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mediSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> B[],<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> sa=<span class="hljs-number">0</span>,da=n<span class="hljs-number">-1</span>,ma;    <span class="hljs-keyword">int</span> sb=<span class="hljs-number">0</span>,db=n<span class="hljs-number">-1</span>,mb;    <span class="hljs-keyword">while</span>(sa != da || sb != db)&#123;        ma = (sa+da)/<span class="hljs-number">2</span>;        mb = (sb+db)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(A[ma] == B[mb])&#123;            <span class="hljs-keyword">return</span> A[ma];        &#125;        <span class="hljs-keyword">if</span>(A[ma] &lt; B[mb])&#123;            <span class="hljs-keyword">if</span>((sa+da)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//元素个数为奇数</span>                sa = ma;                db = mb;            &#125;            <span class="hljs-keyword">else</span>&#123;                sa = ma + <span class="hljs-number">1</span>;                db = mb;            &#125;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>((sb+db)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//元素个数为奇数</span>                da = ma;                sb = mb;            &#125;            <span class="hljs-keyword">else</span>&#123;                da = ma;                sb = mb + <span class="hljs-number">1</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> A[sa] &lt; B[sb]?A[sa]:B[sb];&#125;</code></pre><p>7.已知一个整数序列<script type="math/tex">A=(a_0,a_1,...a_{n-1})</script>，其中<script type="math/tex">0\leqslant a_{i}\leqslant n</script>,若存在<script type="math/tex">a_{p1}=a_{p2}=...a_{pm}=x</script>,且<script type="math/tex">m>n/2</script>,则称<script type="math/tex">x</script>为A的主元素。例如<script type="math/tex">A=(0,5,5,3,5,7,5,5)</script>，5为A的主元素，<script type="math/tex">B=(0,5,5,3,5,1,5,7)</script>,则B中没有主元素。设计算法找出A的主元素并输出，否则输出-1；</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">majority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">int</span> i,c,count = <span class="hljs-number">1</span>;<span class="hljs-comment">//c保存候选主元素</span>    c = A[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt; n;i++)&#123;        <span class="hljs-keyword">if</span>(A[i] == c)            count++;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)                count--;            <span class="hljs-keyword">else</span>&#123;                c = A[i];                count = <span class="hljs-number">1</span> ;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)        <span class="hljs-keyword">for</span>(i = count = <span class="hljs-number">0</span>;i &lt; n; i++)&#123;<span class="hljs-comment">//统计候选主元素实际出现的次数</span>            <span class="hljs-keyword">if</span>(A[i] == c)                count++;        &#125;    <span class="hljs-keyword">if</span>(count &gt; (n/<span class="hljs-number">2</span>))        <span class="hljs-keyword">return</span> c；    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;</code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>由于顺序表的插入、删除操作需要移动大量元素,影响运行效率,由此引入线性表的链式存储,链式存储不需要使用地址连续的存储单元,即逻辑上相邻的元素不要求在物理位置上也相邻</p><p><strong>单链表</strong></p><p>通过一组任意的存储单元来存储线性表中的数据元素,每个链表节点除了存放元素本身,还需要存放指向后继的指针,其是非随机存取结构<br><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>ElemType data; <span class="hljs-comment">//XX</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指针域</span>&#125;Node,*LinkList;</code></pre><br>通常用头指针来标识一个单链表,在单链表第一个节点前附加一个节点称为头节点,头节点的数据域不设任何信息<br><img src="/images/dataStructure/1.jpg" srcset="/images/loading.gif" alt=""><br>头指针和头节点：<br>1.不管带不带头节点,头指针始终指向链表的第一个节点<br>2.引入头节点,统一操作,统一空表和非空表的处理</p><p><strong>采用头插法建立单链表</strong></p><pre><code class="hljs cpp"><span class="hljs-function">LinkList <span class="hljs-title">createList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;Node *node;<span class="hljs-keyword">int</span> x;L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));L-&gt;next = null;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);<span class="hljs-keyword">while</span>(x != <span class="hljs-number">10</span>)&#123;node = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));node-&gt;data = x;node-&gt;next = L-&gt;next;L-&gt;next = node;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,x);&#125;<span class="hljs-keyword">return</span> L;&#125;</code></pre><p><strong>采用尾插法建立单链表</strong></p><pre><code class="hljs cpp"><span class="hljs-function">LinkList <span class="hljs-title">createList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<span class="hljs-keyword">int</span> x;L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));Node *node,*tail = L;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);<span class="hljs-keyword">while</span>(x != <span class="hljs-number">10</span>)&#123;node = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));node-&gt;data = x;tail-&gt;next = node;tail = node;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,x);&#125;tail-&gt;next = null;<span class="hljs-keyword">return</span> L;&#125;</code></pre><p><strong>按序号查找节点值</strong><br><pre><code class="hljs cpp"><span class="hljs-function">Node* <span class="hljs-title">getElem</span><span class="hljs-params">(LinkList L，<span class="hljs-keyword">int</span> i)</span></span>&#123;<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;Node *p= L-&gt;next;<span class="hljs-comment">//头节点</span><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> L;<span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> null;<span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123; <span class="hljs-comment">//从第一个节点开始查找</span>p = p-&gt;next;j++&#125;<span class="hljs-keyword">return</span> p;&#125;</code></pre><br><strong>按值查找表节点</strong><br><pre><code class="hljs cpp"><span class="hljs-function">Node* <span class="hljs-title">getElem</span><span class="hljs-params">(LinkList L，ElemType  e)</span></span>&#123;Node *p= L-&gt;next;<span class="hljs-comment">//头节点</span><span class="hljs-keyword">while</span>(p &amp;&amp; p-&gt;data != e)&#123; <span class="hljs-comment">//从第一个节点开始查找</span>p = p-&gt;next;&#125;<span class="hljs-keyword">return</span> p;&#125;</code></pre><br><strong>插入节点操作</strong><br><pre><code class="hljs cpp">p = getElem(L,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//查找插入位置i的前驱节点</span>s-&gt;next = p-&gt;next;p-&gt;next = s;</code></pre><br><strong>删除节点操作</strong><br><pre><code class="hljs cpp">p = getElem(L,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//查找删除位置i的前驱节点</span>q = p-next;p-&gt;next = q-&gt;next;<span class="hljs-built_in">free</span>(q);</code></pre><br><strong>双链表</strong></p><p>双链表通过prior和next，分别指向前驱节点和后继节点<br>双链表的按值查找和按位查找操作和单链表相同<br><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>ElemType data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">prior</span>;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span>&#125;Node,*DoubleList;</code></pre><br><strong>插入节点操作</strong></p><pre><code class="hljs cpp">p = getElem(L,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//查找插入位置i的前驱节点</span>s-&gt;next = p-&gt;next;p-&gt;next-prior = s;s-&gt;prior = p;p-&gt;next = s;</code></pre><p><strong>删除节点操作</strong><br><pre><code class="hljs cpp">p = getElem(L,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//查找删除位置i的前驱节点</span>q = p-next;p-&gt;next = q-&gt;next;p-&gt;next-&gt;prior = p;<span class="hljs-built_in">free</span>(q);</code></pre></p><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>静态链表是由数组来描述线性表的链式存储结构,节点也有数据域data和指针域next<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>ElemType data;<span class="hljs-keyword">int</span> next ;<span class="hljs-comment">//下一个元素的数组下标</span>&#125;StaticLinkList[MaxSize];</code></pre></p><ol><li><p>在带头结点的单链表L中，删除所有值为x的结点，并释放其空间。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteX</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;    Node *p = L-&gt;next,*pre = L;*q;<span class="hljs-comment">//pre为p的前驱结点</span>    <span class="hljs-keyword">while</span>(p != null)&#123;        <span class="hljs-keyword">if</span>(p-&gt;data == x)&#123;            q = p;            p = p-&gt;next;            pre-&gt;next = p;            <span class="hljs-built_in">free</span>(q);        &#125;        <span class="hljs-keyword">else</span>&#123;            pre = p;            p = p-&gt;next;        &#125;    &#125;&#125;</code></pre></li><li><p>设L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值。</p><pre><code class="hljs c++"><span class="hljs-comment">//递归方法</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;    <span class="hljs-keyword">if</span>(L-&gt;next != nulll)&#123;        reversePrint(L-next);    &#125;    <span class="hljs-built_in">printf</span>(L-&gt;data)&#125;<span class="hljs-comment">//借助栈</span></code></pre></li><li><p>编写在带头结点的单链表L中删除最小值结点的高效算法，假设最小值唯一。</p><pre><code class="hljs c++"><span class="hljs-function">LinkList <span class="hljs-title">deleteMinNode</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;    Node *p = L-&gt;next,*pre = L;<span class="hljs-comment">// pre为p的前驱结点</span>    Node *minPre = pre,*<span class="hljs-built_in">min</span> = p;<span class="hljs-comment">//最小值的前驱和当前最小值</span>    <span class="hljs-keyword">while</span>(p!= null)&#123;        <span class="hljs-keyword">if</span>(p-&gt;data &lt; <span class="hljs-built_in">min</span>-&gt;data)&#123;            <span class="hljs-built_in">min</span> = p;            minPre = pre;        &#125;        pre = p;        p = p-&gt;next;    &#125;    minPre-&gt;next = <span class="hljs-built_in">min</span>-&gt;next;    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">min</span>);    <span class="hljs-keyword">return</span> L;&#125;</code></pre></li><li><p>试编写算法将带头结点的链表逆置，且空间复杂度为$O(1)$</p><pre><code class="hljs c++"><span class="hljs-function">LinkList <span class="hljs-title">reverse</span><span class="hljs-params">(LinkList L)</span></span>&#123;    Node *p,*r;<span class="hljs-comment">//p为工作指针，r为后继指针</span>    p = L-&gt;next;    L-&gt;next = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)&#123;        r = p-&gt;next;        p-&gt;next = L-&gt;next;        L-&gt;next = p;        p = r;    &#125;&#125;</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构(1) 基本概念</title>
    <link href="/2019/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(1)%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2019/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(1)%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p><strong>数据</strong></p><p>数据是信息的载体，是描述客观事物的数、字符以及所有能输入到计算机且能被计算机识别和处理的符号集合。</p><p><strong>数据元素</strong></p><p>数据的基本单位，数据元素由数据项组成。如一条学生记录就是一个数据元素，它由姓名、学号、性别等数据项组成。</p><p><strong>数据对象</strong></p><p>具有相同性质的的数据元素集合，是数据的子集。</p><p><strong>抽象数据类型</strong></p><p>一个数学模型且定义在该模型上的一组操作，通常用数据对象、数据关系、基本操作集表示。</p><p><strong>数据结构</strong></p><p>数据结构包括逻辑结构、存储结构和数据的运算，算法的设计取决于选定的逻辑结构，算法的实现依赖于采用的存储结构。</p><blockquote><p>逻辑结构</p></blockquote><p>线性结构：结构中的数据元素只存在一对一的关系(线性表、栈和队列、串、数组、广义表)</p><p>非线性结构：结构中数据元素存在一对多的关系(树)、多对多的关系(图)</p><p>存储结构：顺序存储、链式存储、索引存储、散列存储</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数</title>
    <link href="/2019/04/26/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <url>/2019/04/26/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h1><p><strong>概念：行列式是一个数，是取自不同行不同列的n个元素的乘积的代数和</strong></p><p>二阶行列式：<br>$\begin{vmatrix}a &amp; b\ c &amp; d\end{vmatrix}=ad-bc$</p><p>三阶行列式：<br>$\begin{vmatrix}a<em>{1} &amp; a</em>{2} &amp; a<em>{3}\ b</em>{1} &amp; b<em>{2} &amp; b</em>{3}\c<em>{1} &amp; c</em>{2} &amp; c<em>{3}\end{vmatrix}=a</em>{1}b<em>{2}c</em>{3}+a<em>{2}b</em>{3}c<em>{1}+a</em>{3}b<em>{1}c</em>{2}-a<em>{3}b</em>{2}c<em>{1}-a</em>{2}b<em>{1}c</em>{3}-a<em>{1}b</em>{3}c_{2}$(对角线法则)</p><p>n阶乘行列式：<br>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{n1} &amp; a</em>{n2} &amp; … &amp; a<em>{nn}\end{vmatrix}=\sum</em>{j<em>{1}j</em>{2}…j<em>{n}}(-1)^{r(j</em>{1}j<em>{2}…j</em>{n})}a<em>{1j</em>{1}}a<em>{2j</em>{2}}…a<em>{nj</em>{n}}$(完全展开式)</p><p>$r(j<em>{1}j</em>{2}…j<em>{n})$ 为排列 $j</em>{1}j<em>{2}…j</em>{n}$ 的逆序数</p><p><strong>性质</strong></p><ol><li><p>经转置行列式的值不变. $\left | A^{T} \right |=\left | A \right |$</p></li><li><p>两行或两列互换的行列式变号. </p></li><li><p>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{n1} &amp; a</em>{n2} &amp; … &amp; a<em>{nn}\end{vmatrix}=-\begin{vmatrix}a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ \vdots &amp;\vdots &amp; &amp;\vdots &amp;\a</em>{n1} &amp; a<em>{n2} &amp; … &amp; a</em>{nn}\end{vmatrix}$</p></li><li><p>某行或某列有公因数k,可把k提取到行列式外.<br>$\begin{vmatrix}ka<em>{11} &amp; ka</em>{12} &amp; … &amp; ka<em>{1n}\ a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{n1} &amp; a</em>{n2} &amp; … &amp; a<em>{nn}\end{vmatrix}=k\begin{vmatrix}a</em>{11} &amp; a<em>{12} &amp; … &amp; a</em>{1n}\ a<em>{21} &amp; a</em>{22} &amp; … &amp; a<em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a</em>{n1} &amp; a<em>{n2} &amp; … &amp; a</em>{nn}\end{vmatrix}$</p></li><li><p>某行或某列所有元素都为两个数之和，则可写成两个行列式之和.</p><p>$\begin{vmatrix}a<em>{1} &amp; a</em>{2}+a<em>{4} &amp; a</em>{3}\ b<em>{1} &amp; b</em>{2}+b<em>{4} &amp; b</em>{3}\c<em>{1} &amp; c</em>{2}+c<em>{4} &amp; c</em>{3}\end{vmatrix}=\begin{vmatrix}a<em>{1} &amp; a</em>{2}&amp; a<em>{3}\ b</em>{1} &amp; b<em>{2}&amp; b</em>{3}\c<em>{1} &amp; c</em>{2}&amp; c<em>{3}\end{vmatrix}+\begin{vmatrix}a</em>{1} &amp; a<em>{4} &amp; a</em>{3}\ b<em>{1} &amp; b</em>{4} &amp; b<em>{3}\c</em>{1} &amp; c<em>{4} &amp; c</em>{3}\end{vmatrix}$</p></li><li><p>某行或某列的k倍加至某行或某列，行列式不变.</p><p>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{n1} &amp; a</em>{n2} &amp; … &amp; a<em>{nn}\end{vmatrix}=\begin{vmatrix}a</em>{11} &amp; a<em>{12} &amp; … &amp; a</em>{1n}\ a<em>{21}+ka</em>{11} &amp; a<em>{22}+ka</em>{12} &amp; … &amp; a<em>{2n}+ka</em>{1n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{n1} &amp; a</em>{n2} &amp; … &amp; a_{nn}\end{vmatrix}$</p></li></ol><blockquote><p>特别地,某两行或两列相同或某行或某列元素全为0，则行列式为0；某两行或某两列成比例则行列式为0</p></blockquote><ol><li><p>若 $A$ 是 $n$ 阶矩阵，则 $|kA|=k^n|A|$ ，$|A^*|=|A|^{n-1}$</p></li><li><p>若 $A,B$ 都是 $n$ 阶矩阵，则 $|AB|=|A||B|$</p></li><li><p>若 $A$ 是 $n$ 阶可逆矩阵，则 $|A^{-1}|=|A|^{-1}$</p></li><li><p>若 $n$ 阶矩阵 $A$ 和 $B$ 相似，则 $|A|=|B|$</p></li></ol><p><strong>余子式和代数余子式</strong></p><p>余子式：在 $n$ 阶行列式中，划去元素 $a<em>{ij}$ 所在的第 $i$ 行与第 $j$ 列的所有元素剩下的元素(不改变原来的顺序)所构成的 $n-1$ 阶行列式称为 $a</em>{ij}$ 的余子式,记为 $M_{ij}$</p><p>代数余子式： $a<em>{ij}$ 的代数余子式 $A</em>{ij}=(-1)^{i+j}M_{ij}$</p><p>行列式<br>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; a<em>{13}\ a</em>{21} &amp; a<em>{22} &amp; a</em>{23}\a<em>{31} &amp; a</em>{32} &amp; a<em>{33}\end{vmatrix}，a</em>{22}的余子式M<em>{22} = \begin{vmatrix}a</em>{11} &amp;  a<em>{13}\ a</em>{31} &amp;  a<em>{33}\end{vmatrix}，a</em>{22}的代数余子式A<em>{22}=(-1)^{(2+2)}\begin{vmatrix}a</em>{11} &amp;  a<em>{13}\ a</em>{31} &amp;  a_{33}\end{vmatrix}$</p><p>行列式等于它任意一行(列)的各元素与其对应的代数式余子式乘积之和</p><p>$|A| = a<em>{i1}A</em>{i1}+a<em>{i2}A</em>{i2}+…+a<em>{in}A</em>{in}(按i行展开)\|A| = a<em>{1j}A</em>{1j}+a<em>{2j}A</em>{2j}+…+a<em>{nj}A</em>{nj}(按j行展开)$</p><p><strong>行列式的计算</strong></p><ol><li><p>三角化</p><p>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ 0 &amp; a</em>{22} &amp; … &amp; a<em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\0 &amp; 0 &amp; … &amp; a</em>{nn}\end{vmatrix}=\begin{vmatrix}a<em>{11} &amp; 0 &amp; … &amp; 0\ a</em>{21} &amp; a<em>{22} &amp; … &amp; 0\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a</em>{n1} &amp; a<em>{n2} &amp; … &amp; a</em>{nn}\end{vmatrix}=a<em>{11}a</em>{22}…a_{nn}$</p><p>$\begin{vmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ a</em>{21} &amp; … &amp; a<em>{2n-1} &amp; 0\\vdots &amp; &amp;\vdots &amp;\a</em>{n1} &amp; 0 &amp; … &amp; 0\end{vmatrix}=\begin{vmatrix}0 &amp; … &amp; 0 &amp; a<em>{1n}\ 0 &amp; … &amp; a</em>{2n-1} &amp; a<em>{2n}\\vdots &amp;  &amp;\vdots &amp;\vdots\a</em>{n1} &amp; a<em>{n2} &amp; … &amp; a</em>{nn}\end{vmatrix}=(-1)^{\frac{n(n-1)}{2}}a<em>{1n}a</em>{2n-1}…a_{n1}$</p></li><li><p>公式法(代数余子式) 、递推法 、利用行列式性质、利用矩阵性质</p></li><li><p>利用特征值. $|A| = \prod \lambda_{i}$</p></li><li><p>拉普拉斯展开式<br>$\begin{vmatrix}\mathbf{A} &amp; \mathbf{<em>} \ \mathbf{O} &amp; \mathbf{B}\end{vmatrix}=\begin{vmatrix}\mathbf{A} &amp; \mathbf{O} \ \mathbf{</em>} &amp; \mathbf{B}\end{vmatrix}=|\mathbf{A}||\mathbf{B}|，\begin{vmatrix}\mathbf{O} &amp; \mathbf{A} \ \mathbf{B} &amp; \mathbf{<em>}\end{vmatrix}=\begin{vmatrix}\mathbf{</em>} &amp; \mathbf{A} \ \mathbf{B} &amp; \mathbf{O}\end{vmatrix}=(-1)^{nm}|\mathbf{A}||\mathbf{B}|$</p></li></ol><blockquote><p>   $m、n$ 分别是矩阵 $\mathbf{A}、\mathbf{B}$ 的阶数</p></blockquote><ol><li><p>范德蒙德行列式</p><p>$\begin{vmatrix}1 &amp; 1 &amp; … &amp; 1 \ x_1 &amp;x_2 &amp;… &amp;x_n \ x_1^2 &amp;x_2^2 &amp;… &amp;x_n^2 \ \vdots &amp;\vdots&amp;&amp;\vdots \ x_1^{n-1} &amp;x_2^{n-1} &amp;… &amp;x_n^{n-1} \ \end{vmatrix}=\prod{1\leqslant j\leqslant i\leqslant n}(x_i-x_j)$</p><p>$=(x<em>n-x</em>{n-1})…(x<em>n-x_1)\cdot (x</em>{n-1}-x<em>{n-2})…(x</em>{n-1}-x_1)…(x_3-x_2)(x_3-x_1)(x_2-x_1)$</p></li></ol><p><strong>证明|A| = 0</strong></p><p>Ax = 0 有非零解 、反证法、r(A) &lt; n、0是A的特征值、|A| = -|A|</p><p><strong>行列式的应用</strong></p><ol><li><p>向量组的相关性</p><p>设 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 是 $n$ 个 $n$ 维向量， $A=\alpha_1,\alpha_2,\cdots,\alpha_n$,则 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 线性无关的充分必要条件是 $|A|\neq0$</p></li><li><p>矩阵的满秩与可逆</p><p>$A$ 满秩的充分必要条件是 $|A|\neq0$</p><p>$A$ 可逆的充分必要条件是 $|A|\neq0$</p></li><li><p>方程组的解</p><p>$AX=0$ 只有零解的充分必要条件是 $|A|\neq0$</p><p>$AX=b$ 有唯一解的充分必要条件是 $|A|\neq0$</p></li></ol><p><strong>$n$ 阶行列式的计算</strong></p><p>升阶法、递推法、化为上下三角形法、拆项</p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p><strong>概念： $m$ x $n$ 个数排成的 $m$ 行 $n$ 列的集合</strong></p><p>$\begin{bmatrix}a<em>{11} &amp; a</em>{12} &amp; … &amp; a<em>{1n}\ a</em>{21} &amp; a<em>{22} &amp; … &amp; a</em>{2n}\\vdots &amp;\vdots &amp; &amp;\vdots &amp;\a<em>{m1} &amp; a</em>{m2} &amp; … &amp; a_{mn}\end{bmatrix}$ 称为 $m$ x $n$ 矩阵，当 $m=n$ ,矩阵称为$n$ 阶矩阵或 $n$ 阶方阵</p><blockquote><p>行列式是方阵，仅方阵才有行列式</p></blockquote><p><strong>矩阵运算</strong></p><ol><li><p>$A+B=[a<em>{ij}+b</em>{ij}]$ 对应元素相加</p></li><li><p>$kA=[ka_{ij}]$ 所有元素都乘以 $k$</p></li><li><p>$m$ x $n$ 矩阵 $A$ ， $n$ x $s$ 矩阵 $B$ ， $AB=C(m,s),c<em>{ij}=\sum</em>{k=1}^{n}a<em>{ik}b</em>{kj}$</p><p>$\begin{bmatrix}&amp;  &amp; \ (i)\cdots&amp;\cdots&amp;\cdots  \  &amp;  &amp; \end{bmatrix}\begin{bmatrix}&amp; (j)  &amp; \ &amp; \vdots  &amp; \ &amp; \vdots  &amp;  \ &amp; \vdots  &amp;\end{bmatrix}=\begin{bmatrix}&amp; &amp; \ &amp; c_{ij} &amp;  \ &amp; &amp;\end{bmatrix}$</p></li></ol><p>例: $\begin{bmatrix}2 &amp; 1 &amp; 1 \ 1 &amp; 2 &amp; 1\end{bmatrix}\begin{bmatrix}1 &amp; 0 \ 0 &amp; 2 \3 &amp; 1 \end{bmatrix}=\begin{bmatrix}2\cdot1+1\cdot0+1\cdot3 &amp; 2\cdot0+1\cdot2+1\cdot1\ 1\cdot1+2\cdot0+1\cdot3 &amp; 1\cdot0+2\cdot2+1\cdot1\end{bmatrix}=\begin{bmatrix}5 &amp; 3\ 4 &amp; 5\end{bmatrix}$</p><blockquote><p>乘法条件:A的列数=B的行数</p></blockquote><p>矩阵乘法法则:</p><p>$A(BC)=(AB)C;\A(B+C)=AB+AC,(A+B)C=AC+BC;\ (kA)(lB)=klAB;\ AE=A,EA=A \ (A+E)^2=A^2+2A+E$</p><p>$(A+B)^2=(A+B)(A+B)=A^2+AB+BA+B^2\neq  A^2+2AB+B^2$</p><blockquote><p>注意: $AB\neq BA$</p></blockquote><p><strong>矩阵转置</strong></p><p>矩阵 $A$ 的行换成同序数的列得到的新矩阵为矩阵 $A$ 的转置矩阵，记为 $A^T$</p><p>$A=\begin{bmatrix}1&amp; 2 &amp; 3 \ 4&amp; 5&amp; 6\end{bmatrix},A^T=\begin{bmatrix}1 &amp; 4 \ 2 &amp; 5 \3 &amp; 6 \end{bmatrix}$ (横取竖放)</p><p><strong>伴随矩阵</strong></p><p>$A$ 是$n$ 阶矩阵，行列式 $|A|$ 的每个元素 $a<em>{ij}$ 的代数余子式 $A</em>{ij}$ 所构成的矩阵为 $A$ 的伴随矩阵,记为 $A^*$</p><p>$A=\begin{bmatrix}a<em>{11}&amp; a</em>{12}  \ a<em>{21}&amp; a</em>{22} \end{bmatrix}，A^*=\begin{bmatrix}A<em>{11}&amp; A</em>{21}  \ A<em>{12}&amp; A</em>{22} \end{bmatrix}$ (横取竖放)</p><blockquote><p>二阶矩阵的伴随矩阵:主对角线元素互换,副对角线元素变号</p></blockquote><p><strong>逆矩阵</strong></p><p>$A$ 是 $n$ 阶矩阵，若存在 $n$ 阶矩阵 $B$ 使得 $AB=BA=E$ ,则称A是可逆矩阵或非奇异矩阵， $B$ 是 $A$ 的逆矩阵,记为 $A^{-1}=B$ , 且 $A$ 的逆矩阵唯一</p><p>$A$ 可逆 $\Leftrightarrow |A|\neq 0$</p><p>​           $\Leftrightarrow r(A)=n$ </p><p>​           $\Leftrightarrow$ A的列(行)向量组线性无关</p><p>​           $\Leftrightarrow A=P_1P_2\cdots P_s,P_i$ 是初等矩阵</p><p>​           $\Leftrightarrow A$ 与单位矩阵等价</p><p>​           $\Leftrightarrow 0$ 不是A的特征值</p><p>矩阵 $A$ 与矩阵 $B$ 等价的充分必要条件是存在可逆矩阵 $P$ 与 $Q$ ，使得 $PAQ=B$</p><ul><li><p>$A^{-1}=P_t\cdots P_2P_1$ </p><p>$P_t\cdots P_2P_1A=E$</p><p>$P_t\cdots P_2P_1E=A^{-1} \rightarrow (A|E)\rightarrow \cdots\rightarrow(E|A^{-1})$</p></li><li><p>$P_t\cdots P_2P_1A=B$</p><p>$P_t\cdots P_2P_1E=P$ ($P=P_t\cdots P_2P_1$)</p><p>$(A|E)\rightarrow \cdots\rightarrow(B|P)$</p></li></ul><p><strong>正交矩阵</strong></p><p>$n$ 阶矩阵 $A$ ，若满足 $AA^T=A^TA=E$ ，则 $A$ 为正交矩阵</p><p><strong>行阶梯矩阵、行最简矩阵</strong></p><p><strong>矩阵的初等变换</strong></p><p>$E_{i,j}A$ ：对调 $A$ 的 $i,j $行 </p><p>$AE_{i,j}$ ：对调 $A$ 的 $i,j$ 列</p><p><strong>公式</strong></p><p>转置</p><p>   $(A^T)^T=A ;(A+B)^T=A^T+B^T \ (kA)^T=kA^T \ (AB)^T=B^TA^T$</p><p>可逆</p><p>   $(A^{-1})^{-1}=A;(kA)^{-1}=\frac{1}{k}A^{-1}  (k\neq 0) \ (AB)^{-1}=B^{-1}A^{-1};(A^n)^{-1}=(A^{-1})^n$</p><p>   $(A^{-1})^T=(A^T)^{-1};|A^{-1}|=\frac{1}{|A|}\A^{-1}=\frac{1}{|A|}A^*$</p><p>伴随</p><p>   $AA^<em>=A^</em>A=|A|E$</p><p>   $A^<em>=|A|A^{-1};|A^</em>|=|A|^{n-1}$</p><p>   $(A^<em>)^{-1}=(A^{-1})^</em> =\frac{1}{|A|}A\(A^<em>)^T=(A^T)^</em>;(kA)^<em> = k^{n-1}A^</em> ;(A^<em>)^</em>=|A|^{n-2}A$</p><p>   $(AB)^<em> = B^</em>A^*$</p><p>秩</p><p>   $r(A)=r(A^T)=r(A^TA)\r(kA)=r(A),k\neq  0 \r(A+B)\leqslant r(A)+r(B)\r(AB)\leqslant min(r(A),r(B))$</p><p>   若 $A$ 可逆，则 $r(AB)=r(B),r(BA)=r(B)$</p><p>   若 $A$ 为 $m$ x $n$ 矩阵， $B$ 为 $n$ x $s$ 矩阵， $AB=O$ , 则  $r(A)+r(B)\leqslant n$</p><p>   $r\binom{A}{B}=r(A)+r(B)$</p><p>   $r\begin{pmatrix}A &amp; O\ O &amp; B\end{pmatrix}=r(A)+r(B)$</p><p>   设 $A$ 为 $n$ 阶矩阵，则 $r(A)=1$ 的充分必要条件是存在非零 $n$ 维向量 $\alpha,\beta$ ,使得 $A=\alpha\beta^{T}$</p><p>   $\alpha^T\beta=tr(A)$ (主对角线元素相加)</p><p>   $A=\alpha\beta^{T}$ ，则 $A^n=k^{n-1}A$ ,其中 $k=\alpha^T\beta=\beta^{T}\alpha$</p><p>   (满秩=矩阵列向量的个数)</p><ol><li><p>分块矩阵</p><p>$\begin{bmatrix}A_1 &amp; A_2\ A_3 &amp; A_4\end{bmatrix}+\begin{bmatrix}B_1 &amp; B_2\ B_3 &amp; B_4\end{bmatrix}=\begin{bmatrix}A_1+B_1  &amp; A_2+B_2 \ A_3+B_3  &amp; A_4+B_4 \end{bmatrix}$</p><p>$\begin{bmatrix}A &amp; B\ C &amp; D\end{bmatrix}\begin{bmatrix}X &amp; Y\ Z &amp; W\end{bmatrix}=\begin{bmatrix}AX+BZ  &amp; AY+BW \ CX+DZ  &amp; CY+DW\end{bmatrix}$</p><p>$\begin{bmatrix}A &amp; B\ C &amp; D\end{bmatrix}^T=\begin{bmatrix}A^T &amp; C^T\ B^T &amp; D^T\end{bmatrix}$</p><p>若 $B,C$ 分别是 $m$ 阶与 $s$ 阶矩阵，则 $\begin{bmatrix}B &amp; O\ O &amp; C\end{bmatrix}^n =\begin{bmatrix}B^n &amp; O\ O &amp; C^n\end{bmatrix}$</p><p>若 $B,C$ 分别是 $m$ 阶与 $s$ 阶可逆矩阵，则 $\begin{bmatrix}B &amp; O\ O &amp; C\end{bmatrix}^{-1}=\begin{bmatrix}B^{-1} &amp; O\ O &amp; C^{-1}\end{bmatrix}，\begin{bmatrix}O &amp; B\ C &amp; O\end{bmatrix}^{-1}=\begin{bmatrix}O &amp; C^{-1}\ B^{-1} &amp; O\end{bmatrix}$</p></li><li><p>对角矩阵</p><p>$\begin{bmatrix}a_1 &amp;  &amp; \ &amp;  a_2&amp; \ &amp;  &amp; a_3\end{bmatrix}\begin{bmatrix}b_1 &amp;  &amp; \ &amp;  b_2&amp; \ &amp;  &amp; b_3\end{bmatrix}=\begin{bmatrix}a_1b_1 &amp;  &amp; \ &amp;  a_2b_2&amp; \ &amp;  &amp; a_3b_3\end{bmatrix}$</p><p>$\begin{bmatrix}a_1 &amp;  &amp; \ &amp;  a_2&amp; \ &amp;  &amp; a_3\end{bmatrix}^n=\begin{bmatrix}a_1^n &amp;  &amp; \ &amp;  a_2^n&amp; \ &amp;  &amp; a_3^n\end{bmatrix}$</p><p>$\begin{bmatrix}a_1 &amp;  &amp; \ &amp;  a_2&amp; \ &amp;  &amp; a_3\end{bmatrix}^{-1}=\begin{bmatrix}\frac{1}{a_1} &amp;  &amp; \ &amp;  \frac{1}{a_2} &amp; \ &amp;  &amp; \frac{1}{a_3} \end{bmatrix}$</p></li></ol><h1 id="n-维向量"><a href="#n-维向量" class="headerlink" title="$n$ 维向量"></a>$n$ 维向量</h1><p><strong>定义1</strong></p><p>设 $n$ 维列向量 $\alpha =[a_1,a_2,\cdots,a_n]^T,\beta =[b_1.b_2,\cdots,b_n]^T$ ,则</p><p>$\alpha+\beta=[a_1+b_1,a_2+b_2,\cdots,a_n+b_n];\ k\alpha=[ka_1,ka_2,\cdots,ka_n]$</p><p>$(\alpha,\beta)=\alpha^T\beta=a_1b_1+a_2b_2+\cdots+a_nb_n$</p><p>$\begin{Vmatrix}\alpha\end{Vmatrix}=\sqrt{\alpha^T\alpha}=\sqrt{a_1^2+a_2^2+\cdots+a_n^2}$</p><p><strong>定义2</strong></p><p>设 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 是 $n$ 维向量， $k_1,k_2,\cdots,k_s$ 是一组实数，称 $k_1\alpha_1+k_2\alpha_2+\cdots+k_s\alpha_s$ 是 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 的线性组合，若 $k_1\alpha_1+k_2\alpha_2+\cdots+k_s\alpha_s=\beta$ ,则称 $\beta$ 是 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 的线性组合</p><p><strong>定义3</strong></p><p>设 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 是 $n$ 维向量，如果存在不全为零的数使得 $k_1\alpha_1+k_2\alpha_2+\cdots+k_s\alpha_s=0$ ，则称向量组 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 线性相关，当且仅当 $k_1=k_2=\cdots=k_s=0$ 时，称向量组 $\alpha_1,\alpha_2,\cdots,\alpha_s$ 线性无关</p><p><strong>定理1</strong></p><p>$k_1\alpha_1+k_2\alpha_2+\cdots+k_s\alpha_s=\beta$</p><p>$\Leftrightarrow$ 非齐次线性方程组 $[\alpha_1,\alpha_2,\cdots,\alpha_s]\begin{bmatrix}x_1\ x_2\ \vdots \ x_s\end{bmatrix}=\beta$ 有解</p><p>$\Leftrightarrow$ 秩 $r[\alpha_1,\alpha_2,\cdots,\alpha_s]=r[\alpha_1,\alpha_2,\cdots,\alpha_s,\beta]$</p><p><strong>定理2</strong></p><p>$\alpha_1,\alpha_2,\cdots,\alpha_s$ 线性相关</p><p>$\Leftrightarrow$ 齐次线性方程组 $[\alpha_1,\alpha_2,\cdots,\alpha_s]\begin{bmatrix}x_1\ x_2\ \vdots \ x_s\end{bmatrix}=0$ 有非零解</p><p>$\Leftrightarrow$ 秩  $r(\alpha_1,\alpha_2,\cdots,\alpha_s)$ &lt; $s$ </p><p><strong>推论</strong></p><p>1.$n$ 个 $n$ 维向量 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 线性相关的充分必要条件是行列式 $|\alpha_1,\alpha_2,\cdots,\alpha_n|=0$</p><p>2.向量组 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 线性相关的充分必要条件是 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 中至少有一个向量可由其余向量线性表示</p><p>3.含零向量的向量组一定线性相关</p><p>4.若一个向量组线性无关，则该向量组的任何部分向量组都线性无关</p><p>5.若向量组有部分向量组线性相关，则该向量组一定线性相关</p><p>6.$n$ 个 $n$ 维向量 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 线性无关的充分必要条件是行列式 $|\alpha_1,\alpha_2,\cdots,\alpha_n|\neq 0$</p><p>7.两个向量线性相关的充分必要条件是两个向量成比例</p><p>8.若 $A$ 的任意两行两列成比例，则 $A=\alpha\beta^T$</p><h1 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h1><p><strong>定理</strong></p><p>齐次线性方程组 $AX=0$ (零解和非零解)</p><ul><li>只有零解的充分必要条件是 $r(A)=n$ (A为普通矩阵), $|A|\neq0$(A为方阵)</li><li>有非零解的充分必要条件是 $r(A) &lt; n$ (A为普通矩阵), $|A|= 0$(A为方阵)</li></ul><p>非齐次线性线性方程组 $AX=b$ (无解和有解)，增广矩阵 $\overline{A}=(A\vdots b)$</p><ul><li><p>有解的充分必要条件是 $r(A)=r(\overline{A})$</p><p>若 $r(A)=r(\overline{A})=n$ 方程组有唯一解, $|A|\neq0$ (A为方阵时 )</p><p>若 $r(A)=r(\overline{A}) &lt; n$ 方程组有无数个解， $|A|= 0$ (A为方阵时)</p></li><li><p>无解的充分必要条件是 $r(A)\neq r(\overline{A})$</p></li></ul><p><strong>线性方程组解的结构</strong></p><ol><li>设 $X_1,X_2,\cdots,X_s$ 为齐次线性方程组 $AX=0$ 的一组解，则 $k_1X_1+k_2X_2+\cdots+k_sX_s$ 也为 $AX = 0$ 的解</li><li>设 $\eta_0$ 为非齐次线性方程组 $AX=b$ 的一个解，  $X_1,X_2,\cdots,X_s$ 为齐次线性方程组 $AX=0$ 的一组解，则 $k_1X_1+k_2X_2+\cdots+k_sX_s+\eta_0$ 为 $AX=b$ 的一个解</li><li>设 $\eta_1，\eta_2$ 为非齐次线性方程组 $AX=b$ 的两个解，则              $\eta_2-\eta_1$ 为 $AX = 0$ 的一个解</li><li>设 $X_1,X_2,\cdots,X_s$ 为非齐次线性方程组$AX=b$ 的一组解，则 $k_1X_1+k_2X_2+\cdots+k_sX_s$ 也为 $AX = b$ 的解的充分必要条件是      $k_1+k_2+\cdots+k_s=1$</li><li>设 $X_1,X_2,\cdots,X_s$ 为非齐次线性方程组 $AX=b$ 的一组解，则 $k_1X_1+k_2X_2+\cdots+k_sX_s$ 为 $AX = 0$ 的解的充分必要条件是       $k_1+k_2+\cdots+k_s=0$</li></ol><p><strong>解方程组</strong></p><p>化为行阶梯型或行最简</p><p><strong>公共解</strong></p><p>$AX=b$ ， $BX=d$ 两个方程组的解的交集为其公共解</p><p>解法:</p><ul><li>$\begin{pmatrix}A\ B\end{pmatrix}X=\begin{pmatrix}b\ d\end{pmatrix}$ 该方程组的解即为公共解</li><li>先求出(1)的解再代入(2)，解即为公共解</li><li>分别求出(1)(2)的通解，令两个方程组的通解相等，从而求出公共解</li></ul><p><strong>同解</strong></p><p>$AX=O$ ， $BX=O$  , (1)的解也是(2)的解</p><p>(1)、(2)同解的必要条件是 $r(A)=r(B)$</p><h1 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h1><p><strong>定义</strong></p><p>1.设 $A$ 是 $n$ 阶矩阵，如果存在一个数 $\lambda$ 及非零 $n$ 维列向量 $\alpha$  , 使得 $A\alpha=\lambda\alpha$ 成立，则称 $\lambda$ 是 $A$ 的一个特征值， $\alpha$ 是矩阵 $A$ 属于特征值 $\lambda$ 的一个特征向量. <strong>$A$ 有 $n$ 个特征值(包括重数)</strong></p><p>$|\lambda E-A|=0$ 为 $A$ 的特征方程，通过此方程可求出 $A$ 特征值，</p><p>$(\lambda_iE-A)X=0$ 的基础解系为 $\lambda_i$ 对应的线性无关的特征向量</p><p>任何特征值都对应无数个特征向量，但其线性无关的特征向量不超过其重数</p><p>2.设 $A,B$ 都是 $n$ 阶矩阵，如果存在可逆矩阵 $P$ ,使得 $P^{-1}AP=B$ ，则称矩阵 $A,B$ 相似,记作 $A\sim B$</p><p>$P^{-1}A^nP=B^n,A^n=PB^nP^{-1}$</p><p>3.已知 $B=P^{-1}AP$ ， $A$ 的特征值为 $\lambda_1,\lambda_2,\dots,\lambda_n$ ，其对应的特征特征向量为 $\alpha_1,\alpha_2,\dots,\alpha_n$,</p><p>则 $BP^{-1}=P^{-1}A \rightarrow BP^{-1}\alpha_i=P^{-1}A\alpha_i \rightarrow BP^{-1}\alpha_i=\lambda_iP^{-1}\alpha_i$</p><p>即 $B$ 的特征向量为 $\beta_i=P^{-1}\alpha_i$</p><p><strong>矩阵相似的性质</strong></p><ol><li><p>$A\sim A$</p></li><li><p>若 $A\sim B$  , 则 $B\sim A$</p></li><li><p>若 $A\sim B$ ， 则 $A^T\sim B^T$ </p><p>且 $A，B$ 可逆，则 $A^{-1}\sim B^{-1}$ ， $A^<em>\sim B^</em>$</p></li><li><p>若 $A\sim B$ ， $B\sim C$ , 则 $A\sim C$</p></li><li><p>若 $A\sim B$ ， $r(A)=r(B)$ , $|\lambda E-A|=|\lambda E-B|$</p></li><li><p>若 $A\sim B$ ，则 $|A|=|B|,tr(A)=tr(B)$</p></li></ol><p><strong>特征值与特征向量的性质​</strong></p><p>设 $A$ 为 $n$ 阶矩阵， $\lambda_1,\lambda_2,\cdots,\lambda_n$ 为其特征值</p><ol><li>$\lambda_1+\lambda_2+\cdots+\lambda_n=tr(A)$</li><li>$\lambda_1\lambda_2\cdots\lambda_n=|A|$</li></ol><p>设 $A$ 为 $n$ 阶矩阵，且 $A\alpha=\lambda_0\alpha$  ,  $f(x)=a_nx^n+\cdots+a_1x+a_0$ ,令 $f(A)=a_nA^n+\cdots+a_1A+a_0E$ ,则</p><ol><li>若 $A$ 可逆，则 $A^{-1}\alpha=\frac{1}{\lambda_0}\alpha$ ,即 $\frac{1}{\lambda_0}$ 为 $A^{-1}$ 的特征值， $\alpha$ 为 $A^{-1}$ 的特征向量</li><li>若 $A$ 可逆，则 $A^<em>\alpha=\frac{|A|}{\lambda_0}\alpha$ ,即 $\frac{|A|}{\lambda_0}$ 为 $A^</em>$ 的特征值， $\alpha$ 为 $A^*$ 的特征向量</li><li>$f(A)\alpha=f(\lambda_0)\alpha$ ,即 $f(\lambda_0)$ 为 $f(A)$ 的特征值， $\alpha$ 为 $f(A)$ 的特征向量</li></ol><p>$A$ 可逆时， $A^{-1},A^*,A$ 的特征向量相同</p><p><strong>设 $A$ 为 $n$ 阶矩阵, $A$ 的不同特征值对应的特征向量线性无关</strong></p><p><strong>施密特正交化</strong></p><p>把一组<strong>线性无关</strong>的向量组化为一组<strong>两两正交</strong>且规范化的向量组的过程称为施密特正交化</p><p>设 $\alpha_1,\alpha_2,\cdots,\alpha_n$ 线性无关，</p><ol><li><p>正交化</p><p>令 $\beta_1=\alpha_1,\beta_2=\alpha_2-\frac{(\alpha_2,\beta_1)}{(\beta_1,\beta_1)}\beta_1,\cdots$</p><p>$\beta<em>n=\alpha_n-\frac{(\alpha_n,\beta_1)}{(\beta_1,\beta_1)}\beta_1-\frac{(\alpha_n,\beta_2)}{(\beta_2,\beta_2)}\beta_2-\cdots-\frac{(\alpha_n,\beta</em>{n-1})}{(\beta<em>{n-1},\beta</em>{n-1})}\beta_{n-1}$</p><p>则 $\beta_1,\beta_2,\cdots,\beta_n$ 两两正交</p></li><li><p>规范化</p><p>令 $\gamma_1=\frac{1}{|\beta_1|}\beta_1, \gamma_2=\frac{1}{|\beta_2|}\beta_2,\cdots,\gamma_n=\frac{1}{|\beta_n|}\beta_n$</p><p>则 $\gamma_1,\gamma_2,\cdots,\gamma_n$ 为两两正交且规范化的向量组</p></li></ol><p><strong>正交矩阵</strong></p><p>设 $Q$ 为 $n$ 阶矩阵，若 $Q^TQ=E$ 或 $QQ^T=E$  ,称 $Q$ 为正交矩阵</p><p>设 $Q=(\gamma_1,\gamma_2,\cdots,\gamma_n)$ 为 $n$ 阶矩阵,则 $Q$ 为正交矩阵的充分必要条件是 $\gamma_1,\gamma_2,\cdots,\gamma_n$ 为两两正交且规范化的向量组</p><p>若 $Q$ 为正交矩阵，则 $Q^{-1}=Q^T$ , $|Q|=\pm1$ , 特征值为-1或1；且 $Y=QX$ ，则 $|Y|=|X|$<br><strong>实对称矩阵 $A^T=A$</strong></p><ol><li>实对称矩阵的特征值都是实数</li><li><strong>实对称矩阵的不同特征值对应的特征向量正交</strong></li><li>实对称矩阵一定可以相似对角化，特别地若 $A^T=A$ ,则存在正交矩阵 $Q$ 使得 $Q^TAQ=\begin{bmatrix}\lambda_1 &amp; 0 &amp; \cdots &amp; 0\ 0 &amp; \lambda_2 &amp; \cdots &amp; 0\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\ 0 &amp; 0 &amp; 0 &amp; \lambda_n\end{bmatrix}$ ,$\lambda_1,\lambda_2,\cdots\lambda_n$ 为实对称矩阵$A$的特征值</li></ol><p><strong>矩阵可相似对角化</strong></p><ul><li>矩阵 $A$ 的特征值都是单值</li><li>矩阵 $A$ 为实对称矩阵</li><li>矩阵 $A$ 有 $n$ 个线性无关的特征向量</li><li>矩阵 $A$ 特征值的重数与其对应的线性无关的特征向量个数相等，即 $n-r(\lambda_i E-A)$ =重数, $\lambda_i$ 为重根特征值</li></ul><p>设 $A$ 为 $n$ 阶矩阵，则 $A$ 可相似对角化(与对角矩阵相似)的充分必要条件是 $A$ 有 $n$ 个线性无关的特征向量</p><ol><li><p>由 $|\lambda E-A|=0$ 求出 $A$ 的特征值 $\lambda_1,\lambda_2,\cdots,\lambda_n$</p></li><li><p>由 $(\lambda_i E-A)X=0$ 求出 $A$ 的特征向量 $\delta_1,\delta_2,\cdots,\delta_m$</p></li><li><p>若 $m&lt;n$ 时，矩阵 $A$ 不可对角化；若 $m=n$ 时，矩阵 $A$ 可相似对角化</p><p>由 $A\delta_i=\lambda_i\delta_i$ 得</p><p>$(A\delta_1,A\delta_2,\cdots,A\delta_n)=(\lambda_1\delta_1,\lambda_2\delta_2 ,\cdots,\lambda_n\delta_n )$ 即</p><p>$A(\delta_1,\delta_2,\cdots,\delta_n)=(\delta_1,\delta_2,\cdots,\delta_n)\begin{bmatrix}\lambda_1 &amp; 0 &amp; \cdots &amp; 0\ 0 &amp; \lambda_2 &amp; \cdots &amp; 0\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\ 0 &amp; 0 &amp; 0 &amp; \lambda_n\end{bmatrix}$</p><p>令 $P=(\delta_1,\delta_2,\cdots,\delta_n)$ ,则 $P$ 可逆，且 $P^{-1}AP=\begin{bmatrix}\lambda_1 &amp; 0 &amp; \cdots &amp; 0\ 0 &amp; \lambda_2 &amp; \cdots &amp; 0\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\ 0 &amp; 0 &amp; 0 &amp; \lambda_n\end{bmatrix}$</p></li></ol><p><strong>实对称矩阵的对角化</strong></p><ol><li>若求可逆矩阵 $P$ ，则按上述步骤即可</li><li>若求正交矩阵 $Q$ ,将 $\delta_1,\delta_2,\cdots,\delta_n$ 施密特正交化和规范化，令 $Q=(\delta_1,\delta_2,\cdots,\delta_n)$ ,则 $Q^TAQ=\begin{bmatrix}\lambda_1 &amp; 0 &amp; \cdots &amp; 0\ 0 &amp; \lambda_2 &amp; \cdots &amp; 0\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\ 0 &amp; 0 &amp; 0 &amp; \lambda_n\end{bmatrix}$</li></ol><p><strong>矩阵相似的判断</strong></p><p>$A,B$ 相似的必要条件是 $|\lambda E-A|=|\lambda E-B|$ ,即 $A,B$ 具有相同的特征值</p><p>若 $A,B$ 特征值相同，判断 $A,B$ 相似一般分如下情形：</p><ol><li>若 $A,B$ 都可相似对角化，则 $A \sim B$</li><li>若 $A,B$ 一个可相似对角化，一个不可相似对角化，则 $A,B$ 一定不相似</li><li>若 $A,B$ 都不可相似对角化，一般不讨论</li></ol><h1 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h1><p><strong>定义1</strong></p><p>含有 $n$ 个变量 $x_1,x_2,\cdots,x_n$ 的二次齐次函数</p><p>$f(x<em>1,x_2,\cdots,x_n)=a</em>{11}x<em>1^2+a</em>{22}x<em>2^2+\cdots+a</em>{nn}x<em>n^2+2a</em>{12}x<em>1x_2+2a</em>{13}x<em>1x_3+\cdots+2a</em>{1n}x<em>1x_n+2a</em>{23}x<em>2x_3+\cdots+2a</em>{2n}x<em>2x_n+\cdots+2a</em>{n-1,n}x_{n-1}x_n$ </p><p>称为 $n$ 元二次型.若规定 $a<em>{ij}=a</em>{ji}$ ，则二次型有矩阵表示 $f(x_1,x_2,\cdots,x_n)=x^TAx$,</p><p>其中 $x=[x<em>1,x_2,\cdots,x_n]^T,A=[a</em>{ij}]$ 且 $A^T=A$ ,称 $A$ 为二次型的矩阵</p><p>例如： $f(x_1,x_2)=x_1^2+5x_2^2+6x_1x_2$ ，有</p><p>​             $f(x_1,x_2)=x_1^2+3x_1x_2+3x_1x_2+5x_2^2$</p><p>​                              $=x_1(x_1+3_x2)+x_2(3x_1+5x_2)$</p><p>​                              $=[x_1,x_2] \begin{bmatrix}x_1 &amp; 3x_2\ 3x_1 &amp; 5x_2 \end{bmatrix}$</p><p>​                             $=[x_1,x_2] \begin{bmatrix}1 &amp; 3\ 3 &amp; 5 \end{bmatrix} \begin{bmatrix}x_1\ x_2\end{bmatrix}=x^TAx$ </p><p>若对任何 $x\neq0$ ,恒有 $x^TAx&gt;0$ ，则称二次型为正定二次型</p><ul><li><p>若二次型中只含有变量的平方项，即 $x^TAx=d_1x_1^2+d_2x_2^2+\cdots+d_nx_n^2$ 称为二次型的标准形</p></li><li><p>若标准形中，平方项的系数 $d<em>j$ 为1，-1或0，即 $x^TAx=x_1^2+x_2^2+\cdots+x_p^2-x</em>{p+1}x^2+\cdots-x_{p+q}^2$ 称为二次型的规范形</p></li><li>标准形中，正平方项的个数 $p$ 称为二次型的正惯性指数，负平方项的个数 $q$ 称为二次型的负惯性指数，系数不为0的个数为二次型的秩</li></ul><p><strong>定义2</strong></p><p>若<br> $\begin{matrix}x<em>1=c</em>{11}y<em>1+c</em>{12}y<em>2+c</em>{13}y<em>3\ x_2=c</em>{21}y<em>1+c</em>{22}y<em>2+c</em>{23}y<em>3\ x_3=c</em>{31}y<em>1+c</em>{32}y<em>2+c</em>{33}y_3\end{matrix}$</p><p>满足 $|C|=\begin{bmatrix}c<em>{11} &amp; c</em>{12} &amp; c<em>{13}\c</em>{21} &amp; c<em>{22} &amp; c</em>{23}\ c<em>{31} &amp; c</em>{32} &amp; c<em>{33}\end{bmatrix} \neq0$<br>称 $x=[x_1,x_2,x_3]^T$ 到 $y=[y_1,y_2,y_3]$ 的坐标变换，即<br>$\begin{bmatrix}x_1\ x_2\ x_3\end{bmatrix}=\begin{bmatrix}c</em>{11} &amp; c<em>{12} &amp; c</em>{13}\ c<em>{21} &amp; c</em>{22} &amp; c<em>{23}\ c</em>{31} &amp; c<em>{32} &amp; c</em>{33}\end{bmatrix}\begin{bmatrix}y_1\ y_2\ y_3\end{bmatrix} 或x=Cy$</p><p>两个 $n$ 阶矩阵 $A$ 和 $B$ ，如果存在可逆矩阵 $C$ 使得 $C^TAC=B$ 则称矩阵 $A$ 和 $B$ 合同，并称 $A$ 到 $B$ 的变换为合同变换， $C$ 为合同变换矩阵</p><p><strong>定理1</strong></p><p>变量 $x=[x_1,x_2,\dots,x_n]^T$ 的 $n$ 元二次型 $x^TAx$ 经坐标变换 $x=Cy$ 后，化为变量 $y=[y_1,y_2,\cdots,y_n]$ 的 $n$ 元二次型  $y^TBy$.</p><p>$x^TAx=(Cy)^TA(Cy)=y^TC^TACy=y^TBy$, 其中 $B=C^TAC$ </p><p><strong>定理2</strong></p><p>任意的 $n$ 元二次型 $x^TAx$ 都可以通过坐标变换化成标准形</p><p>对任一个 $n$ 元二次型 $x^TAx$ ，其中 $A$ 是 $n$ 阶实对称矩阵，必存在正交变换 $x=Qy$  ( $Q$ 是正交矩阵)，使得 $x^TAx$ 化为标准形 $\lambda_1y_1^2+\lambda_2y_2^2+\cdots+\lambda_ny_n^2$</p><p><strong>定理3</strong></p><p>任一 $n$ 阶是对称矩阵 $A$ ，总可以合同于一个对角矩阵，即 $C^TAC=\begin{bmatrix}d_1 &amp; 0 &amp; \cdots &amp; 0\ 0 &amp; d_2 &amp; \cdots &amp; 0\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\ 0 &amp; 0 &amp; 0 &amp; d_n\end{bmatrix}$</p><p><strong>定理4</strong>​</p><p>$n$ 元二次型 $x^TAx$ 正定的充分必要条件:</p><ol><li>$A$ 的正惯性指数是 $n$</li><li>$A$ 与 $E$ 合同，且存在可逆矩阵 $C$ ，使得 $C^TAC=E$</li><li>$A$ 的所有特征值均为正数</li><li>$A$ 的各阶顺序主子式均大于零</li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译C/C++为dll供Java调用</title>
    <link href="/2019/03/10/eclipse%E7%BC%96%E8%AF%91C-C++%E4%B8%BAdll%E4%BE%9BJava%E8%B0%83%E7%94%A8/"/>
    <url>/2019/03/10/eclipse%E7%BC%96%E8%AF%91C-C++%E4%B8%BAdll%E4%BE%9BJava%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><ul><li>下载 Eclipse IDE for C/C++<br>地址:<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/packages/</a><br><img src="/images/2019/3/10/1.jpg" srcset="/images/loading.gif" alt=""></li><li>安装mingw64<br>地址:<a href="http://www.mingw-w64.org/doku.php/download" target="_blank" rel="noopener">http://www.mingw-w64.org/doku.php/download</a><br><img src="/images/2019/3/10/2.jpg" srcset="/images/loading.gif" alt=""><br>1）配置mingw64环境变量<br>C_INCLUDE_PATH : mingw64安装目录\include<br>LIBRARY_PATH :mingw64安装目录\lib<br><img src="/images/2019/3/10/3.jpg" srcset="/images/loading.gif" alt=""><br>2）系统变量的path变量中添加 mingw64安装目录\bin<br>注意:以防万一,本文也将include和lib目录也加入了path变量中<br><img src="/images/2019/3/10/4.jpg" srcset="/images/loading.gif" alt=""><br>3）测试 cmd里执行如下命令<pre><code class="hljs bash">gcc -v</code></pre>输出版本信息则安装成功<br><img src="/images/2019/3/10/5.jpg" srcset="/images/loading.gif" alt=""></li></ul><h1 id="编译C-C-为dll"><a href="#编译C-C-为dll" class="headerlink" title="编译C/C++为dll"></a>编译C/C++为dll</h1><p><strong>eclipse环境下</strong></p><ul><li>eclipse新建项目<br><img src="/images/2019/3/10/6.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/7.jpg" srcset="/images/loading.gif" alt=""></li><li>新建源代码文件<br><img src="/images/2019/3/10/8.jpg" srcset="/images/loading.gif" alt=""></li><li>编写方法<br><img src="/images/2019/3/10/9.jpg" srcset="/images/loading.gif" alt=""></li><li>右键项目 properties 配置<br>1）Tool Chain Editor的配置<br><img src="/images/2019/3/10/10.jpg" srcset="/images/loading.gif" alt=""><br>2）settings的配置<br><img src="/images/2019/3/10/11.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/12.jpg" srcset="/images/loading.gif" alt=""><pre><code class="hljs bash">-Wl,--add-stdcall-alias -static-libgcc -static-libstdc++ -shared</code></pre><img src="/images/2019/3/10/13.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/14.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/15.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/16.jpg" srcset="/images/loading.gif" alt=""></li><li>右键项目 build project 执行编译<br><img src="/images/2019/3/10/17.jpg" srcset="/images/loading.gif" alt=""><br>编译成功<br><img src="/images/2019/3/10/18.jpg" srcset="/images/loading.gif" alt=""><br>在eclipse的工作目录 test项目下的debug目录可以找到编译好的dll文件<br><img src="/images/2019/3/10/19.jpg" srcset="/images/loading.gif" alt=""></li></ul><p><strong>visual studio 2015环境下</strong></p><ul><li>新建win32项目<br><img src="/images/2019/3/10/22.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/23.jpg" srcset="/images/loading.gif" alt=""></li><li>新建头文件<pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DLL_IMP</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DLL_API __declspec(dllexport) <span class="hljs-comment">//导出函数</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// DLL_API</span></span><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> &#123;<span class="hljs-function">DLL_API <span class="hljs-keyword">char</span>*   <span class="hljs-title">say</span><span class="hljs-params">()</span></span>;&#125;</code></pre><img src="/images/2019/3/10/24.jpg" srcset="/images/loading.gif" alt=""></li><li>新建源文件<pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DLL_IMP</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"say.h"</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">char</span>*  <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello"</span>);<span class="hljs-keyword">return</span> <span class="hljs-string">"ok"</span>;&#125;</code></pre><img src="/images/2019/3/10/25.jpg" srcset="/images/loading.gif" alt=""></li><li>设置属性 编译为dll<br><img src="/images/2019/3/10/26.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/2019/3/10/27.jpg" srcset="/images/loading.gif" alt=""><h1 id="Java调用dll"><a href="#Java调用dll" class="headerlink" title="Java调用dll"></a>Java调用dll</h1></li><li>下载JNA jna.jar 地址:<a href="https://mvnrepository.com/artifact/com.sun.jna/jna/3.0.9" target="_blank" rel="noopener">https://mvnrepository.com/artifact/com.sun.jna/jna/3.0.9</a></li><li>新建Java项目 引入jna.jar 并将dll拷贝到项目根路径下(否则需要填写dll的绝对路径)<br><img src="/images/2019/3/10/20.jpg" srcset="/images/loading.gif" alt=""></li><li>编写调用接口类</li></ul><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jna.Library;<span class="hljs-keyword">import</span> com.sun.jna.Native;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Clibrary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Library</span></span>&#123;<span class="hljs-comment">//使用eclipse环境下生成的dll</span>Clibrary instance = (Clibrary) Native.loadLibrary(<span class="hljs-string">"libtest"</span>, Clibrary<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//dll中的方法 声明需一致</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//使用vs 2015生成的dll</span><span class="hljs-comment">//Clibrary instance = (Clibrary) Native.loadLibrary("yolo-dll", Clibrary.class);</span><span class="hljs-comment">//String say();</span>&#125;</code></pre><ul><li>编写Main类 调用方法执行</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Clibrary.instance.sayHello();&#125;&#125;</code></pre><p>执行结果 如图<br><img src="/images/2019/3/10/21.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JNA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建GitHub博客</title>
    <link href="/2019/03/10/hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/03/10/hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>前提环境:Node.js、Git已安装</p><h1 id="通过github创建repository-格式-博客名称-github-io"><a href="#通过github创建repository-格式-博客名称-github-io" class="headerlink" title="通过github创建repository 格式:博客名称.github.io"></a>通过github创建repository 格式:博客名称.github.io</h1><p><img src="/images/github/1.jpg" srcset="/images/loading.gif" alt=""></p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><ul><li>新建blog文件夹,并打开git bash<br><img src="/images/github/2.jpg" srcset="/images/loading.gif" alt=""></li><li><p>执行命令</p><pre><code class="hljs bash">npm install hexo -g <span class="hljs-comment">#安装hexo命令</span>hexo -v <span class="hljs-comment">#检查是否安装成功</span></code></pre><p><img src="/images/github/3.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>初始化hexo</p><pre><code class="hljs bash">hexo init <span class="hljs-comment">#初始化blog文件夹</span>npm install <span class="hljs-comment">#安装必要组件</span><span class="hljs-comment">#执行如下命令 开启本地体验</span>hexo ghexo s  <span class="hljs-comment">#访问http://localhost:4000 即可看到默认博客页面</span></code></pre></li></ul><h1 id="关联hexo-github"><a href="#关联hexo-github" class="headerlink" title="关联hexo - github"></a>关联hexo - github</h1><ul><li>设置git的username和email<pre><code class="hljs bash">git config --global user.name <span class="hljs-string">'jiaopan'</span> <span class="hljs-comment">#设置用户名</span>git config --global user.email <span class="hljs-string">'807854982@qq.com'</span> <span class="hljs-comment">#设置邮箱</span></code></pre></li><li>生成公钥<pre><code class="hljs bash">ssh-keygen -t rsa -C “807854982@qq.com”<span class="hljs-comment">#连续按三次回车键</span></code></pre>红框处为密钥保存的路径<br><img src="/images/github/4.jpg" srcset="/images/loading.gif" alt=""><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh <span class="hljs-comment">#cd到密钥目录</span><span class="hljs-comment">#添加密钥到ssh-agent</span><span class="hljs-built_in">eval</span> <span class="hljs-string">"<span class="hljs-variable">$(ssh-agent -s)</span>"</span>ssh-add ~/.ssh/id_rsa</code></pre></li><li>配置github SSH<br>登录github,在settings里添加SSH<br><img src="/images/github/5.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/github/6.jpg" srcset="/images/loading.gif" alt=""><br>将生成的id_rsa.pub内容复制到SSH key里 点击add SSH 即可<br><img src="/images/github/7.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/github/8.jpg" srcset="/images/loading.gif" alt=""><br>测试是否可连 出现用户名则成功<pre><code class="hljs bash">ssh -T git@github.com</code></pre><img src="/images/github/9.jpg" srcset="/images/loading.gif" alt=""></li><li>配置_config.yml<br><img src="/images/github/10.jpg" srcset="/images/loading.gif" alt=""><br>更改如下配置:<pre><code class="hljs bash">url:  https://jiaopaner.github.io <span class="hljs-comment">#  repository </span>deploy:  <span class="hljs-built_in">type</span>: git  repo: git@github.com:JiaoPaner/jiaopaner.github.io.git  branch: master</code></pre></li></ul><h1 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h1><ul><li>安装扩展<pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></li><li>创建文章<pre><code class="hljs bash">hexo new post <span class="hljs-string">'文章名'</span> <span class="hljs-comment">#在blog/source/post</span></code></pre>在blog目录下的 source/_posts将会生成对应的MD文件.打开MD文件进行文章编辑即可<br><img src="/images/github/11.jpg" srcset="/images/loading.gif" alt=""></li><li>发布文章<pre><code class="hljs bash">hexo d -g</code></pre>成功后,访问博客地址 <a href="https://jiaopaner.github.io">https://jiaopaner.github.io</a> 即可看到</li></ul><h1 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h1><ul><li>通过<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> 主题目录下载主题 </li><li>主题内有下载地址和安装方法,一般为github地址,下载其压缩包或git clone到本地</li><li>复制到blog目录下的themes内(本博客为next主题)<br><img src="/images/github/12.jpg" srcset="/images/loading.gif" alt=""></li><li><p>修改_config.yml  theme值为themes下主题目录名<br><img src="/images/github/13.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>更新即可</p><pre><code class="hljs bash">hexo d -g</code></pre></li></ul><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下mysql的安装</title>
    <link href="/2019/03/06/linux%E4%B8%8Bmysql%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2019/03/06/linux%E4%B8%8Bmysql%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下mysql安装步骤"><a href="#linux下mysql安装步骤" class="headerlink" title="linux下mysql安装步骤"></a>linux下mysql安装步骤</h1><p>1.ubuntu系统<br>1) 输入如下命令<br><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install mysql-server</code></pre></p><blockquote><p>安装好软件包后,会弹出设置root账户密码的提示</p></blockquote><p>2) 测试是否安装成功(mysql 的socket处于 listen 状态则表示安装成功)<br><pre><code class="hljs bash">sudo netstat -tap | grep mysql</code></pre><br><img src="/images/note/6.jpg" srcset="/images/loading.gif" alt=""></p><p>3) 登陆mysql<br><pre><code class="hljs bash">sudo mysql -uroot -p <span class="hljs-comment">#执行命令后再输入密码</span></code></pre><br><img src="/images/note/7.jpg" srcset="/images/loading.gif" alt=""></p><blockquote><p>登陆成功</p></blockquote><p><img src="/images/note/8.jpg" srcset="/images/loading.gif" alt=""></p><p>4) 设置mysql可远程连接</p><blockquote><p>修改配置文件</p></blockquote><pre><code class="hljs bash">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><blockquote><p>注释bind-address</p></blockquote><p><img src="/images/note/9.jpg" srcset="/images/loading.gif" alt=""></p><pre><code class="hljs bash">sudo mysql -uroot -p <span class="hljs-comment">#登陆mysql</span>mysql&gt; show databases <span class="hljs-comment">#查看已有的数据库</span>mysql&gt; use mysql; <span class="hljs-comment">#跳转到名为mysql的数据库</span>mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">'%'</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>;<span class="hljs-comment"># %:任意主机</span><span class="hljs-comment">#给予root账户在任意主机下可访问数据库的权限</span>mysql&gt; grant all privileges on *.* to <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> identified by <span class="hljs-string">'设置的密码'</span> with grant option;mysql&gt; flush privileges;mysql&gt;<span class="hljs-built_in">exit</span>;</code></pre><p><img src="/images/note/10.jpg" srcset="/images/loading.gif" alt=""></p><blockquote><p>重启mysql</p></blockquote><pre><code class="hljs bash">sudo service mysql</code></pre><p>2.Centos7(待更新)</p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下jdk安装</title>
    <link href="/2019/03/06/linux%E4%B8%8Bjdk%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2019/03/06/linux%E4%B8%8Bjdk%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下JDK安装步骤"><a href="#linux下JDK安装步骤" class="headerlink" title="linux下JDK安装步骤"></a>linux下JDK安装步骤</h1><p>1.检查是否已安装JDK<br><pre><code class="hljs bash">[root@localhost ~] java -version</code></pre><br><img src="/images/note/1.jpg" srcset="/images/loading.gif" alt=""></p><blockquote><p>若默认已安装openjdk，将其卸载</p></blockquote><pre><code class="hljs bash">[root@localhost ~] yum remove *openjdk*</code></pre><p><img src="/images/note/2.jpg" srcset="/images/loading.gif" alt=""></p><p>2.安装oracle JDK1.8<br><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cd /usr/local #跳转到local目录</span>[root@localhost <span class="hljs-built_in">local</span>]<span class="hljs-comment"># mkdir jdk8 #创建jdk8目录</span></code></pre></p><blockquote><p>复制下载好的linux版JDK1.8到 /usr/local/jdk8目录</p></blockquote><p><img src="/images/note/3.jpg" srcset="/images/loading.gif" alt=""></p><blockquote><p>解压</p></blockquote><pre><code class="hljs bash">[root@localhost <span class="hljs-built_in">local</span>]<span class="hljs-comment"># cd jdk8</span>[root@master jdk8]<span class="hljs-comment"># tar -zxvf jdk-8u151-linux-x64.tar.gz</span></code></pre><blockquote><p>配置jdk环境变量</p></blockquote><pre><code class="hljs bash">[root@master jdk8]<span class="hljs-comment"># vim /etc/profile</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/jdk8/jdk1.8.0_151<span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$JAVA_HOME</span>/jre<span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JRE_HOME</span>/lib<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin</code></pre><p><img src="/images/note/4.jpg" srcset="/images/loading.gif" alt=""></p><blockquote><p>环境变量生效</p></blockquote><pre><code class="hljs bash">[root@master jdk8]<span class="hljs-comment"># source /etc/profile</span></code></pre><blockquote><p>检查是否安装成功</p></blockquote><pre><code class="hljs bash">[root@master jdk8]<span class="hljs-comment"># java -version</span></code></pre><p><img src="/images/note/5.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(11) ReverseWordsInAStringIII</title>
    <link href="/2018/07/26/leetcode(11)%20ReverseWordsInAStringIII/"/>
    <url>/2018/07/26/leetcode(11)%20ReverseWordsInAStringIII/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理(2) 灰度变换与空间滤波</title>
    <link href="/2018/07/20/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(2)%20%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2/"/>
    <url>/2018/07/20/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(2)%20%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<p>空间域,即包含图像像素的平面,空间域技术直接在图像像素上操作,空间域处理可由下式表示:<br>g(x,y) = T[f(x,y)]<br>其中f(x,y)为输入图像,g(x,y)为处理后的图像,T是在点(x,y)的邻域上定义的关于f的一种算子</p><h3 id="灰度变换"><a href="#灰度变换" class="headerlink" title="灰度变换"></a>灰度变换</h3><p>s = T(r)<br>s和r分别表示g和f在任意点(x,y)处的灰度</p><h4 id="灰度变换函数"><a href="#灰度变换函数" class="headerlink" title="灰度变换函数"></a>灰度变换函数</h4><ul><li>图像反转  (图像灰度级范围[0,L-1])<br>s = L - 1 -r<br>该式反转一幅图像的灰度级,可得到等效的照片底片,适用于增强嵌入在图像暗区域中的白色或灰色细节<br><img src="/images/cv/34.jpg" srcset="/images/loading.gif" alt=""></li><li>对数变换<br>s = clog(1+r) (c为常数)<br>该式将范围较窄的低灰度值映射为范围较宽的灰度值，适用于增强图像中的暗像素值<br><img src="/images/cv/35.jpg" srcset="/images/loading.gif" alt=""></li><li>幂律(伽马)变换<br>s = cr^γ (c和γ为正常数)<br>γ &lt; 1 提高灰度级，在正比函数上方，使图像变亮<br>γ &gt; 1 降低灰度级，在正比函数下方，使图像变暗<br><img src="/images/cv/36.png" srcset="/images/loading.gif" alt=""><br>γ = 0.6,0.4,0.3 | c = 1<br><img src="/images/cv/37.jpg" srcset="/images/loading.gif" alt=""><br>γ = 3,4,5 | c = 1<br><img src="/images/cv/38.jpg" srcset="/images/loading.gif" alt=""></li></ul><h4 id="分段线性变换函数"><a href="#分段线性变换函数" class="headerlink" title="分段线性变换函数"></a>分段线性变换函数</h4><ul><li><p>对比度拉伸 扩展低对比度图像灰度级动态范围<br>点(s1,r1)和点(s2,r2)的位置控制变换函数的形状<br>若r1=s1,r2=s2,则变换为线性函数,将产生无变化的灰度级<br>若r1=r2,s1=0,s2=L-1,则变换为阈值处理函数,将产生一幅二值图像<br>(s1,r1)和点(s2,r2)的中间值产生不同程度的灰度级扩展<br><img src="/images/cv/39.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>灰度级分层 突出图像中指定灰度范围的亮度<br>将感兴趣范围内的所有灰度值显示为一个值(如白色),而其他值显示为另一个值(如黑色)<br><img src="/images/cv/40.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/41.jpg" srcset="/images/loading.gif" alt=""></p></li><li><p>比特平面分层<br>像素由比特组成的数字,在256级灰度图像中,每个像素由8比特组成,通过突出特定比特来增强图像<br><img src="/images/cv/42.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/43.jpg" srcset="/images/loading.gif" alt=""><br>存储4个高阶比特平面允许以接受的细节重建图像<br><img src="/images/cv/44.jpg" srcset="/images/loading.gif" alt=""></p></li></ul><h3 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h3><p>灰度级范围为[0，L-1]数字图像直方图是离散函数h(r_k) = n_k，其中r_k是第k个灰度级(灰度值),n_k是图像中灰度级为r_k的像素个数,归一化的直方图为p(r_k) = n_k / (MN)<br><img src="/images/cv/45.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/46.jpg" srcset="/images/loading.gif" alt=""><br>暗图像的直方图的分量集中在灰度级的低端,亮图像的直方图分量则倾向于灰度级的高端<br>高对比度图像直方图分量覆盖很宽的灰度级范围,且像素分布均匀,反之,低对比度图像直方图的分量覆盖较窄的灰度级范围,且像素分布不均匀<br>结论:若一幅图像倾向于占据整个可能的灰度级且分布均匀,则图像具有高对比度且灰色调具有较大变化</p><h4 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h4><p>作用:使得图像的像素占有全部可能的灰度级且分布均匀,能够具有高对比度<br>方法:灰度级变换  s = T(r)<br>T(r)满足下列两个条件：<br>（1）T(r)在区间0 ≤ r ≤ L-1中为单值且单调递增<br>（2）当 0 ≤ r ≤ L-1时,0 ≤ T(r)  ≤  L-1<br>条件(1)保证原图各灰度级在变换后仍保持从黑到白(或从白到黑)的排列次序<br>条件(2)保证变换前后灰度值动态范围的一致性<br><img src="/images/cv/51.jpg" srcset="/images/loading.gif" alt=""><br>图像的灰度级可看成是区间[0,L-1]内的随机变量,随机变量的基本描绘是其概率密度函数<br>令p_r(r)为r的概率密度函数,p_s(s)是s的概率密度函数,p_r(r)和T(r)已知,在感兴趣的值域上T(r)是连续可微的,则<br><img src="/images/cv/50.jpg" srcset="/images/loading.gif" alt=""><br>有如下变换函数T(r)<br><img src="/images/cv/47.jpg" srcset="/images/loading.gif" alt=""><br>莱布尼茨准则可得<br><img src="/images/cv/48.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/49.jpg" srcset="/images/loading.gif" alt=""><br>p_s(s)为均匀概率密度函数，即证明经上述灰度变换函数T(r),得到随机变量s由均匀概率密度函数表征<br><img src="/images/cv/52.jpg" srcset="/images/loading.gif" alt=""><br>对于离散值,处理其概率(直方图值)与求和代替处理概率密度函数与积分<br>一幅数字图像中灰度级r_k出现的概率近视为<br><img src="/images/cv/53.jpg" srcset="/images/loading.gif" alt=""><br>变换函数为<br><img src="/images/cv/54.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>例子</strong><br><img src="/images/cv/55.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/56.jpg" srcset="/images/loading.gif" alt=""><br>均衡后的图像中有790个像素取s0=1值,同理有1023个像素取s1=3值,….<br><img src="/images/cv/57.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="直方图规定化"><a href="#直方图规定化" class="headerlink" title="直方图规定化"></a>直方图规定化</h4><p>直方图规定化是指经过处理后的图像具有规定的直方图形状<br>令p_r(r)为输入图像估计,p_z(z)为图像所具有的指定概率密度函数<br>有如下变换函数T(r)<br><img src="/images/cv/47.jpg" srcset="/images/loading.gif" alt=""><br>定义有如下特性的随机变量z<br><img src="/images/cv/58.jpg" srcset="/images/loading.gif" alt=""><br>由G(z) = T(r)，z必须满足如下条件<br><img src="/images/cv/59.jpg" srcset="/images/loading.gif" alt=""><br>由一幅给定图像得到一幅其灰度级具有指定概率密度函数图像的步骤:<br>1.有输入图像得到p_r(r)，并由T(r)求得s值<br>2.由指定的PDF求得G(z)<br>3.求得G(z)的反函数z = G^{-1}(s)<br>4.利用T(r)对输入图像进行均衡得到输出图像,对均衡后的图像中具有s值的每个像素<br>   执行反函数z = G^{-1}(s)<br>对于离散值:<br><img src="/images/cv/54.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/60.jpg" srcset="/images/loading.gif" alt=""><br>对一个q值:<br><img src="/images/cv/61.jpg" srcset="/images/loading.gif" alt=""><br>反函数为:<br><img src="/images/cv/62.jpg" srcset="/images/loading.gif" alt=""></p><p><strong>例子</strong><br><img src="/images/cv/55.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/63.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/64.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/65.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/66.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/67.jpg" srcset="/images/loading.gif" alt=""></p><h3 id="空间滤波"><a href="#空间滤波" class="headerlink" title="空间滤波"></a>空间滤波</h3><p>空间滤波器由一个邻域(较小的矩形)和对该邻域包围的图像像素执行预定义操作组成,滤波产生一个新像素,新像素的坐标等于邻域中心的坐标,像素值是滤波操作的结果.滤波器在图像上执行的是线性操作则称为线性空间滤波器,否则称为非线性空间滤波器.<br>例如,如下3 x 3领域的线性空间滤波器的处理机理，在图像中任意一点(x,y),滤波器的响应g(x,y)是滤波器系数与该滤波器包围的图像像素的乘积之和:<br><img src="/images/cv/68.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/69.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="空间相关与卷积"><a href="#空间相关与卷积" class="headerlink" title="空间相关与卷积"></a>空间相关与卷积</h4><p>相关是滤波器模板移过图像并计算每个位置乘积之和的处理,卷积的机理类似,但其滤波器首先要旋转180°<br>如下,显示了一个一维图像函数和一个一维滤波器,执行操作时,存在未覆盖的的部分函数,若滤波器的尺寸为m，则在需要在f的一侧补m-1个0<br><img src="/images/cv/70.jpg" srcset="/images/loading.gif" alt=""><br>二维图像函数和二维滤波器<br><img src="/images/cv/71.jpg" srcset="/images/loading.gif" alt=""><br><strong>总结</strong><br>大小为m x n的滤波器和一幅图像f(x,y)做相关操作,可表示为:<br>a = (m-1)/2,b = (n-1)/2 ，为表示方便,假设m和n是奇整数<br><img src="/images/cv/72.jpg" srcset="/images/loading.gif" alt=""><br>类似地，卷积表示为:<br><img src="/images/cv/73.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(10) Binary Gap</title>
    <link href="/2018/07/18/leetcode(10)%20Binary%20Gap/"/>
    <url>/2018/07/18/leetcode(10)%20Binary%20Gap/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #868<br>Given a positive integer N, find and return the longest distance between two consecutive 1’s in the binary representation of N.<br>If there aren’t two consecutive 1’s, return 0.</p><p>Example 1:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">22</span>Output: <span class="hljs-number">2</span></code></pre><br>Explanation:<br>22 in binary is 0b10110.<br>In the binary representation of 22, there are three ones, and two consecutive pairs of 1’s.<br>The first consecutive pair of 1’s have distance 2.<br>The second consecutive pair of 1’s have distance 1.<br>The answer is the largest of these two distances, which is 2.</p><p>Example 2:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">5</span>Output: <span class="hljs-number">2</span></code></pre><br>Explanation:<br>5 in binary is 0b101.</p><p>Example 3:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">6</span>Output: <span class="hljs-number">1</span></code></pre><br>Explanation:<br>6 in binary is 0b110.</p><p>Example 4:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">8</span>Output: <span class="hljs-number">0</span></code></pre><br>Explanation:<br>8 in binary is 0b1000.<br>There aren’t any consecutive pairs of 1’s in the binary representation of 8, so we return 0.<br>Note:1 &lt;= N &lt;= 10^9</p><p><strong>解法一:</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binaryGap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<span class="hljs-keyword">int</span> distance = <span class="hljs-number">0</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; index;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; N != <span class="hljs-number">0</span>;i++) &#123;<span class="hljs-keyword">if</span> (N % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)index.push_back(i);N = N &gt;&gt; <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; index.size()<span class="hljs-number">-1</span>;i++)&#123;<span class="hljs-keyword">int</span> max = index[i + <span class="hljs-number">1</span>] - index[i];<span class="hljs-keyword">if</span> (max &gt; distance)distance = max;&#125;<span class="hljs-keyword">return</span> distance;&#125;</code></pre><br><strong>解法二:</strong><br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binaryGap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<span class="hljs-keyword">int</span> last = <span class="hljs-number">-1</span>,distance = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; N != <span class="hljs-number">0</span>; i++) &#123;<span class="hljs-keyword">if</span> (N % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">if</span> (last &gt; <span class="hljs-number">0</span>)distance = (i - last) &gt; distance ? (i - last) : distance;last = i;&#125;N = N &gt;&gt; <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> distance;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(9) Array Partition I</title>
    <link href="/2018/07/18/leetcode(9)%20Array%20Partition%20I/"/>
    <url>/2018/07/18/leetcode(9)%20Array%20Partition%20I/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #561<br>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p><p>Example 1:<br>Input: [1,4,3,2]</p><p>Output: 4<br>Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).<br>Note:<br>n is a positive integer, which is in the range of [1, 10000].<br>All the integers in the array will be in the range of [-10000, 10000].</p><p><strong>解法:</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; <span class="hljs-built_in">array</span>, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arrayPairSum</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;quicksort(nums, <span class="hljs-number">0</span>, nums.size() - <span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i += <span class="hljs-number">2</span>) &#123;result += nums[i];&#125;<span class="hljs-keyword">return</span> result;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; <span class="hljs-built_in">array</span>, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<span class="hljs-keyword">int</span> i, j, t, temp;<span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-keyword">return</span>;temp = <span class="hljs-built_in">array</span>[left];i = left;j = right;<span class="hljs-keyword">while</span> (i != j)&#123;<span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[j] &gt;= temp &amp;&amp; i &lt; j)j--;<span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[i] &lt;= temp &amp;&amp; i &lt; j)i++;<span class="hljs-keyword">if</span> (i&lt;j) &#123;t = <span class="hljs-built_in">array</span>[i];<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">array</span>[j];<span class="hljs-built_in">array</span>[j] = t;&#125;&#125;<span class="hljs-built_in">array</span>[left] = <span class="hljs-built_in">array</span>[i];<span class="hljs-built_in">array</span>[i] = temp;quicksort(<span class="hljs-built_in">array</span>, left, i - <span class="hljs-number">1</span>);quicksort(<span class="hljs-built_in">array</span>, i + <span class="hljs-number">1</span>, right);&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(8) SelfDividingNumbers</title>
    <link href="/2018/07/16/leetcode(8)%20SelfDividingNumbers/"/>
    <url>/2018/07/16/leetcode(8)%20SelfDividingNumbers/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #728<br>A self-dividing number is a number that is divisible by every digit it contains.<br>For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.<br>Also, a self-dividing number is not allowed to contain the digit zero.<br>Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.</p><p>Example :<br><pre><code class="hljs cpp">Input: left = <span class="hljs-number">1</span>, right = <span class="hljs-number">22</span>Output: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">22</span>]</code></pre><br>Note:<br>The boundaries of each input argument are 1 &lt;= left &lt;= right &lt;= 10000</p><p><strong>解法一：</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; selfDividingNumbers(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;<span class="hljs-keyword">while</span> (left &lt;= right)&#123;<span class="hljs-keyword">int</span> x = left;<span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span> &amp;&amp; flag)&#123;<span class="hljs-keyword">int</span> pos = x % <span class="hljs-number">10</span>;<span class="hljs-keyword">if</span> (pos == <span class="hljs-number">0</span>)&#123;flag = <span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (left % pos != <span class="hljs-number">0</span>) &#123;flag = <span class="hljs-literal">false</span>;&#125;x = x / <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">if</span> (flag)result.push_back(left);left++;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><br><strong>解法二:</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; selfDividingNumbers(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;<span class="hljs-keyword">while</span> (left &lt;= right) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">stringstream</span> buf;buf &lt;&lt; left;buf &gt;&gt; str;<span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : str)&#123;<span class="hljs-keyword">if</span> (c == <span class="hljs-string">'0'</span> || left % (c - <span class="hljs-string">'0'</span>) &gt; <span class="hljs-number">0</span>)&#123;flag = <span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (flag)&#123;result.push_back(left);&#125;left++;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理(1) 图像基础</title>
    <link href="/2018/07/13/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(1)%20%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2018/07/13/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(1)%20%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="图像采样和量化"><a href="#图像采样和量化" class="headerlink" title="图像采样和量化"></a>图像采样和量化</h3><p><img src="/images/cv/6.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="图像采样"><a href="#图像采样" class="headerlink" title="图像采样"></a>图像采样</h4><p>数字化坐标值称为采样,对二维空间中连续的图像在水平和垂直方向上等间距地分割成矩形网状结构，所形成的微小方格称为像素点,小方格中的值由灰度值(方格区域亮度的平均值)表示,采样的实质就是用多少个像素点来描述一幅图像.<br>采样时，若横向的像素数(列数)为M,纵向的像素数(行数)为N,则图像总像素数为M*N个像素；</p><p>采样间隔越大，即行列数少,则图像像素数越少，空间分辨率低，质量差，严重时出现马赛克效应；<br>采样间隔越小，即行列数大,则图像像素数越多，空间分辨率高，图像质量好，数据量大；<br>如下图,上述采样点分别为a:1024x1024 , b:512x512 , c:256x256 , d:128x128 , e:64x64, f:32x32<br><img src="/images/cv/1.png" srcset="/images/loading.gif" alt=""></p><p>采样过程:<br><img src="/images/cv/2.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/4.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="图像量化"><a href="#图像量化" class="headerlink" title="图像量化"></a>图像量化</h4><p>采样后所得各像素的灰度模拟量到离散量的转换为图像灰度量化<br>像素灰度级/灰度值/灰度:表示像素明暗程度的整数<br>灰度级数:数字图像中不同灰度值的个数(G）<br>若连续的灰度值用<script type="math/tex">z</script>表示,则满足于z<em>{i} &lt; z &lt; z</em>{i+1} 的z值都量化为整数值z<em>{i}，z</em>{i}称为像素灰度值<br>量化后的的灰度值用比特位数(g:存储图像灰度值所需的比特位数)表示,即$G=2^{g}$,如黑-灰-白的连续变化灰度值,用8位比特量化则为0~255个灰度值,代表相应的浓淡程度<br><img src="/images/cv/5.jpg" srcset="/images/loading.gif" alt=""><br>图像的数据量 = M x N x G bit</p><p>数字图像根据灰度级数的差异可分为黑白图像、灰度图像、彩色图像</p><ul><li>黑白图像<br>图像的每个灰度值/像素只能是黑或白,无中间值的过渡,故称二值图,灰度级数为2,灰度值为0或1<br><img src="/images/cv/7.jpg" srcset="/images/loading.gif" alt=""></li><li>灰度图像<br>图像的灰度级数大于2,但不包含彩色信息<br><img src="/images/cv/8.jpg" srcset="/images/loading.gif" alt=""></li><li>彩色图像<br>每个灰度值由R、G、B分量构成,其中R、G、B由不同的灰度值来描述<br><img src="/images/cv/9.jpg" srcset="/images/loading.gif" alt=""></li></ul><p>量化等级越高,图像层次越丰富图像质量越好,反之图像质量差,如下图,量化等级依次递减所得的图像<br><img src="/images/cv/11.jpg" srcset="/images/loading.gif" alt=""></p><hr><h3 id="数字图像表示"><a href="#数字图像表示" class="headerlink" title="数字图像表示"></a>数字图像表示</h3><p>一幅M×N的图像可以表示为矩阵,矩阵中的每个元素为图像的灰度值(像素值)<br><img src="/images/cv/10.jpg" srcset="/images/loading.gif" alt=""></p><h3 id="空间和灰度分辨率"><a href="#空间和灰度分辨率" class="headerlink" title="空间和灰度分辨率"></a>空间和灰度分辨率</h3><p>空间分辨率是图像中可辨别最小细节的度量,其中每单位距离线对数和每单位距离点数(像素数)是最通用的度量 —— 采样程度<br>灰度分辨率是指在灰度级中可分辨的最小变化 —— 量化程度</p><h3 id="图像内插"><a href="#图像内插" class="headerlink" title="图像内插"></a>图像内插</h3><p>图像内插是在诸如放大、收缩、旋转和几何校正等任务中广泛应用的工具<br>从根本上看,内插是用已知数据来估计未知位置数值的处理<br>源图像大小为M * N,目标图像为A * B,则两幅图像的边长比分别为:M/A和N/B,目标图像(i,j)像素可通过边长比对应回源图像,其对应坐标为(i * M / A,j * N / B)，显然,对应的坐标一般不是整数，而非整数的坐标无法在图像上使用.</p><h4 id="最近邻内插法"><a href="#最近邻内插法" class="headerlink" title="最近邻内插法"></a>最近邻内插法</h4><p>假设一幅500x500的图像放大1.5倍到750x750，创建一个750x750的网格,其与原图有相同的间隔,然后将其收缩,使它准确地与原图匹配,显然收缩后的750x750网格的像素间隔小于原图的像素间隔,为了覆盖的每一个点赋以灰度值,因此在原图中寻找最接近的像素,并把该像素的灰度值赋给750x750网格中的新像素,完成像素的赋值后,再将图像扩展到规定的大小.<br>蓝色为原图网格,红色为放大后的网格<br><img src="/images/cv/12.jpg" srcset="/images/loading.gif" alt=""><br>取最近的像素灰度值赋值给新像素<br><img src="/images/cv/13.jpg" srcset="/images/loading.gif" alt=""></p><p>C++代码实现<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;opencv2\opencv.hpp&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;Mat src = imread(<span class="hljs-string">"D:/learn/jiaopan/source/images/opencv3/blob.jpg"</span>);<span class="hljs-comment">//原图</span>imshow(<span class="hljs-string">"src"</span>, src);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; src.rows;<span class="hljs-comment">//创建网格矩阵</span>Mat dst = Mat::zeros(Size(<span class="hljs-number">750</span>, <span class="hljs-number">750</span>), CV_8UC3);<span class="hljs-comment">//放大比例</span><span class="hljs-keyword">double</span> fRows = <span class="hljs-number">750</span> / (<span class="hljs-keyword">float</span>)src.rows;<span class="hljs-keyword">double</span> fCols = <span class="hljs-number">750</span> / (<span class="hljs-keyword">float</span>)src.cols;<span class="hljs-keyword">int</span> primaryX = <span class="hljs-number">0</span>, primaryY = <span class="hljs-number">0</span>;<span class="hljs-comment">//最近邻内插法</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != dst.rows; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j != dst.cols; j++)&#123;primaryX = cvRound(i / (<span class="hljs-keyword">double</span>)fRows);primaryY = cvRound(j / (<span class="hljs-keyword">double</span>)fCols);<span class="hljs-keyword">if</span> (primaryX &lt; src.rows &amp;&amp; primaryX &gt;= <span class="hljs-number">0</span> &amp;&amp; primaryY &gt;= <span class="hljs-number">0</span> &amp;&amp; primaryY &lt; src.cols)&#123;dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">0</span>] = src.at&lt;cv::Vec3b&gt;(primaryX, primaryY)[<span class="hljs-number">0</span>];dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">1</span>] = src.at&lt;cv::Vec3b&gt;(primaryX, primaryY)[<span class="hljs-number">1</span>];dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">2</span>] = src.at&lt;cv::Vec3b&gt;(primaryX, primaryY)[<span class="hljs-number">2</span>];&#125;&#125;&#125;imshow(<span class="hljs-string">"dst"</span>, dst);waitKey(<span class="hljs-number">0</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><br><img src="/images/cv/14.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h4><p>双线性插值通过寻找距离对应坐标最近的四个像素点计算该点灰度值或者RGB值,如对应坐标是(2.5,4.5)，则最近的四个像素为 (2,4) , (2,5) , (3,4) , (3,5).<br>如图，已知Q11  (x1, y1), Q12  (x1, y2), Q21 (x2, y1),  Q22  (x2, y2)，插值的点为P点<br><img src="/images/cv/15.png" srcset="/images/loading.gif" alt=""><br>X方向<br><img src="/images/cv/16.svg" srcset="/images/loading.gif" alt=""><br>Y方向<br><img src="/images/cv/18.svg" srcset="/images/loading.gif" alt=""><br>先在 x 方向插值，再在 y 方向插值，其结果与按照上述顺序双线性插值的结果一致<br>若四个已知点坐标分别为 (0, 0)、(0, 1)、(1, 0) 和 (1, 1)，插值公式可化简为<br><img src="/images/cv/19.svg" srcset="/images/loading.gif" alt=""><br>其矩阵运算公式为<br><img src="/images/cv/20.svg" srcset="/images/loading.gif" alt=""></p><p>双线性插值的结果不是线性的，它是两个线性函数的积，在单位正方形上，双线性插值可以记作<br><img src="/images/cv/22.svg" srcset="/images/loading.gif" alt=""><br><img src="/images/cv/23.jpg" srcset="/images/loading.gif" alt=""><br>一般情况:<br><img src="/images/cv/21.png" srcset="/images/loading.gif" alt=""></p><p>代码实现<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;opencv2\opencv.hpp&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;Mat src = imread(<span class="hljs-string">"D:/learn/jiaopan/source/images/opencv3/blob.jpg"</span>);<span class="hljs-comment">//原图</span>imshow(<span class="hljs-string">"src"</span>, src);<span class="hljs-comment">//创建网格矩阵</span>Mat dst = Mat::zeros(Size(<span class="hljs-number">750</span>, <span class="hljs-number">750</span>), CV_8UC3);<span class="hljs-comment">//放大比例</span><span class="hljs-keyword">double</span> fRows = <span class="hljs-number">750</span> / (<span class="hljs-keyword">float</span>)src.rows;<span class="hljs-keyword">double</span> fCols = <span class="hljs-number">750</span> / (<span class="hljs-keyword">float</span>)src.cols;<span class="hljs-keyword">int</span> primaryX = <span class="hljs-number">0</span>, primaryY = <span class="hljs-number">0</span>;<span class="hljs-comment">//双线性插值</span><span class="hljs-keyword">float</span> m = <span class="hljs-number">0</span>;<span class="hljs-keyword">float</span> n = <span class="hljs-number">0</span>;CvScalar a, b, c, d;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != dst.rows; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j != dst.rows; j++) &#123;m = cvRound(i / (<span class="hljs-keyword">double</span>)fRows);n = cvRound(j / (<span class="hljs-keyword">double</span>)fCols);<span class="hljs-keyword">double</span> ux = m - (<span class="hljs-keyword">int</span>)m;<span class="hljs-keyword">double</span> uy = n - (<span class="hljs-keyword">int</span>)n;<span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">0</span> &amp;&amp; m &lt;= src.rows - <span class="hljs-number">1</span> &amp;&amp; n &gt;= <span class="hljs-number">0</span> &amp;&amp; n &lt;= src.cols - <span class="hljs-number">1</span>) &#123;a = src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n);b = src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n + <span class="hljs-number">1</span>) - src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n);c = src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m + <span class="hljs-number">1</span>, (<span class="hljs-keyword">int</span>)n) - src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n);d = src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m + <span class="hljs-number">1</span>, (<span class="hljs-keyword">int</span>)n + <span class="hljs-number">1</span>) - src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m + <span class="hljs-number">1</span>, (<span class="hljs-keyword">int</span>)n) - src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n + <span class="hljs-number">1</span>) + src.at&lt;cv::Vec3b&gt;((<span class="hljs-keyword">int</span>)m, (<span class="hljs-keyword">int</span>)n);b.val[<span class="hljs-number">0</span>] = b.val[<span class="hljs-number">0</span>] * uy;b.val[<span class="hljs-number">1</span>] = b.val[<span class="hljs-number">1</span>] * uy;b.val[<span class="hljs-number">2</span>] = b.val[<span class="hljs-number">2</span>] * uy;c.val[<span class="hljs-number">0</span>] = c.val[<span class="hljs-number">0</span>] * ux;c.val[<span class="hljs-number">1</span>] = c.val[<span class="hljs-number">1</span>] * ux;c.val[<span class="hljs-number">2</span>] = c.val[<span class="hljs-number">2</span>] * ux;d.val[<span class="hljs-number">0</span>] = d.val[<span class="hljs-number">0</span>] * ux*uy;d.val[<span class="hljs-number">1</span>] = d.val[<span class="hljs-number">1</span>] * ux*uy;d.val[<span class="hljs-number">2</span>] = d.val[<span class="hljs-number">2</span>] * ux*uy;&#125;dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">int</span>)(a.val[<span class="hljs-number">0</span>] + b.val[<span class="hljs-number">0</span>] + c.val[<span class="hljs-number">0</span>] + d.val[<span class="hljs-number">0</span>]);dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">int</span>)(a.val[<span class="hljs-number">1</span>] + b.val[<span class="hljs-number">1</span>] + c.val[<span class="hljs-number">1</span>] + d.val[<span class="hljs-number">1</span>]);dst.at&lt;cv::Vec3b&gt;(i, j)[<span class="hljs-number">2</span>] = (<span class="hljs-keyword">int</span>)(a.val[<span class="hljs-number">2</span>] + b.val[<span class="hljs-number">2</span>] + c.val[<span class="hljs-number">2</span>] + d.val[<span class="hljs-number">2</span>]);&#125;&#125;imshow(<span class="hljs-string">"dst"</span>, dst);waitKey(<span class="hljs-number">0</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><br><img src="/images/cv/24.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="双三次内插"><a href="#双三次内插" class="headerlink" title="双三次内插"></a>双三次内插</h4><p>双三次内插包括16个最近邻点,在保持细节方面比双线性内插更好<br><img src="/images/cv/27.png" srcset="/images/loading.gif" alt=""><br><a href="https://en.wikipedia.org/wiki/Bicubic_interpolation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bicubic_interpolation</a></p><h3 id="像素间的基本关系"><a href="#像素间的基本关系" class="headerlink" title="像素间的基本关系"></a>像素间的基本关系</h3><h4 id="相邻像素"><a href="#相邻像素" class="headerlink" title="相邻像素"></a>相邻像素</h4><p>位于坐标(x,y)处的像素p有4个水平和垂直的相邻像素(4邻域 N4(p)),其坐标公式如下<br><pre><code class="hljs cpp">(x+<span class="hljs-number">1</span>,y),(x<span class="hljs-number">-1</span>,y),(x,y+<span class="hljs-number">1</span>),(x,y<span class="hljs-number">-1</span>)</code></pre><br>p的4个对角相邻像素(对角邻域)的坐标公式如下:<br><pre><code class="hljs cpp">(x+<span class="hljs-number">1</span>,y+<span class="hljs-number">1</span>),(x+<span class="hljs-number">1</span>,y<span class="hljs-number">-1</span>),(x<span class="hljs-number">-1</span>,y+<span class="hljs-number">1</span>),(x<span class="hljs-number">-1</span>,y<span class="hljs-number">-1</span>)</code></pre></p><h4 id="邻接性"><a href="#邻接性" class="headerlink" title="邻接性"></a>邻接性</h4><p>令V是用于定义邻接性的灰度值集合,在二值图像中,把具有1值的像素归为邻接像素,则V = {1}<br><img src="/images/cv/28.png" srcset="/images/loading.gif" alt=""><br>4邻接:若q在集合N4(p)中，则具有V中数值(1)的两个像素p和q是4邻接<br>8邻接:若q在集合N8(p)中，则具有V中数值(1)的两个像素p和q是8邻接(8邻域=4邻域+对角邻域）<br>m邻接:若q在N4(p)中，或者在ND(p)中，且集合N4(p) ∩ N4(q) 没有V中数值(1)的像素，则具有V中数值的两个像素p和q是m邻接的</p><h4 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h4><p>对于像素p、q和z，分别具有坐标(x,y)，(s,t)和(u,v)，若<br>(1) D(p,q) ≥ 0 (D(p,q)=0，当且仅当p =q)<br>(2) D(p,q) = D(q,p)<br>(3) D(p,z) ≤ D(p,q) + D(q,z)<br>则称D是距离函数或度量</p><h5 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h5><p><img src="/images/cv/29.jpg" srcset="/images/loading.gif" alt=""><br>距离点(x,y)的距离小于或等于某个值r的像素点是在圆心为(x,y)且半径为r的圆平面内</p><h5 id="城市距离"><a href="#城市距离" class="headerlink" title="城市距离"></a>城市距离</h5><p><img src="/images/cv/30.jpg" srcset="/images/loading.gif" alt=""><br>距离点(x,y)的距离小于或等于某个值r的像素点形成一个中心为(x,y)的菱形<br>如图,与点(x,y)的距离小于或等于2的像素<br><img src="/images/cv/31.jpg" srcset="/images/loading.gif" alt=""></p><h5 id="棋盘距离"><a href="#棋盘距离" class="headerlink" title="棋盘距离"></a>棋盘距离</h5><p><img src="/images/cv/32.jpg" srcset="/images/loading.gif" alt=""><br>距离点(x,y)的距离小于或等于某个值r的像素点形成一个中心为(x,y)的方形<br>如图,与点(x,y)的距离小于或等于2的像素<br><img src="/images/cv/33.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blob detect</title>
    <link href="/2018/07/12/blob%20detect/"/>
    <url>/2018/07/12/blob%20detect/</url>
    
    <content type="html"><![CDATA[<h3 id="斑点检测"><a href="#斑点检测" class="headerlink" title="斑点检测"></a>斑点检测</h3><p>斑点:与周围区域存在颜色差异或灰度差异的区域<br>斑点检测的主要思路是检测出图像中比周围像素灰度大或者比周围区域灰度值小的区域<br>　　1.基于求导的微分方法<br>　　2.基于局部极值的分水岭算法,基于此OPENCV中提供simpleBlobDetector特征检测器<br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;opencv2\opencv.hpp&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;Mat im = imread(<span class="hljs-string">"D:/learn/jiaopan/source/images/opencv3/blob.jpg"</span>,IMREAD_GRAYSCALE);imshow(<span class="hljs-string">"im"</span>, im);Ptr&lt;SimpleBlobDetector&gt; detector = SimpleBlobDetector::create();<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;KeyPoint&gt; keypoints;detector-&gt;detect(im, keypoints);Mat im_with_keypoints;drawKeypoints(im, keypoints, im_with_keypoints, Scalar(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), DrawMatchesFlags::DRAW_RICH_KEYPOINTS);imshow(<span class="hljs-string">"keypoints"</span>, im_with_keypoints);waitKey(<span class="hljs-number">0</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><br>原图<br><img src="/images/opencv3/blob.jpg" srcset="/images/loading.gif" alt=""><br>灰度图<br><img src="/images/opencv3/blob2.jpg" srcset="/images/loading.gif" alt=""><br>斑点检测图<br><img src="/images/opencv3/blob3.jpg" srcset="/images/loading.gif" alt=""></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>opencv3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv samples</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(7) PeakIndexInMountainArray</title>
    <link href="/2018/07/12/leetcode(7)%20PeakIndexInMountainArray/"/>
    <url>/2018/07/12/leetcode(7)%20PeakIndexInMountainArray/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #852<br>Let’s call an array A a mountain if the following properties hold:</p><ul><li>A.length &gt;= 3</li><li>There exists some 0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]<br>Given an array that is definitely a mountain, return any i such that A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1].</li></ul><pre><code class="hljs cpp">Example <span class="hljs-number">1</span>:Input: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]Output: <span class="hljs-number">1</span>Example <span class="hljs-number">2</span>:Input: [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]Output: <span class="hljs-number">1</span></code></pre><p>Note:<br>3 &lt;= A.length &lt;= 10000<br>0 &lt;= A[i] &lt;= 10^6<br>A is a mountain, as defined above.</p><p><strong>解法一:</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peakIndexInMountainArray</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A)</span> </span>&#123;<span class="hljs-keyword">int</span> start = (A.size() - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<span class="hljs-keyword">while</span> (start != <span class="hljs-number">0</span> || start != A.size() - <span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">if</span> (A[start - <span class="hljs-number">1</span>] &lt; A[start] &amp;&amp; A[start] &lt; A[start + <span class="hljs-number">1</span>])start++;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (A[start - <span class="hljs-number">1</span>] &gt; A[start] &amp;&amp; A[start] &gt; A[start + <span class="hljs-number">1</span>])start--;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (A[start - <span class="hljs-number">1</span>] &lt;= A[start] &amp;&amp; A[start] &gt;= A[start + <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> start;&#125;&#125;</code></pre><br><strong>解法二(二分查找):</strong><br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peakIndexInMountainArray</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A)</span> </span>&#123;<span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, end = A.size() - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (start &lt; end)&#123;<span class="hljs-keyword">int</span> mid = start +(end-start) / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (A[mid] &lt; A[mid + <span class="hljs-number">1</span>])start = mid + <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span>end = mid;&#125;<span class="hljs-keyword">return</span> start;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(6)  JudgeRouteCircle</title>
    <link href="/2018/07/11/leetcode(6)%20%20JudgeRouteCircle/"/>
    <url>/2018/07/11/leetcode(6)%20%20JudgeRouteCircle/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #657<br>Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.</p><p>The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.</p><p>Example 1:<br><pre><code class="hljs cpp">Input: <span class="hljs-string">"UD"</span>Output: <span class="hljs-literal">true</span></code></pre><br>Example 2:<br><pre><code class="hljs cpp">Input: <span class="hljs-string">"LL"</span>Output: <span class="hljs-literal">false</span></code></pre><br><strong>解法一：</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judgeCircle</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> moves)</span> </span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; action = &#123; &#123;<span class="hljs-string">'R'</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">'L'</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">'U'</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">'D'</span>,<span class="hljs-number">0</span>&#125; &#125;;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; moves.size(); i++) &#123;action[moves[i]]++;&#125;<span class="hljs-keyword">return</span> action[<span class="hljs-string">'R'</span>] == action[<span class="hljs-string">'L'</span>] &amp;&amp; action[<span class="hljs-string">'U'</span>] == action[<span class="hljs-string">'D'</span>];&#125;</code></pre><br><strong>解法二：</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judgeCircle</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> moves)</span> </span>&#123;<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> move:moves) &#123;<span class="hljs-keyword">if</span> (move == <span class="hljs-string">'U'</span>) y--;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (move == <span class="hljs-string">'D'</span>) y++;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (move == <span class="hljs-string">'R'</span>) x--;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (move == <span class="hljs-string">'L'</span>) x++;&#125;<span class="hljs-keyword">return</span> x == <span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">0</span>;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv3(3) opencv数据类型</title>
    <link href="/2018/07/10/opencv3(3)%20opencv%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2018/07/10/opencv3(3)%20opencv%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><ul><li>Point 坐标类<br>Point有两种,2维Point和3维Point，Point可以转换为其他数据类型,比如vector或者matrix<br><img src="/images/opencv3/22.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>Scala<br>Scalar继承于vector<br>Scalar(b, g, r) ：b-&gt;蓝色分量 g-&gt;绿色分量 r-&gt;红色分量<br>Scalar(0, 0, 255) -&gt; 红色像素点<br><img src="/images/opencv3/23.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>Size 大小类<br>Size和Point类似,两者可以互相转换,不同之处在于Point的数据成员名为x和y,Size的数据成员名为width和height<br><img src="/images/opencv3/24.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>Rect 矩形类<br>Rect成员包含Point类型的x,y和Size类型的width,height<br><img src="/images/opencv3/25.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>RotatedRect 旋转矩形类<br>RotatedRect包含中心点(Point),大小(Size),旋转角度<br><img src="/images/opencv3/26.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>InputArray OutputArray<br>InputArray和OutputArray区别在于 InputArray为只读,上述基础数据类型都可转换为 InputArray或OutputArray,以此保持函数的简洁性<h3 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h3><img src="/images/opencv3/27.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"><br><img src="/images/opencv3/28.jpg" srcset="/images/loading.gif" alt="&quot;opencv&quot;"></li><li>cv::alignPtr() 指针对齐<pre><code class="hljs cpp"><span class="hljs-comment">// Return aligned pointer of type T*</span><span class="hljs-keyword">template</span>&lt;T&gt; T* cv::alignPtr( T* ptr, <span class="hljs-comment">// pointer, unaligned</span>                                                 <span class="hljs-keyword">int</span> n = <span class="hljs-keyword">sizeof</span>(T)); <span class="hljs-comment">// align to block size, a power of 2</span></code></pre></li><li>cv::allocate() 分配具有T类型的对象数组(C风格）<pre><code class="hljs cpp"><span class="hljs-comment">// Return pointer to allocated buffer</span><span class="hljs-keyword">template</span>&lt;T&gt; T* cv::allocate( <span class="hljs-keyword">size_t</span> sz); <span class="hljs-comment">// buffer size, multiples of sizeof(T)</span></code></pre></li><li>cv::fastAtan2() 计算向量方向 x(向量的x坐标) y(向量的y坐标)<pre><code class="hljs cpp"><span class="hljs-keyword">float</span> cv::fastAtan2(<span class="hljs-keyword">float</span> y, <span class="hljs-keyword">float</span> x );</code></pre></li><li>cvCeil() 返回不小于x的最小整数值<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cvCeil</span><span class="hljs-params">(<span class="hljs-keyword">float</span> x)</span></span>;</code></pre></li><li>cvRound() 返回与x最接近的整数值<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cvRound</span><span class="hljs-params">( <span class="hljs-keyword">double</span> x )</span></span>;</code></pre></li><li>cvFloor() 返回不大于x的最大整数值<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cvFloor</span><span class="hljs-params">( <span class="hljs-keyword">float</span> x&#125;;</span></span></code></pre></li><li>cv::cubeRoot() 计算x的立方根<pre><code class="hljs cpp"><span class="hljs-keyword">float</span> cv::cubeRoot( <span class="hljs-keyword">float</span> x);</code></pre></li><li>cv::format() 格式化输出<pre><code class="hljs cpp"><span class="hljs-built_in">string</span> cv::format(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* fmt, ... );</code></pre></li></ul><hr><h3 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h3><ul><li>TermCriteria 算法终止条件类<br>TermCriteria( int type, int maxCount, double epsilon) 类型 迭代次数 超参数</li><li>Range 整数序列<br>Range(0,4) —-&gt; 0,1,2,3</li></ul><hr><h3 id="Mat-N维稠密矩阵"><a href="#Mat-N维稠密矩阵" class="headerlink" title="Mat N维稠密矩阵"></a>Mat N维稠密矩阵</h3><h4 id="构造矩阵"><a href="#构造矩阵" class="headerlink" title="构造矩阵"></a>构造矩阵</h4><pre><code class="hljs cpp">Mat();Mat(<span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols, <span class="hljs-keyword">int</span> type);Mat(Size size, <span class="hljs-keyword">int</span> type);Mat(<span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols, <span class="hljs-keyword">int</span> type, <span class="hljs-keyword">const</span> Scalar&amp; s);Mat(Size size, <span class="hljs-keyword">int</span> type, <span class="hljs-keyword">const</span> Scalar&amp; s);Mat(<span class="hljs-keyword">int</span> ndims, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* sizes, <span class="hljs-keyword">int</span> type);Mat(<span class="hljs-keyword">int</span> ndims, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* sizes, <span class="hljs-keyword">int</span> type, <span class="hljs-keyword">const</span> Scalar&amp; s);Mat(<span class="hljs-keyword">const</span> Mat&amp; m);Mat(<span class="hljs-keyword">const</span> Mat&amp; m, <span class="hljs-keyword">const</span> Rect&amp; roi);Mat(<span class="hljs-keyword">const</span> Mat&amp; m, <span class="hljs-keyword">const</span> Range* ranges);</code></pre><p>int rows, int cols:二维矩阵的行列数 -&gt;图像分辨率<br>int type：存储元素的数据类型和通道数 CV_[位数][是否带符号][类型前缀]C[通道数]<br>const Scalar&amp; s:矩阵每个元素以s向量(颜色)填充 向量维度由通道数决定<br><pre><code class="hljs cpp"><span class="hljs-function">Mat <span class="hljs-title">matrix</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, CV_8UC3, Scalar(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>))</span></span>;<span class="hljs-function">Mat <span class="hljs-title">matrix</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, CV_8UC2, Scalar(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))</span></span>;</code></pre><br>matrix = [  0,   0, 255,   0,   0, 255 ;  0,   0, 255,   0,   0, 255]<br>matrix = [  1,   2,   1,   2 ; 1,   2,   1,   2]</p><pre><code class="hljs cpp">Mat m；m.create(<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,CV_32FC3)m.setTo(Scalar(<span class="hljs-number">1.0f</span>,<span class="hljs-number">1.0f</span>,<span class="hljs-number">1.0f</span>));<span class="hljs-comment">//设置第一个通道的值</span></code></pre><pre><code class="hljs cpp">Mat matrix = Mat::eye(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, CV_64F);Mat matrix = Mat::ones(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, CV_32F);Mat matrix = Mat::zeros(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, CV_8SC1);</code></pre><p>[1, 0, 0, 0;<br> 0, 1, 0, 0;<br> 0, 0, 1, 0;<br> 0, 0, 0, 1]<br>[1, 1, 1, 1;<br> 1, 1, 1, 1;<br> 1, 1, 1, 1;<br> 1, 1, 1, 1]<br>[  0,   0,   0;<br>0,   0,   0;<br>0,   0,   0]<br><pre><code class="hljs cpp">Mat matrix = (Mat_&lt;<span class="hljs-keyword">double</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);</code></pre><br>[1, 2, 3;<br> 4, 5, 6;<br> 7, 8, 9]</p><p>利用clone() 或者 copyTo()<br><pre><code class="hljs cpp">Mat RowClone = matrix.row(<span class="hljs-number">1</span>).clone();<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"RowClone = "</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; RowClone &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</code></pre></p><h4 id="获取矩阵元素"><a href="#获取矩阵元素" class="headerlink" title="获取矩阵元素"></a>获取矩阵元素</h4><p><img src="/images/opencv3/29.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/opencv3/30.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h4><p><img src="/images/opencv3/31.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h4><p><img src="/images/opencv3/32.jpg" srcset="/images/loading.gif" alt=""><br><img src="/images/opencv3/33.jpg" srcset="/images/loading.gif" alt=""></p><h4 id="打印矩阵"><a href="#打印矩阵" class="headerlink" title="打印矩阵"></a>打印矩阵</h4><pre><code class="hljs cpp"><span class="hljs-function">Mat <span class="hljs-title">matrix</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>, CV_8UC3, Scalar(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))</span></span>;</code></pre><p>默认风格<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; matrix &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</code></pre><br>[  0,   0, 255,   0,   0, 255;<br>   0,   0, 255,   0,   0, 255]</p><p>Python风格<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; format(matrix,Formatter::FMT_PYTHON) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</code></pre><br>[[[  0,   0, 255],<br>  [  0,   0, 255]],<br> [[  0,   0, 255],<br>  [  0,   0, 255]]]</p><p>Numpy风格<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; format(matrix, Formatter::FMT_NUMPY) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</code></pre><br>array([[[  0,   0, 255], [  0,   0, 255], [  0,   0, 255]],<br>       [[  0,   0, 255], [  0,   0, 255], [  0,   0, 255]],<br>       [[  0,   0, 255], [  0,   0, 255], [  0,   0, 255]]], dtype=’uint8’)</p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>opencv3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(5)  HammingDistance</title>
    <link href="/2018/07/10/leetcode(5)%20%20HammingDistance/"/>
    <url>/2018/07/10/leetcode(5)%20%20HammingDistance/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #461</p><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers x and y, calculate the Hamming distance.</p><p>Example:<br><pre><code class="hljs cpp">Input: x = <span class="hljs-number">1</span>, y = <span class="hljs-number">4</span>Output: <span class="hljs-number">2</span>Explanation:<span class="hljs-number">1</span>   (<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>)<span class="hljs-number">4</span>   (<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>)       ↑    ↑</code></pre><br>The above arrows point to positions where the corresponding bits are different.<br><strong>解法一</strong><br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hammingDistance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>, exc = x ^ y;<span class="hljs-keyword">while</span> (exc)&#123;++res;exc &amp;= (exc - <span class="hljs-number">1</span>);&#125;<span class="hljs-keyword">return</span> res;&#125;</code></pre><br><strong>解法二</strong><br><pre><code class="hljs cpp"><span class="hljs-comment">//递归法</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hammingDistance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">if</span> ((x ^ y) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> (x ^ y) % <span class="hljs-number">2</span> + hammingDistance(x / <span class="hljs-number">2</span>, y / <span class="hljs-number">2</span>);&#125;</code></pre><br><strong>解法三</strong><br><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hammingDistance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">int</span> result = x ^ y;<span class="hljs-keyword">int</span> binary = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (result) &#123;binary += result % <span class="hljs-number">2</span>;result = result / <span class="hljs-number">2</span>;&#125;<span class="hljs-keyword">return</span> binary;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(4)  uniqueMorseCodeWords</title>
    <link href="/2018/07/10/leetcode(4)%20%20uniqueMorseCodeWords/"/>
    <url>/2018/07/10/leetcode(4)%20%20uniqueMorseCodeWords/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #804</p><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: “a” maps to “.-“, “b” maps to “-…”, “c” maps to “-.-.”, and so on.</p><p>For convenience, the full table for the 26 letters of the English alphabet is given below:<br><pre><code class="hljs cpp">[<span class="hljs-string">".-"</span>,<span class="hljs-string">"-..."</span>,<span class="hljs-string">"-.-."</span>,<span class="hljs-string">"-.."</span>,<span class="hljs-string">"."</span>,<span class="hljs-string">"..-."</span>,<span class="hljs-string">"--."</span>,<span class="hljs-string">"...."</span>,<span class="hljs-string">".."</span>,<span class="hljs-string">".---"</span>,<span class="hljs-string">"-.-"</span>,<span class="hljs-string">".-.."</span>,<span class="hljs-string">"--"</span>,<span class="hljs-string">"-."</span>,<span class="hljs-string">"---"</span>,<span class="hljs-string">".--."</span>,<span class="hljs-string">"--.-"</span>,<span class="hljs-string">".-."</span>,<span class="hljs-string">"..."</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"..-"</span>,<span class="hljs-string">"...-"</span>,<span class="hljs-string">".--"</span>,<span class="hljs-string">"-..-"</span>,<span class="hljs-string">"-.--"</span>,<span class="hljs-string">"--.."</span>]</code></pre><br>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-.-….-“, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.</p><p>Return the number of different transformations among all words we have.<br><strong>Example:</strong><br><pre><code class="hljs cpp">Input: words = [<span class="hljs-string">"gin"</span>, <span class="hljs-string">"zen"</span>, <span class="hljs-string">"gig"</span>, <span class="hljs-string">"msg"</span>]Output: <span class="hljs-number">2</span>Explanation: The transformation of each word is:<span class="hljs-string">"gin"</span> -&gt; <span class="hljs-string">"--...-."</span><span class="hljs-string">"zen"</span> -&gt; <span class="hljs-string">"--...-."</span><span class="hljs-string">"gig"</span> -&gt; <span class="hljs-string">"--...--."</span><span class="hljs-string">"msg"</span> -&gt; <span class="hljs-string">"--...--."</span></code></pre><br>There are 2 different transformations, “—…-.” and “—…—.”.<br><strong>Note:</strong><br><pre><code class="hljs cpp">The length of words will be at most <span class="hljs-number">100.</span>Each words[i] will have length in range [<span class="hljs-number">1</span>, <span class="hljs-number">12</span>].words[i] will only consist of lowercase letters.</code></pre><br><strong>解法1:</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uniqueMorseRepresentations</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&amp; words)</span> </span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; morse = &#123; <span class="hljs-string">".-"</span>,<span class="hljs-string">"-..."</span>,<span class="hljs-string">"-.-."</span>,<span class="hljs-string">"-.."</span>,<span class="hljs-string">"."</span>,<span class="hljs-string">"..-."</span>,<span class="hljs-string">"--."</span>,<span class="hljs-string">"...."</span>,<span class="hljs-string">".."</span>,<span class="hljs-string">".---"</span>,<span class="hljs-string">"-.-"</span>,<span class="hljs-string">".-.."</span>,<span class="hljs-string">"--"</span>,<span class="hljs-string">"-."</span>,<span class="hljs-string">"---"</span>,<span class="hljs-string">".--."</span>,<span class="hljs-string">"--.-"</span>,<span class="hljs-string">".-."</span>,<span class="hljs-string">"..."</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"..-"</span>,<span class="hljs-string">"...-"</span>,<span class="hljs-string">".--"</span>,<span class="hljs-string">"-..-"</span>,<span class="hljs-string">"-.--"</span>,<span class="hljs-string">"--.."</span> &#125;;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; seen;<span class="hljs-keyword">for</span>(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> word:words)&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> code;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : word)&#123;code.append(morse[c - <span class="hljs-string">'a'</span>]);<span class="hljs-comment">//'a'-&gt;97</span>&#125;seen.insert(code);&#125;<span class="hljs-keyword">return</span> seen.size();&#125;</code></pre><br><strong>解法2：</strong><br><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uniqueMorseRepresentations</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&amp; words)</span> </span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> alpha = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; morse = &#123; <span class="hljs-string">".-"</span>,<span class="hljs-string">"-..."</span>,<span class="hljs-string">"-.-."</span>,<span class="hljs-string">"-.."</span>,<span class="hljs-string">"."</span>,<span class="hljs-string">"..-."</span>,<span class="hljs-string">"--."</span>,<span class="hljs-string">"...."</span>,<span class="hljs-string">".."</span>,<span class="hljs-string">".---"</span>,<span class="hljs-string">"-.-"</span>,<span class="hljs-string">".-.."</span>,<span class="hljs-string">"--"</span>,<span class="hljs-string">"-."</span>,<span class="hljs-string">"---"</span>,<span class="hljs-string">".--."</span>,<span class="hljs-string">"--.-"</span>,<span class="hljs-string">".-."</span>,<span class="hljs-string">"..."</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"..-"</span>,<span class="hljs-string">"...-"</span>,<span class="hljs-string">".--"</span>,<span class="hljs-string">"-..-"</span>,<span class="hljs-string">"-.--"</span>,<span class="hljs-string">"--.."</span> &#125;;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; alpha_code;<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = alpha.begin(); i &lt; alpha.end(); i++) &#123;alpha_code[*i] = morse[index++];&#125;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; seen;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str : words) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str_code;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : str) &#123;str_code += alpha_code[c];&#125;seen.insert(str_code);&#125;<span class="hljs-keyword">return</span> seen.size();&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(3) Jewels and Stones</title>
    <link href="/2018/07/08/leetcode(3)%20Jewels%20and%20Stones/"/>
    <url>/2018/07/08/leetcode(3)%20Jewels%20and%20Stones/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #771</p><p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p><p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.<br>Example 1:<br><pre><code class="hljs cpp">Input: J = <span class="hljs-string">"aA"</span>, S = <span class="hljs-string">"aAAbbbb"</span>Output: <span class="hljs-number">3</span></code></pre><br>Example 2:<br><pre><code class="hljs cpp">Input: J = <span class="hljs-string">"z"</span>, S = <span class="hljs-string">"ZZ"</span>Output: <span class="hljs-number">0</span></code></pre><br>Note:<br>S and J will consist of letters and have length at most 50.<br>The characters in J are distinct.</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numJewelsInStones</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> J, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> S)</span> </span>&#123;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = S.begin(); i &lt; S.end(); i++) &#123;<span class="hljs-keyword">if</span> (J.find(*i) != <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::npos)num++;&#125;<span class="hljs-keyword">return</span> num;&#125;</code></pre><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(2) Reverse Integer</title>
    <link href="/2018/07/06/leetcode(2)%20Reverse%20Integer/"/>
    <url>/2018/07/06/leetcode(2)%20Reverse%20Integer/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #728<br>Given a 32-bit signed integer, reverse digits of an integer.<br>Example 1:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">123</span>Output: <span class="hljs-number">321</span></code></pre><br>Example 2:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">-123</span>Output: <span class="hljs-number">-321</span></code></pre><br>Example 3:<br><pre><code class="hljs cpp">Input: <span class="hljs-number">120</span>Output: <span class="hljs-number">21</span></code></pre><br>Note:<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−$2^{31}$ , $2^{31}$ − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span> ) &#123;<span class="hljs-keyword">int</span> num = x % <span class="hljs-number">10</span>;<span class="hljs-keyword">if</span> (result &gt; INT_MAX / <span class="hljs-number">10</span> || (result == INT_MAX / <span class="hljs-number">10</span> &amp;&amp; num &gt; <span class="hljs-number">7</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (result &lt; INT_MIN / <span class="hljs-number">10</span> || (result == INT_MIN / <span class="hljs-number">10</span> &amp;&amp; num &lt; <span class="hljs-number">-8</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;x = x / <span class="hljs-number">10</span>;result = result * <span class="hljs-number">10</span> + num;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode(1) Two-Sum</title>
    <link href="/2018/07/06/leetcode(1)%20Two-Sum/"/>
    <url>/2018/07/06/leetcode(1)%20Two-Sum/</url>
    
    <content type="html"><![CDATA[<p>difficult：easy #1<br>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>Example:<br><pre><code class="hljs cpp">Given nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>,Because nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>,<span class="hljs-keyword">return</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].</code></pre></p><h3 id="解法1-暴力法"><a href="#解法1-暴力法" class="headerlink" title="解法1 暴力法"></a>解法1 暴力法</h3><p>时间复杂度 O(<script type="math/tex">n^2</script>)<br><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; sum::twoSum(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.size(); j++) &#123;<span class="hljs-keyword">int</span> sum = nums[i] + nums[j];<span class="hljs-keyword">if</span> (sum == target) &#123;  result.push_back(i);  result.push_back(j);&#125;  &#125;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre></p><h3 id="解法2-HashMap"><a href="#解法2-HashMap" class="headerlink" title="解法2 HashMap"></a>解法2 HashMap</h3><p>时间复杂度 O(<script type="math/tex">n</script>)<br><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; nums_map;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++)&#123;nums_map[nums[i]] = i;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++)&#123;<span class="hljs-keyword">int</span> value = target - nums[i];<span class="hljs-keyword">if</span> (nums_map.find(value) != nums_map.end() &amp;&amp; nums_map[value] != i) &#123;result.push_back(i);result.push_back(nums_map[value]);<span class="hljs-keyword">return</span> result;&#125;&#125;&#125;</code></pre></p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker入门指南</title>
    <link href="/2018/06/13/Docker%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2018/06/13/Docker%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/docker.jpg" srcset="/images/loading.gif" alt="&quot;docker&quot;">  </p><p><strong>1.Docker简介</strong></p><p>问题引入:当我们在本机开发好应用程序以后需要发布到服务器，但是服务器并非和我们本机系统有着一样的运行环境，如缺少数据库、缺少各种依赖包、依赖软件版本过低等等问题，需要花很长时间重新在服务器配置好运行环境，得不偿失.那么有没有方法能够将我们开发程序时本机上所有的运行环境打包，直接部署到服务器上程序就能运行的机制呢?</p><p>Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，Docker是一个开源的应用容器引擎，基于Go语言，并遵从Apache2.0协议开源.容器是完全使用沙箱机制，相互之间不会有任何接口(类似iPhone的 app)，更重要的是容器性能开销极低.[来源网络]</p><p>通过上述定义可以知道，Docker似乎类似于虚拟机，可以在Docker中打包安装任何应用并运行，比如tomcat、Java、mysql等.但它并不等同于虚拟机，为了区分Docker和虚拟机，我们先来了解虚拟机的运行机制，如下图所示：</p><p><img src="/images/docker3.png" srcset="/images/loading.gif" alt="virtualbox"></p><blockquote><p>基础设施（Infrastructure):个人电脑，数据中心的服务器，或者是云主机</p><p>操作系统（Host Operating System）：MacOS，Windows或者Linux发行版</p><p>虚拟机管理系统（Hypervisor)：virtualBox,VMWare</p><p>从操作系统（Guest Operating System）:运行在virtualBox,VMWare中的虚拟机</p><p>依赖(bins/libs)：安装python，mysql等需要的依赖项</p><p>应用(APP)：Web 应用、后台应用、数据库应用等</p></blockquote><p>可以看出若隔离不同的应用，需要安装并启动不同的虚拟机，虚拟机的启动速度慢而且开销极大.Docker容器运行的应用不仅处于隔离状态，而且启动速度极快(毫秒级)，而且开销极小.下图为Docker的运行机制:</p><p><img src="/images/docker1.png" srcset="/images/loading.gif" alt="docker"></p><blockquote><p>基础设施（Infrastructure):个人电脑，数据中心的服务器，或者是云主机</p><p>操作系统（Host Operating System）：Linux</p><p>Docker守护进程（Docker Daemon）：Docker守护进程取代了Hypervisor，运行在操作系统之上的后台进程，负责管理Docker容器,等同于virtualBox,VMWare</p><p>依赖(bins/libs)：应用的所有依赖都打包在Docker镜像中，Docker容器是基于Docker镜像创建的</p><p>应用(APP)：应用的源代码及其依赖都打包在Docker镜像中，不同的应用需要不同的Docker镜像.不同的应用运行在不同的Docker容器中，它们是相互隔离的</p></blockquote><p>Docker守护进程可以直接与主操作系统进行通信，为各个Docker容器分配资源,它还可以将容器与主操作系统隔离，并将各个容器互相隔离。<br>虚拟机启动需要数分钟，而Docker容器可以在数毫秒内启动,由于没有臃肿的从操作系统,Docker可以节省大量的磁盘空间以及其他系统资源。</p><hr><p><strong>2.Docker安装(基于Ubuntu)</strong></p><p>在创建Docker容器前需要先安装Docker容器引擎，类似于虚拟机的virtualBox或VMWare.<br><pre><code class="hljs bash"><span class="hljs-comment">#查看内核版本 docker安装需要大于3.1</span>$ uname -r4.13.0-36-generic<span class="hljs-comment">#更新软件源</span>$ sudo apt-get update<span class="hljs-comment">#安装docker</span>sudo apt-get install docker.io <span class="hljs-comment">#查看安装的docker版本(无错则安装成功)</span>$ docker --versionDocker version 1.13.1, build 092cba3<span class="hljs-comment">#运行hello-wolrd实例(该命令运行时会从镜像仓库中拉取docker镜像)</span>$ sudo docker run hello-worldlatest: Pulling from library/hello-world9bb5a5d4561a: Pull complete Digest: sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.....<span class="hljs-comment">#查看已有的镜像</span>$ sudo docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              e38bc07ac18e        2 months ago        1.85 kB<span class="hljs-comment">#hello-world即从镜像仓库中拉取的镜像 docker run hello-world:latest 启动容器</span></code></pre></p><hr><p><strong>3.容器和镜像</strong><br>如下图所示，容器是由镜像实例化而来，类似于面向对象的概念，镜像看作类，容器则为类实例化后的对象.一个Docker镜像可以构建于另一个Docker镜像之上,好比类的继承机制.<br><img src="http://upload-images.jianshu.io/upload_images/2156466-b4341e9da2e6e170.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" srcset="/images/loading.gif" alt="images"><br>docker的镜像概念类似虚拟机的镜像,是一个只读的模板,一个独立的文件系统,包括运行容器所需的数据，且可以用来创建新的容器(docker create <image -id >)，为指定的镜像添加一个可读写层.例如：一个镜像可以包含一个完整的ubuntu操作系统环境,类似于虚拟机的.iso文件.<br>docker利用容器来运行应用,docker容器是由docker镜像创建的运行实例,docker容器类似利用.iso文件安装后的虚拟机，可以执行各种读写操作,每个容器间是相互隔离的，容器中会运行特定的运用，包含特定应用的代码及所需的依赖文件,可以把容器看作一个简易版的linux环境.可以用同一个镜像启动多个Docker容器.</p><hr><p><strong>4.docker命令</strong><br><pre><code class="hljs bash"><span class="hljs-comment">#查看已有的镜像</span>$ sudo docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              e38bc07ac18e        2 months ago        1.85 kB<span class="hljs-comment">#启动容器 </span>$ docker run hello-world <span class="hljs-comment">#run 创建基于该镜像的容器并启动</span><span class="hljs-comment">#启动指定版本容器</span>$ docker run hello-world:latest<span class="hljs-comment">#查看已启动的容器</span>$ docker ps  <span class="hljs-comment">#查看存在的容器</span>$ docker ps -a <span class="hljs-comment">#启动已存在的容器</span>$ docker start 容器ID<span class="hljs-comment">#启动容器(守护方式/后台启动)</span>$ docker run -d 容器ID$ docker start -d 容器ID<span class="hljs-comment">#重新进入容器</span>$ docker attach 容器ID<span class="hljs-comment">#运行的容器种启动新进程</span>$ docker <span class="hljs-built_in">exec</span> -i -t 容器ID /bin/bash<span class="hljs-comment">#停止守护容器</span>$ docker stop 容器ID <span class="hljs-comment">#等待容器停止</span>$ docker <span class="hljs-built_in">kill</span> 容器ID <span class="hljs-comment">#立即停止容器</span><span class="hljs-comment">#删除容器</span>$ docker rm 容器ID<span class="hljs-comment">#容器端口映射</span>docker -P / docker --publish-all=<span class="hljs-literal">true</span>|<span class="hljs-literal">false</span> <span class="hljs-comment">#映射所有端口</span>$ docker run -P -i -t ubuntu <span class="hljs-comment">#宿主机端口随机</span>docker -p <span class="hljs-comment">#映射指定端口</span>$ docker run -p 80 -i -t ubuntu  <span class="hljs-comment">#宿主机端口随机</span>$ docker run -p 8080:80 -i -t ubuntu  <span class="hljs-comment">#宿主机端口:容器端口</span>$ docker run -p 0.0.0.0:80 -i -t ubuntu  <span class="hljs-comment">#宿主机ip:容器端口</span>$ docker run -p 0.0.0.0:8080:80 -i -t ubuntu  <span class="hljs-comment">#宿主机ip:宿主机端口:容器端口</span><span class="hljs-comment">#根据当前容器状态 创建新的镜像</span>docker commit -m=<span class="hljs-string">'ssh install'</span> -a=<span class="hljs-string">'jiaopan'</span> cb57c338f1c9 kyleson/jpos<span class="hljs-comment">#-m 说明文字</span><span class="hljs-comment">#-a 作者</span><span class="hljs-comment">#cb57c338f1c9 容器ID</span><span class="hljs-comment">#kyleson/jpos 镜像名称</span><span class="hljs-comment">#-p 提交时暂停容器</span><span class="hljs-comment">#上传镜像到docker hub</span>$ sudo docker login$ sudo docker push kyleson/jpos</code></pre></p><p><strong>5.docker实例</strong></p><h1 id="远程登陆docker容器"><a href="#远程登陆docker容器" class="headerlink" title="远程登陆docker容器"></a>远程登陆docker容器</h1><pre><code class="hljs bash"><span class="hljs-comment">#1.创建并启动docker容器 </span>$ docker run -p 2222:22 -i -t ubuntu:latest /bin/bash <span class="hljs-comment">#避免重复创建容器 启动已有容器时使用start命令</span><span class="hljs-comment">#2.安装ssh</span>$ apt-get install openssh-server<span class="hljs-comment">#3.修改ssh_config </span>$ vim /etc/ssh/sshd_config PermitRootLogin yes <span class="hljs-comment">#允许root用户以任何认证方式登录</span>PasswordAuthentication yes<span class="hljs-comment">#notes:</span><span class="hljs-comment">#PermitRootLogin without-password #只允许root用公钥认证方式登录</span><span class="hljs-comment">#PermitRootLogin no #不允许root用户以任何认证方式登录</span><span class="hljs-comment">#4.启动ssh</span>$ service ssh restart <span class="hljs-comment">#</span><span class="hljs-comment">#5.#修改root密码</span>$ passwd root<span class="hljs-comment">#6.查看容器ip</span>$ ifconfig<span class="hljs-comment">#7.返回宿主机且保持容器的运行</span>ctrl+p ctrl+q <span class="hljs-comment">#8.宿主机测试ssh登陆容器</span>$ ssh -p root@容器ip <span class="hljs-comment">#9.远程登陆容器</span>$ ssh -p 2222 root@容器宿主机ip <span class="hljs-comment">#宿主机2222端口以映射到容器的22端口</span></code></pre><p>至此,便可像登陆虚拟机一样玩转容器</p><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv3(1-2) linux配置opencv3开发环境</title>
    <link href="/2018/03/11/opencv3(1-2)%20linux%E9%85%8D%E7%BD%AEopencv3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2018/03/11/opencv3(1-2)%20linux%E9%85%8D%E7%BD%AEopencv3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p><strong>环境</strong><br>ubuntu<br>cmake<br>cmake-gui<br>opencv-3.3.1 下载地址:<a href="https://opencv.org/releases.html" target="_blank" rel="noopener">https://opencv.org/releases.html</a><br>opencv_contrib-3.3.1 下载地址:<a href="https://github.com/opencv/opencv_contrib/releases" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib/releases</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>更新系统<pre><code class="hljs bash">sudo apt-get updatesudo apt-get upgrade</code></pre></li><li>安装cmake及必要依赖<pre><code class="hljs bash">sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></pre></li><li>安装cmake-gui<pre><code class="hljs bash">sudo apt-get install cmake-qt-gui</code></pre></li><li>解压opencv以及opecv_contrib至同一目录<br><img src="/images/opencv3/2-1.png" srcset="/images/loading.gif" alt=""></li><li>opencv目录内新建build目录<br><img src="/images/opencv3/2-2.png" srcset="/images/loading.gif" alt=""><br>build目录内打开终端运行cmake-gui<pre><code class="hljs bash">cmake-gui</code></pre></li></ul><h1 id="编译-安装"><a href="#编译-安装" class="headerlink" title="编译 / 安装"></a>编译 / 安装</h1><ul><li><p>配置源码目录以及编译目录<br><img src="/images/opencv3/2-3.png" srcset="/images/loading.gif" alt=""></p></li><li><p>执行Configure<br>Unix Makefiles - &gt; Use default native compilers(默认) - &gt; Finish<br><img src="/images/opencv3/2-4.png" srcset="/images/loading.gif" alt=""></p></li><li><p>配置编译属性<br>CMAKE_BUILD_TYPE：RELEASE<br>CMAKE_INSTALL_PREFIX：/home/jiaopan/app/opencv #配置安装目录 可默认<br><img src="/images/opencv3/2-5.png" srcset="/images/loading.gif" alt=""><br>OPENCV_EXTRA_MODULES_PATH：/home/jiaopan/app/opencv3/opencv_contrib-3.3.1/modules #opencv_contrib的modules目录<br><img src="/images/opencv3/2-6.png" srcset="/images/loading.gif" alt=""></p></li><li><p>执行Generate 生成配置文件</p></li><li><p>build目录内打开终端 执行make命令开始编译 ，100%时编译成功<br><img src="/images/opencv3/2-7.png" srcset="/images/loading.gif" alt=""></p></li><li><p>编译成功，执行make install 命令进行安装</p></li><li><p>编译时问题</p><pre><code class="hljs bash"><span class="hljs-comment">#1.问题1</span>collect2: error: ld returned 1 <span class="hljs-built_in">exit</span> statusmodules/core/CMakeFiles/opencv_perf_core.dir/build.make:882: recipe <span class="hljs-keyword">for</span> target <span class="hljs-string">'bin/opencv_perf_core'</span> failedmake[2]: *** [bin/opencv_perf_core] Error 1CMakeFiles/Makefile2:2627: recipe <span class="hljs-keyword">for</span> target <span class="hljs-string">'modules/core/CMakeFiles/opencv_perf_core.dir/all'</span> failedmake[1]: *** [modules/core/CMakeFiles/opencv_perf_core.dir/all] Error 2Makefile:160: recipe <span class="hljs-keyword">for</span> target <span class="hljs-string">'all'</span> failedmake: *** [all] Error 2<span class="hljs-comment">#解决：缺少ffmpeg</span><span class="hljs-comment">#安装ffmpeg</span>sudo add-apt-repository ppa:djcj/hybrid  sudo apt-get update  sudo apt-get install ffmpeg</code></pre></li><li><p>命令编译和安装</p></li></ul><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> buildsudo cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="hljs-built_in">local</span>sudo make -j8sudo make install</code></pre><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><pre><code class="hljs bash">sudo vim /etc/ld.so.conf.d/opencv.conf <span class="hljs-comment">#添加 /home/jiaopan/app/opencv/lib内容 ，即opencv安装目录下的lib目录路径</span>sudo ldconfig <span class="hljs-comment">#更新动态链接库</span>sudo vim /etc/bash.bashrc <span class="hljs-comment">#末尾添加如下内容</span>PKG_CONFIG_PATH=<span class="hljs-variable">$PKG_CONFIG_PATH</span>:opencv安装目录/lib/pkgconfig <span class="hljs-built_in">export</span> PKG_CONFIG_PATH<span class="hljs-comment">#-----------------------------------------</span><span class="hljs-built_in">source</span> /etc/profile <span class="hljs-comment">#更新环境变量 </span>pkg-config --cflags --libs opencv <span class="hljs-comment">#测试是否安装成功</span></code></pre><p>安装成功:<br><img src="/images/opencv3/2-8.png" srcset="/images/loading.gif" alt=""></p><h1 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h1><ul><li>eclipse for c/c++ 新建C/C++项目</li><li><p>添加opencv包含目录<br><img src="/images/opencv3/2-9.png" srcset="/images/loading.gif" alt=""></p></li><li><p>引入库文件 可通过pkg-config —libs opencv 命令查看库文件<br><img src="/images/opencv3/2-10.png" srcset="/images/loading.gif" alt=""></p></li><li>复制到图片到项目根路径下<br><img src="/images/opencv3/2-11.png" srcset="/images/loading.gif" alt=""></li><li>测试代码<pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 读入一张图片</span>    cv::Mat image=cv::imread(<span class="hljs-string">"dog.jpg"</span>);    <span class="hljs-comment">// 在窗口中显示</span>    cv::imshow(<span class="hljs-string">"test"</span>,image);    <span class="hljs-comment">// 等待6000 ms后窗口自动关闭</span>    cv::waitKey(<span class="hljs-number">6000</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></li><li>右键项目 build project 执行编译</li><li>编译成功，右键项目执行run as local C/C++ Application<br><img src="/images/opencv3/2-12.png" srcset="/images/loading.gif" alt=""></li></ul><p>版权声明：原创,转载请注明来源,否则律师函警告</p>]]></content>
    
    
    <categories>
      
      <category>opencv3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv3</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
